
CombineCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b6c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08006d18  08006d18  00016d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007174  08007174  00032c10  2**0
                  CONTENTS
  4 .ARM          00000008  08007174  08007174  00017174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800717c  0800717c  00032c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800717c  0800717c  0001717c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007180  08007180  00017180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00012c10  20000000  08007184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bf4  20012c10  08019d94  00032c10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20013804  08019d94  00033804  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00032c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019227  00000000  00000000  00032c40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003441  00000000  00000000  0004be67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001498  00000000  00000000  0004f2a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001310  00000000  00000000  00050740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004766  00000000  00000000  00051a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017de2  00000000  00000000  000561b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e2d2f  00000000  00000000  0006df98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150cc7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055fc  00000000  00000000  00150d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20012c10 	.word	0x20012c10
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006d00 	.word	0x08006d00

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20012c14 	.word	0x20012c14
 80001e8:	08006d00 	.word	0x08006d00

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b96e 	b.w	80004f0 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468c      	mov	ip, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	f040 8083 	bne.w	8000342 <__udivmoddi4+0x116>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d947      	bls.n	80002d2 <__udivmoddi4+0xa6>
 8000242:	fab2 f282 	clz	r2, r2
 8000246:	b142      	cbz	r2, 800025a <__udivmoddi4+0x2e>
 8000248:	f1c2 0020 	rsb	r0, r2, #32
 800024c:	fa24 f000 	lsr.w	r0, r4, r0
 8000250:	4091      	lsls	r1, r2
 8000252:	4097      	lsls	r7, r2
 8000254:	ea40 0c01 	orr.w	ip, r0, r1
 8000258:	4094      	lsls	r4, r2
 800025a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800025e:	0c23      	lsrs	r3, r4, #16
 8000260:	fbbc f6f8 	udiv	r6, ip, r8
 8000264:	fa1f fe87 	uxth.w	lr, r7
 8000268:	fb08 c116 	mls	r1, r8, r6, ip
 800026c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000270:	fb06 f10e 	mul.w	r1, r6, lr
 8000274:	4299      	cmp	r1, r3
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x60>
 8000278:	18fb      	adds	r3, r7, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295
 800027e:	f080 8119 	bcs.w	80004b4 <__udivmoddi4+0x288>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 8116 	bls.w	80004b4 <__udivmoddi4+0x288>
 8000288:	3e02      	subs	r6, #2
 800028a:	443b      	add	r3, r7
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a0:	45a6      	cmp	lr, r4
 80002a2:	d909      	bls.n	80002b8 <__udivmoddi4+0x8c>
 80002a4:	193c      	adds	r4, r7, r4
 80002a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002aa:	f080 8105 	bcs.w	80004b8 <__udivmoddi4+0x28c>
 80002ae:	45a6      	cmp	lr, r4
 80002b0:	f240 8102 	bls.w	80004b8 <__udivmoddi4+0x28c>
 80002b4:	3802      	subs	r0, #2
 80002b6:	443c      	add	r4, r7
 80002b8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002bc:	eba4 040e 	sub.w	r4, r4, lr
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa0>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	b902      	cbnz	r2, 80002d6 <__udivmoddi4+0xaa>
 80002d4:	deff      	udf	#255	; 0xff
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	2a00      	cmp	r2, #0
 80002dc:	d150      	bne.n	8000380 <__udivmoddi4+0x154>
 80002de:	1bcb      	subs	r3, r1, r7
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f f887 	uxth.w	r8, r7
 80002e8:	2601      	movs	r6, #1
 80002ea:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ee:	0c21      	lsrs	r1, r4, #16
 80002f0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002f4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002f8:	fb08 f30c 	mul.w	r3, r8, ip
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0xe4>
 8000300:	1879      	adds	r1, r7, r1
 8000302:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0xe2>
 8000308:	428b      	cmp	r3, r1
 800030a:	f200 80e9 	bhi.w	80004e0 <__udivmoddi4+0x2b4>
 800030e:	4684      	mov	ip, r0
 8000310:	1ac9      	subs	r1, r1, r3
 8000312:	b2a3      	uxth	r3, r4
 8000314:	fbb1 f0fe 	udiv	r0, r1, lr
 8000318:	fb0e 1110 	mls	r1, lr, r0, r1
 800031c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000320:	fb08 f800 	mul.w	r8, r8, r0
 8000324:	45a0      	cmp	r8, r4
 8000326:	d907      	bls.n	8000338 <__udivmoddi4+0x10c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	d202      	bcs.n	8000336 <__udivmoddi4+0x10a>
 8000330:	45a0      	cmp	r8, r4
 8000332:	f200 80d9 	bhi.w	80004e8 <__udivmoddi4+0x2bc>
 8000336:	4618      	mov	r0, r3
 8000338:	eba4 0408 	sub.w	r4, r4, r8
 800033c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000340:	e7bf      	b.n	80002c2 <__udivmoddi4+0x96>
 8000342:	428b      	cmp	r3, r1
 8000344:	d909      	bls.n	800035a <__udivmoddi4+0x12e>
 8000346:	2d00      	cmp	r5, #0
 8000348:	f000 80b1 	beq.w	80004ae <__udivmoddi4+0x282>
 800034c:	2600      	movs	r6, #0
 800034e:	e9c5 0100 	strd	r0, r1, [r5]
 8000352:	4630      	mov	r0, r6
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	fab3 f683 	clz	r6, r3
 800035e:	2e00      	cmp	r6, #0
 8000360:	d14a      	bne.n	80003f8 <__udivmoddi4+0x1cc>
 8000362:	428b      	cmp	r3, r1
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0x140>
 8000366:	4282      	cmp	r2, r0
 8000368:	f200 80b8 	bhi.w	80004dc <__udivmoddi4+0x2b0>
 800036c:	1a84      	subs	r4, r0, r2
 800036e:	eb61 0103 	sbc.w	r1, r1, r3
 8000372:	2001      	movs	r0, #1
 8000374:	468c      	mov	ip, r1
 8000376:	2d00      	cmp	r5, #0
 8000378:	d0a8      	beq.n	80002cc <__udivmoddi4+0xa0>
 800037a:	e9c5 4c00 	strd	r4, ip, [r5]
 800037e:	e7a5      	b.n	80002cc <__udivmoddi4+0xa0>
 8000380:	f1c2 0320 	rsb	r3, r2, #32
 8000384:	fa20 f603 	lsr.w	r6, r0, r3
 8000388:	4097      	lsls	r7, r2
 800038a:	fa01 f002 	lsl.w	r0, r1, r2
 800038e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000392:	40d9      	lsrs	r1, r3
 8000394:	4330      	orrs	r0, r6
 8000396:	0c03      	lsrs	r3, r0, #16
 8000398:	fbb1 f6fe 	udiv	r6, r1, lr
 800039c:	fa1f f887 	uxth.w	r8, r7
 80003a0:	fb0e 1116 	mls	r1, lr, r6, r1
 80003a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003a8:	fb06 f108 	mul.w	r1, r6, r8
 80003ac:	4299      	cmp	r1, r3
 80003ae:	fa04 f402 	lsl.w	r4, r4, r2
 80003b2:	d909      	bls.n	80003c8 <__udivmoddi4+0x19c>
 80003b4:	18fb      	adds	r3, r7, r3
 80003b6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ba:	f080 808d 	bcs.w	80004d8 <__udivmoddi4+0x2ac>
 80003be:	4299      	cmp	r1, r3
 80003c0:	f240 808a 	bls.w	80004d8 <__udivmoddi4+0x2ac>
 80003c4:	3e02      	subs	r6, #2
 80003c6:	443b      	add	r3, r7
 80003c8:	1a5b      	subs	r3, r3, r1
 80003ca:	b281      	uxth	r1, r0
 80003cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003d4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003d8:	fb00 f308 	mul.w	r3, r0, r8
 80003dc:	428b      	cmp	r3, r1
 80003de:	d907      	bls.n	80003f0 <__udivmoddi4+0x1c4>
 80003e0:	1879      	adds	r1, r7, r1
 80003e2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003e6:	d273      	bcs.n	80004d0 <__udivmoddi4+0x2a4>
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d971      	bls.n	80004d0 <__udivmoddi4+0x2a4>
 80003ec:	3802      	subs	r0, #2
 80003ee:	4439      	add	r1, r7
 80003f0:	1acb      	subs	r3, r1, r3
 80003f2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003f6:	e778      	b.n	80002ea <__udivmoddi4+0xbe>
 80003f8:	f1c6 0c20 	rsb	ip, r6, #32
 80003fc:	fa03 f406 	lsl.w	r4, r3, r6
 8000400:	fa22 f30c 	lsr.w	r3, r2, ip
 8000404:	431c      	orrs	r4, r3
 8000406:	fa20 f70c 	lsr.w	r7, r0, ip
 800040a:	fa01 f306 	lsl.w	r3, r1, r6
 800040e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000412:	fa21 f10c 	lsr.w	r1, r1, ip
 8000416:	431f      	orrs	r7, r3
 8000418:	0c3b      	lsrs	r3, r7, #16
 800041a:	fbb1 f9fe 	udiv	r9, r1, lr
 800041e:	fa1f f884 	uxth.w	r8, r4
 8000422:	fb0e 1119 	mls	r1, lr, r9, r1
 8000426:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800042a:	fb09 fa08 	mul.w	sl, r9, r8
 800042e:	458a      	cmp	sl, r1
 8000430:	fa02 f206 	lsl.w	r2, r2, r6
 8000434:	fa00 f306 	lsl.w	r3, r0, r6
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x220>
 800043a:	1861      	adds	r1, r4, r1
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	d248      	bcs.n	80004d4 <__udivmoddi4+0x2a8>
 8000442:	458a      	cmp	sl, r1
 8000444:	d946      	bls.n	80004d4 <__udivmoddi4+0x2a8>
 8000446:	f1a9 0902 	sub.w	r9, r9, #2
 800044a:	4421      	add	r1, r4
 800044c:	eba1 010a 	sub.w	r1, r1, sl
 8000450:	b2bf      	uxth	r7, r7
 8000452:	fbb1 f0fe 	udiv	r0, r1, lr
 8000456:	fb0e 1110 	mls	r1, lr, r0, r1
 800045a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800045e:	fb00 f808 	mul.w	r8, r0, r8
 8000462:	45b8      	cmp	r8, r7
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x24a>
 8000466:	19e7      	adds	r7, r4, r7
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d22e      	bcs.n	80004cc <__udivmoddi4+0x2a0>
 800046e:	45b8      	cmp	r8, r7
 8000470:	d92c      	bls.n	80004cc <__udivmoddi4+0x2a0>
 8000472:	3802      	subs	r0, #2
 8000474:	4427      	add	r7, r4
 8000476:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047a:	eba7 0708 	sub.w	r7, r7, r8
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	454f      	cmp	r7, r9
 8000484:	46c6      	mov	lr, r8
 8000486:	4649      	mov	r1, r9
 8000488:	d31a      	bcc.n	80004c0 <__udivmoddi4+0x294>
 800048a:	d017      	beq.n	80004bc <__udivmoddi4+0x290>
 800048c:	b15d      	cbz	r5, 80004a6 <__udivmoddi4+0x27a>
 800048e:	ebb3 020e 	subs.w	r2, r3, lr
 8000492:	eb67 0701 	sbc.w	r7, r7, r1
 8000496:	fa07 fc0c 	lsl.w	ip, r7, ip
 800049a:	40f2      	lsrs	r2, r6
 800049c:	ea4c 0202 	orr.w	r2, ip, r2
 80004a0:	40f7      	lsrs	r7, r6
 80004a2:	e9c5 2700 	strd	r2, r7, [r5]
 80004a6:	2600      	movs	r6, #0
 80004a8:	4631      	mov	r1, r6
 80004aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e70b      	b.n	80002cc <__udivmoddi4+0xa0>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e9      	b.n	800028c <__udivmoddi4+0x60>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6fd      	b.n	80002b8 <__udivmoddi4+0x8c>
 80004bc:	4543      	cmp	r3, r8
 80004be:	d2e5      	bcs.n	800048c <__udivmoddi4+0x260>
 80004c0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004c4:	eb69 0104 	sbc.w	r1, r9, r4
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7df      	b.n	800048c <__udivmoddi4+0x260>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e7d2      	b.n	8000476 <__udivmoddi4+0x24a>
 80004d0:	4660      	mov	r0, ip
 80004d2:	e78d      	b.n	80003f0 <__udivmoddi4+0x1c4>
 80004d4:	4681      	mov	r9, r0
 80004d6:	e7b9      	b.n	800044c <__udivmoddi4+0x220>
 80004d8:	4666      	mov	r6, ip
 80004da:	e775      	b.n	80003c8 <__udivmoddi4+0x19c>
 80004dc:	4630      	mov	r0, r6
 80004de:	e74a      	b.n	8000376 <__udivmoddi4+0x14a>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	4439      	add	r1, r7
 80004e6:	e713      	b.n	8000310 <__udivmoddi4+0xe4>
 80004e8:	3802      	subs	r0, #2
 80004ea:	443c      	add	r4, r7
 80004ec:	e724      	b.n	8000338 <__udivmoddi4+0x10c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <LCD_DrawABig>:
		}
}


//Matthew's Addition
void LCD_DrawABig(uint16_t x0, uint16_t y0) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	80fb      	strh	r3, [r7, #6]
 8000500:	4613      	mov	r3, r2
 8000502:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000504:	230f      	movs	r3, #15
 8000506:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000508:	2300      	movs	r3, #0
 800050a:	61fb      	str	r3, [r7, #28]
 800050c:	e030      	b.n	8000570 <LCD_DrawABig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 800050e:	2300      	movs	r3, #0
 8000510:	61bb      	str	r3, [r7, #24]
 8000512:	e026      	b.n	8000562 <LCD_DrawABig+0x6e>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || (dy >= 6 && dy <= 9))) {
 8000514:	69bb      	ldr	r3, [r7, #24]
 8000516:	2b03      	cmp	r3, #3
 8000518:	dd0b      	ble.n	8000532 <LCD_DrawABig+0x3e>
 800051a:	69bb      	ldr	r3, [r7, #24]
 800051c:	2b0b      	cmp	r3, #11
 800051e:	dc08      	bgt.n	8000532 <LCD_DrawABig+0x3e>
 8000520:	69fb      	ldr	r3, [r7, #28]
 8000522:	2b03      	cmp	r3, #3
 8000524:	dd05      	ble.n	8000532 <LCD_DrawABig+0x3e>
 8000526:	69fb      	ldr	r3, [r7, #28]
 8000528:	2b05      	cmp	r3, #5
 800052a:	dd17      	ble.n	800055c <LCD_DrawABig+0x68>
 800052c:	69fb      	ldr	r3, [r7, #28]
 800052e:	2b09      	cmp	r3, #9
 8000530:	dc14      	bgt.n	800055c <LCD_DrawABig+0x68>
				int y = y0 + dy;
 8000532:	88bb      	ldrh	r3, [r7, #4]
 8000534:	69fa      	ldr	r2, [r7, #28]
 8000536:	4413      	add	r3, r2
 8000538:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800053a:	88fb      	ldrh	r3, [r7, #6]
 800053c:	69ba      	ldr	r2, [r7, #24]
 800053e:	4413      	add	r3, r2
 8000540:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <LCD_DrawABig+0x90>)
 8000544:	7818      	ldrb	r0, [r3, #0]
 8000546:	693a      	ldr	r2, [r7, #16]
 8000548:	4613      	mov	r3, r2
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	1a9b      	subs	r3, r3, r2
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	461a      	mov	r2, r3
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	4413      	add	r3, r2
 8000556:	4619      	mov	r1, r3
 8000558:	f001 fede 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800055c:	69bb      	ldr	r3, [r7, #24]
 800055e:	3301      	adds	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
 8000562:	7dfb      	ldrb	r3, [r7, #23]
 8000564:	69ba      	ldr	r2, [r7, #24]
 8000566:	429a      	cmp	r2, r3
 8000568:	ddd4      	ble.n	8000514 <LCD_DrawABig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800056a:	69fb      	ldr	r3, [r7, #28]
 800056c:	3301      	adds	r3, #1
 800056e:	61fb      	str	r3, [r7, #28]
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	69fa      	ldr	r2, [r7, #28]
 8000574:	429a      	cmp	r2, r3
 8000576:	ddca      	ble.n	800050e <LCD_DrawABig+0x1a>
			}
		}
	}
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	20000000 	.word	0x20000000

08000588 <LCD_DrawBBig>:

void LCD_DrawBBig(uint16_t x0, uint16_t y0) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b088      	sub	sp, #32
 800058c:	af00      	add	r7, sp, #0
 800058e:	4603      	mov	r3, r0
 8000590:	460a      	mov	r2, r1
 8000592:	80fb      	strh	r3, [r7, #6]
 8000594:	4613      	mov	r3, r2
 8000596:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000598:	230f      	movs	r3, #15
 800059a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800059c:	2300      	movs	r3, #0
 800059e:	61fb      	str	r3, [r7, #28]
 80005a0:	e04b      	b.n	800063a <LCD_DrawBBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	e041      	b.n	800062c <LCD_DrawBBig+0xa4>
			if ((dx <= 3) || (dy >= 6 && dy <= 9 && dx <= 11) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11)|| (dx >= 12 && (dy >= 3 && dy <= 6)) || ((dx >= 12) && (dy >= 9 && dy <= 12))) {
 80005a8:	69bb      	ldr	r3, [r7, #24]
 80005aa:	2b03      	cmp	r3, #3
 80005ac:	dd26      	ble.n	80005fc <LCD_DrawBBig+0x74>
 80005ae:	69fb      	ldr	r3, [r7, #28]
 80005b0:	2b05      	cmp	r3, #5
 80005b2:	dd05      	ble.n	80005c0 <LCD_DrawBBig+0x38>
 80005b4:	69fb      	ldr	r3, [r7, #28]
 80005b6:	2b09      	cmp	r3, #9
 80005b8:	dc02      	bgt.n	80005c0 <LCD_DrawBBig+0x38>
 80005ba:	69bb      	ldr	r3, [r7, #24]
 80005bc:	2b0b      	cmp	r3, #11
 80005be:	dd1d      	ble.n	80005fc <LCD_DrawBBig+0x74>
 80005c0:	69fb      	ldr	r3, [r7, #28]
 80005c2:	2b03      	cmp	r3, #3
 80005c4:	dc02      	bgt.n	80005cc <LCD_DrawBBig+0x44>
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	2b0b      	cmp	r3, #11
 80005ca:	dd17      	ble.n	80005fc <LCD_DrawBBig+0x74>
 80005cc:	69fb      	ldr	r3, [r7, #28]
 80005ce:	2b0b      	cmp	r3, #11
 80005d0:	dd02      	ble.n	80005d8 <LCD_DrawBBig+0x50>
 80005d2:	69bb      	ldr	r3, [r7, #24]
 80005d4:	2b0b      	cmp	r3, #11
 80005d6:	dd11      	ble.n	80005fc <LCD_DrawBBig+0x74>
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	2b0b      	cmp	r3, #11
 80005dc:	dd05      	ble.n	80005ea <LCD_DrawBBig+0x62>
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	2b02      	cmp	r3, #2
 80005e2:	dd02      	ble.n	80005ea <LCD_DrawBBig+0x62>
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	dd08      	ble.n	80005fc <LCD_DrawBBig+0x74>
 80005ea:	69bb      	ldr	r3, [r7, #24]
 80005ec:	2b0b      	cmp	r3, #11
 80005ee:	dd1a      	ble.n	8000626 <LCD_DrawBBig+0x9e>
 80005f0:	69fb      	ldr	r3, [r7, #28]
 80005f2:	2b08      	cmp	r3, #8
 80005f4:	dd17      	ble.n	8000626 <LCD_DrawBBig+0x9e>
 80005f6:	69fb      	ldr	r3, [r7, #28]
 80005f8:	2b0c      	cmp	r3, #12
 80005fa:	dc14      	bgt.n	8000626 <LCD_DrawBBig+0x9e>
				int y = y0 + dy;
 80005fc:	88bb      	ldrh	r3, [r7, #4]
 80005fe:	69fa      	ldr	r2, [r7, #28]
 8000600:	4413      	add	r3, r2
 8000602:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000604:	88fb      	ldrh	r3, [r7, #6]
 8000606:	69ba      	ldr	r2, [r7, #24]
 8000608:	4413      	add	r3, r2
 800060a:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <LCD_DrawBBig+0xc4>)
 800060e:	7818      	ldrb	r0, [r3, #0]
 8000610:	693a      	ldr	r2, [r7, #16]
 8000612:	4613      	mov	r3, r2
 8000614:	011b      	lsls	r3, r3, #4
 8000616:	1a9b      	subs	r3, r3, r2
 8000618:	011b      	lsls	r3, r3, #4
 800061a:	461a      	mov	r2, r3
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	4413      	add	r3, r2
 8000620:	4619      	mov	r1, r3
 8000622:	f001 fe79 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000626:	69bb      	ldr	r3, [r7, #24]
 8000628:	3301      	adds	r3, #1
 800062a:	61bb      	str	r3, [r7, #24]
 800062c:	7dfb      	ldrb	r3, [r7, #23]
 800062e:	69ba      	ldr	r2, [r7, #24]
 8000630:	429a      	cmp	r2, r3
 8000632:	ddb9      	ble.n	80005a8 <LCD_DrawBBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	7dfb      	ldrb	r3, [r7, #23]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	429a      	cmp	r2, r3
 8000640:	ddaf      	ble.n	80005a2 <LCD_DrawBBig+0x1a>
			}
		}
	}
}
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	3720      	adds	r7, #32
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000000 	.word	0x20000000

08000650 <LCD_DrawCBig>:

void LCD_DrawCBig(uint16_t x0, uint16_t y0) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
 8000656:	4603      	mov	r3, r0
 8000658:	460a      	mov	r2, r1
 800065a:	80fb      	strh	r3, [r7, #6]
 800065c:	4613      	mov	r3, r2
 800065e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000660:	230f      	movs	r3, #15
 8000662:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]
 8000668:	e02a      	b.n	80006c0 <LCD_DrawCBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 800066a:	2300      	movs	r3, #0
 800066c:	61bb      	str	r3, [r7, #24]
 800066e:	e020      	b.n	80006b2 <LCD_DrawCBig+0x62>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12)) {
 8000670:	69bb      	ldr	r3, [r7, #24]
 8000672:	2b03      	cmp	r3, #3
 8000674:	dd05      	ble.n	8000682 <LCD_DrawCBig+0x32>
 8000676:	69fb      	ldr	r3, [r7, #28]
 8000678:	2b03      	cmp	r3, #3
 800067a:	dd02      	ble.n	8000682 <LCD_DrawCBig+0x32>
 800067c:	69fb      	ldr	r3, [r7, #28]
 800067e:	2b0b      	cmp	r3, #11
 8000680:	dd14      	ble.n	80006ac <LCD_DrawCBig+0x5c>
				int y = y0 + dy;
 8000682:	88bb      	ldrh	r3, [r7, #4]
 8000684:	69fa      	ldr	r2, [r7, #28]
 8000686:	4413      	add	r3, r2
 8000688:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800068a:	88fb      	ldrh	r3, [r7, #6]
 800068c:	69ba      	ldr	r2, [r7, #24]
 800068e:	4413      	add	r3, r2
 8000690:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <LCD_DrawCBig+0x84>)
 8000694:	7818      	ldrb	r0, [r3, #0]
 8000696:	693a      	ldr	r2, [r7, #16]
 8000698:	4613      	mov	r3, r2
 800069a:	011b      	lsls	r3, r3, #4
 800069c:	1a9b      	subs	r3, r3, r2
 800069e:	011b      	lsls	r3, r3, #4
 80006a0:	461a      	mov	r2, r3
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4413      	add	r3, r2
 80006a6:	4619      	mov	r1, r3
 80006a8:	f001 fe36 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80006ac:	69bb      	ldr	r3, [r7, #24]
 80006ae:	3301      	adds	r3, #1
 80006b0:	61bb      	str	r3, [r7, #24]
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	69ba      	ldr	r2, [r7, #24]
 80006b6:	429a      	cmp	r2, r3
 80006b8:	ddda      	ble.n	8000670 <LCD_DrawCBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80006ba:	69fb      	ldr	r3, [r7, #28]
 80006bc:	3301      	adds	r3, #1
 80006be:	61fb      	str	r3, [r7, #28]
 80006c0:	7dfb      	ldrb	r3, [r7, #23]
 80006c2:	69fa      	ldr	r2, [r7, #28]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	ddd0      	ble.n	800066a <LCD_DrawCBig+0x1a>
			}
		}
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	3720      	adds	r7, #32
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000000 	.word	0x20000000

080006d8 <LCD_DrawDBig>:

void LCD_DrawDBig(uint16_t x0, uint16_t y0) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b088      	sub	sp, #32
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	460a      	mov	r2, r1
 80006e2:	80fb      	strh	r3, [r7, #6]
 80006e4:	4613      	mov	r3, r2
 80006e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80006e8:	230f      	movs	r3, #15
 80006ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80006ec:	2300      	movs	r3, #0
 80006ee:	61fb      	str	r3, [r7, #28]
 80006f0:	e039      	b.n	8000766 <LCD_DrawDBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80006f2:	2300      	movs	r3, #0
 80006f4:	61bb      	str	r3, [r7, #24]
 80006f6:	e02f      	b.n	8000758 <LCD_DrawDBig+0x80>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || (dy >= 12 && dx <= 11) || (dx >= 12 && (dy >= 4 && dy <= 11))) {
 80006f8:	69bb      	ldr	r3, [r7, #24]
 80006fa:	2b03      	cmp	r3, #3
 80006fc:	dd14      	ble.n	8000728 <LCD_DrawDBig+0x50>
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	2b03      	cmp	r3, #3
 8000702:	dc02      	bgt.n	800070a <LCD_DrawDBig+0x32>
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	2b0b      	cmp	r3, #11
 8000708:	dd0e      	ble.n	8000728 <LCD_DrawDBig+0x50>
 800070a:	69fb      	ldr	r3, [r7, #28]
 800070c:	2b0b      	cmp	r3, #11
 800070e:	dd02      	ble.n	8000716 <LCD_DrawDBig+0x3e>
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	2b0b      	cmp	r3, #11
 8000714:	dd08      	ble.n	8000728 <LCD_DrawDBig+0x50>
 8000716:	69bb      	ldr	r3, [r7, #24]
 8000718:	2b0b      	cmp	r3, #11
 800071a:	dd1a      	ble.n	8000752 <LCD_DrawDBig+0x7a>
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	2b03      	cmp	r3, #3
 8000720:	dd17      	ble.n	8000752 <LCD_DrawDBig+0x7a>
 8000722:	69fb      	ldr	r3, [r7, #28]
 8000724:	2b0b      	cmp	r3, #11
 8000726:	dc14      	bgt.n	8000752 <LCD_DrawDBig+0x7a>
				int y = y0 + dy;
 8000728:	88bb      	ldrh	r3, [r7, #4]
 800072a:	69fa      	ldr	r2, [r7, #28]
 800072c:	4413      	add	r3, r2
 800072e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000730:	88fb      	ldrh	r3, [r7, #6]
 8000732:	69ba      	ldr	r2, [r7, #24]
 8000734:	4413      	add	r3, r2
 8000736:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000738:	4b0f      	ldr	r3, [pc, #60]	; (8000778 <LCD_DrawDBig+0xa0>)
 800073a:	7818      	ldrb	r0, [r3, #0]
 800073c:	693a      	ldr	r2, [r7, #16]
 800073e:	4613      	mov	r3, r2
 8000740:	011b      	lsls	r3, r3, #4
 8000742:	1a9b      	subs	r3, r3, r2
 8000744:	011b      	lsls	r3, r3, #4
 8000746:	461a      	mov	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4413      	add	r3, r2
 800074c:	4619      	mov	r1, r3
 800074e:	f001 fde3 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000752:	69bb      	ldr	r3, [r7, #24]
 8000754:	3301      	adds	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
 8000758:	7dfb      	ldrb	r3, [r7, #23]
 800075a:	69ba      	ldr	r2, [r7, #24]
 800075c:	429a      	cmp	r2, r3
 800075e:	ddcb      	ble.n	80006f8 <LCD_DrawDBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3301      	adds	r3, #1
 8000764:	61fb      	str	r3, [r7, #28]
 8000766:	7dfb      	ldrb	r3, [r7, #23]
 8000768:	69fa      	ldr	r2, [r7, #28]
 800076a:	429a      	cmp	r2, r3
 800076c:	ddc1      	ble.n	80006f2 <LCD_DrawDBig+0x1a>
			}
		}
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3720      	adds	r7, #32
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	20000000 	.word	0x20000000

0800077c <LCD_DrawEBig>:

void LCD_DrawEBig(uint16_t x0, uint16_t y0) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b088      	sub	sp, #32
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	460a      	mov	r2, r1
 8000786:	80fb      	strh	r3, [r7, #6]
 8000788:	4613      	mov	r3, r2
 800078a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800078c:	230f      	movs	r3, #15
 800078e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000790:	2300      	movs	r3, #0
 8000792:	61fb      	str	r3, [r7, #28]
 8000794:	e036      	b.n	8000804 <LCD_DrawEBig+0x88>
		for(int dx = 0; dx <=width; dx++){
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e02c      	b.n	80007f6 <LCD_DrawEBig+0x7a>
			if ((dx < 4) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy == 9|| dy >= 12)) {
 800079c:	69bb      	ldr	r3, [r7, #24]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	dd11      	ble.n	80007c6 <LCD_DrawEBig+0x4a>
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	2b03      	cmp	r3, #3
 80007a6:	dd0e      	ble.n	80007c6 <LCD_DrawEBig+0x4a>
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	2b06      	cmp	r3, #6
 80007ac:	d00b      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007ae:	69fb      	ldr	r3, [r7, #28]
 80007b0:	2b07      	cmp	r3, #7
 80007b2:	d008      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	2b08      	cmp	r3, #8
 80007b8:	d005      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	d002      	beq.n	80007c6 <LCD_DrawEBig+0x4a>
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	2b0b      	cmp	r3, #11
 80007c4:	dd14      	ble.n	80007f0 <LCD_DrawEBig+0x74>
				int y = y0 + dy;
 80007c6:	88bb      	ldrh	r3, [r7, #4]
 80007c8:	69fa      	ldr	r2, [r7, #28]
 80007ca:	4413      	add	r3, r2
 80007cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80007ce:	88fb      	ldrh	r3, [r7, #6]
 80007d0:	69ba      	ldr	r2, [r7, #24]
 80007d2:	4413      	add	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80007d6:	4b10      	ldr	r3, [pc, #64]	; (8000818 <LCD_DrawEBig+0x9c>)
 80007d8:	7818      	ldrb	r0, [r3, #0]
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4613      	mov	r3, r2
 80007de:	011b      	lsls	r3, r3, #4
 80007e0:	1a9b      	subs	r3, r3, r2
 80007e2:	011b      	lsls	r3, r3, #4
 80007e4:	461a      	mov	r2, r3
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	4619      	mov	r1, r3
 80007ec:	f001 fd94 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	3301      	adds	r3, #1
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	7dfb      	ldrb	r3, [r7, #23]
 80007f8:	69ba      	ldr	r2, [r7, #24]
 80007fa:	429a      	cmp	r2, r3
 80007fc:	ddce      	ble.n	800079c <LCD_DrawEBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	3301      	adds	r3, #1
 8000802:	61fb      	str	r3, [r7, #28]
 8000804:	7dfb      	ldrb	r3, [r7, #23]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	429a      	cmp	r2, r3
 800080a:	ddc4      	ble.n	8000796 <LCD_DrawEBig+0x1a>
			}
		}
	}
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3720      	adds	r7, #32
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000

0800081c <LCD_DrawFBig>:

void LCD_DrawFBig(uint16_t x0, uint16_t y0) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b088      	sub	sp, #32
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	460a      	mov	r2, r1
 8000826:	80fb      	strh	r3, [r7, #6]
 8000828:	4613      	mov	r3, r2
 800082a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800082c:	230f      	movs	r3, #15
 800082e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000830:	2300      	movs	r3, #0
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	e030      	b.n	8000898 <LCD_DrawFBig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	e026      	b.n	800088a <LCD_DrawFBig+0x6e>
			if ((dx <= 3) || (dy <= 3) || (dy >= 6 && dy <= 9 && dx <= 11)) {
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	2b03      	cmp	r3, #3
 8000840:	dd0b      	ble.n	800085a <LCD_DrawFBig+0x3e>
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	2b03      	cmp	r3, #3
 8000846:	dd08      	ble.n	800085a <LCD_DrawFBig+0x3e>
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	2b05      	cmp	r3, #5
 800084c:	dd1a      	ble.n	8000884 <LCD_DrawFBig+0x68>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	2b09      	cmp	r3, #9
 8000852:	dc17      	bgt.n	8000884 <LCD_DrawFBig+0x68>
 8000854:	69bb      	ldr	r3, [r7, #24]
 8000856:	2b0b      	cmp	r3, #11
 8000858:	dc14      	bgt.n	8000884 <LCD_DrawFBig+0x68>
				int y = y0 + dy;
 800085a:	88bb      	ldrh	r3, [r7, #4]
 800085c:	69fa      	ldr	r2, [r7, #28]
 800085e:	4413      	add	r3, r2
 8000860:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000862:	88fb      	ldrh	r3, [r7, #6]
 8000864:	69ba      	ldr	r2, [r7, #24]
 8000866:	4413      	add	r3, r2
 8000868:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800086a:	4b10      	ldr	r3, [pc, #64]	; (80008ac <LCD_DrawFBig+0x90>)
 800086c:	7818      	ldrb	r0, [r3, #0]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	4613      	mov	r3, r2
 8000872:	011b      	lsls	r3, r3, #4
 8000874:	1a9b      	subs	r3, r3, r2
 8000876:	011b      	lsls	r3, r3, #4
 8000878:	461a      	mov	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4413      	add	r3, r2
 800087e:	4619      	mov	r1, r3
 8000880:	f001 fd4a 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000884:	69bb      	ldr	r3, [r7, #24]
 8000886:	3301      	adds	r3, #1
 8000888:	61bb      	str	r3, [r7, #24]
 800088a:	7dfb      	ldrb	r3, [r7, #23]
 800088c:	69ba      	ldr	r2, [r7, #24]
 800088e:	429a      	cmp	r2, r3
 8000890:	ddd4      	ble.n	800083c <LCD_DrawFBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3301      	adds	r3, #1
 8000896:	61fb      	str	r3, [r7, #28]
 8000898:	7dfb      	ldrb	r3, [r7, #23]
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	429a      	cmp	r2, r3
 800089e:	ddca      	ble.n	8000836 <LCD_DrawFBig+0x1a>
			}
		}
	}
}
 80008a0:	bf00      	nop
 80008a2:	bf00      	nop
 80008a4:	3720      	adds	r7, #32
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000000 	.word	0x20000000

080008b0 <LCD_DrawGBig>:

void LCD_DrawGBig(uint16_t x0, uint16_t y0) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b088      	sub	sp, #32
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	80fb      	strh	r3, [r7, #6]
 80008bc:	4613      	mov	r3, r2
 80008be:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80008c0:	230f      	movs	r3, #15
 80008c2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80008c4:	2300      	movs	r3, #0
 80008c6:	61fb      	str	r3, [r7, #28]
 80008c8:	e039      	b.n	800093e <LCD_DrawGBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80008ca:	2300      	movs	r3, #0
 80008cc:	61bb      	str	r3, [r7, #24]
 80008ce:	e02f      	b.n	8000930 <LCD_DrawGBig+0x80>
			if ((dx <= 3) || (dy <= 3) || (dy >= 12) || (dy >= 6 && dx >= 12) || (dy >= 6 && dy <= 9 && dx >= 5)) {
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	2b03      	cmp	r3, #3
 80008d4:	dd14      	ble.n	8000900 <LCD_DrawGBig+0x50>
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	2b03      	cmp	r3, #3
 80008da:	dd11      	ble.n	8000900 <LCD_DrawGBig+0x50>
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	2b0b      	cmp	r3, #11
 80008e0:	dc0e      	bgt.n	8000900 <LCD_DrawGBig+0x50>
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	2b05      	cmp	r3, #5
 80008e6:	dd02      	ble.n	80008ee <LCD_DrawGBig+0x3e>
 80008e8:	69bb      	ldr	r3, [r7, #24]
 80008ea:	2b0b      	cmp	r3, #11
 80008ec:	dc08      	bgt.n	8000900 <LCD_DrawGBig+0x50>
 80008ee:	69fb      	ldr	r3, [r7, #28]
 80008f0:	2b05      	cmp	r3, #5
 80008f2:	dd1a      	ble.n	800092a <LCD_DrawGBig+0x7a>
 80008f4:	69fb      	ldr	r3, [r7, #28]
 80008f6:	2b09      	cmp	r3, #9
 80008f8:	dc17      	bgt.n	800092a <LCD_DrawGBig+0x7a>
 80008fa:	69bb      	ldr	r3, [r7, #24]
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	dd14      	ble.n	800092a <LCD_DrawGBig+0x7a>
				int y = y0 + dy;
 8000900:	88bb      	ldrh	r3, [r7, #4]
 8000902:	69fa      	ldr	r2, [r7, #28]
 8000904:	4413      	add	r3, r2
 8000906:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	69ba      	ldr	r2, [r7, #24]
 800090c:	4413      	add	r3, r2
 800090e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000910:	4b0f      	ldr	r3, [pc, #60]	; (8000950 <LCD_DrawGBig+0xa0>)
 8000912:	7818      	ldrb	r0, [r3, #0]
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4613      	mov	r3, r2
 8000918:	011b      	lsls	r3, r3, #4
 800091a:	1a9b      	subs	r3, r3, r2
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	461a      	mov	r2, r3
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	4413      	add	r3, r2
 8000924:	4619      	mov	r1, r3
 8000926:	f001 fcf7 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800092a:	69bb      	ldr	r3, [r7, #24]
 800092c:	3301      	adds	r3, #1
 800092e:	61bb      	str	r3, [r7, #24]
 8000930:	7dfb      	ldrb	r3, [r7, #23]
 8000932:	69ba      	ldr	r2, [r7, #24]
 8000934:	429a      	cmp	r2, r3
 8000936:	ddcb      	ble.n	80008d0 <LCD_DrawGBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	7dfb      	ldrb	r3, [r7, #23]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	429a      	cmp	r2, r3
 8000944:	ddc1      	ble.n	80008ca <LCD_DrawGBig+0x1a>
			}
		}
	}
}
 8000946:	bf00      	nop
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000000 	.word	0x20000000

08000954 <LCD_DrawHBig>:

void LCD_DrawHBig(uint16_t x0, uint16_t y0) {
 8000954:	b580      	push	{r7, lr}
 8000956:	b088      	sub	sp, #32
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	460a      	mov	r2, r1
 800095e:	80fb      	strh	r3, [r7, #6]
 8000960:	4613      	mov	r3, r2
 8000962:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000964:	230f      	movs	r3, #15
 8000966:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
 800096c:	e033      	b.n	80009d6 <LCD_DrawHBig+0x82>
		for(int dx = 0; dx <=width; dx++){
 800096e:	2300      	movs	r3, #0
 8000970:	61bb      	str	r3, [r7, #24]
 8000972:	e029      	b.n	80009c8 <LCD_DrawHBig+0x74>
			if ((dx <= 3 || dx >= 12) || (dy == 6 || dy == 7 || dy == 8 || dy == 9)) {
 8000974:	69bb      	ldr	r3, [r7, #24]
 8000976:	2b03      	cmp	r3, #3
 8000978:	dd0e      	ble.n	8000998 <LCD_DrawHBig+0x44>
 800097a:	69bb      	ldr	r3, [r7, #24]
 800097c:	2b0b      	cmp	r3, #11
 800097e:	dc0b      	bgt.n	8000998 <LCD_DrawHBig+0x44>
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	2b06      	cmp	r3, #6
 8000984:	d008      	beq.n	8000998 <LCD_DrawHBig+0x44>
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d005      	beq.n	8000998 <LCD_DrawHBig+0x44>
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	2b08      	cmp	r3, #8
 8000990:	d002      	beq.n	8000998 <LCD_DrawHBig+0x44>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	2b09      	cmp	r3, #9
 8000996:	d114      	bne.n	80009c2 <LCD_DrawHBig+0x6e>
				int y = y0 + dy;
 8000998:	88bb      	ldrh	r3, [r7, #4]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	4413      	add	r3, r2
 800099e:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80009a0:	88fb      	ldrh	r3, [r7, #6]
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4413      	add	r3, r2
 80009a6:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80009a8:	4b0f      	ldr	r3, [pc, #60]	; (80009e8 <LCD_DrawHBig+0x94>)
 80009aa:	7818      	ldrb	r0, [r3, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	4613      	mov	r3, r2
 80009b0:	011b      	lsls	r3, r3, #4
 80009b2:	1a9b      	subs	r3, r3, r2
 80009b4:	011b      	lsls	r3, r3, #4
 80009b6:	461a      	mov	r2, r3
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	4413      	add	r3, r2
 80009bc:	4619      	mov	r1, r3
 80009be:	f001 fcab 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80009c2:	69bb      	ldr	r3, [r7, #24]
 80009c4:	3301      	adds	r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	7dfb      	ldrb	r3, [r7, #23]
 80009ca:	69ba      	ldr	r2, [r7, #24]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	ddd1      	ble.n	8000974 <LCD_DrawHBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	3301      	adds	r3, #1
 80009d4:	61fb      	str	r3, [r7, #28]
 80009d6:	7dfb      	ldrb	r3, [r7, #23]
 80009d8:	69fa      	ldr	r2, [r7, #28]
 80009da:	429a      	cmp	r2, r3
 80009dc:	ddc7      	ble.n	800096e <LCD_DrawHBig+0x1a>
			}
		}
	}
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000000 	.word	0x20000000

080009ec <LCD_DrawIBig>:

void LCD_DrawIBig(uint16_t x0, uint16_t y0) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b088      	sub	sp, #32
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	4603      	mov	r3, r0
 80009f4:	460a      	mov	r2, r1
 80009f6:	80fb      	strh	r3, [r7, #6]
 80009f8:	4613      	mov	r3, r2
 80009fa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80009fc:	230f      	movs	r3, #15
 80009fe:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
 8000a04:	e02d      	b.n	8000a62 <LCD_DrawIBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000a06:	2300      	movs	r3, #0
 8000a08:	61bb      	str	r3, [r7, #24]
 8000a0a:	e023      	b.n	8000a54 <LCD_DrawIBig+0x68>
			if ((dy <= 3) || (dy >= 12) || (dx >= 6 && dx <= 9)) {
 8000a0c:	69fb      	ldr	r3, [r7, #28]
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	dd08      	ble.n	8000a24 <LCD_DrawIBig+0x38>
 8000a12:	69fb      	ldr	r3, [r7, #28]
 8000a14:	2b0b      	cmp	r3, #11
 8000a16:	dc05      	bgt.n	8000a24 <LCD_DrawIBig+0x38>
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	dd17      	ble.n	8000a4e <LCD_DrawIBig+0x62>
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	2b09      	cmp	r3, #9
 8000a22:	dc14      	bgt.n	8000a4e <LCD_DrawIBig+0x62>
				int y = y0 + dy;
 8000a24:	88bb      	ldrh	r3, [r7, #4]
 8000a26:	69fa      	ldr	r2, [r7, #28]
 8000a28:	4413      	add	r3, r2
 8000a2a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000a2c:	88fb      	ldrh	r3, [r7, #6]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	4413      	add	r3, r2
 8000a32:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <LCD_DrawIBig+0x88>)
 8000a36:	7818      	ldrb	r0, [r3, #0]
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	011b      	lsls	r3, r3, #4
 8000a3e:	1a9b      	subs	r3, r3, r2
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	461a      	mov	r2, r3
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	4413      	add	r3, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	f001 fc65 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61bb      	str	r3, [r7, #24]
 8000a54:	7dfb      	ldrb	r3, [r7, #23]
 8000a56:	69ba      	ldr	r2, [r7, #24]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	ddd7      	ble.n	8000a0c <LCD_DrawIBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61fb      	str	r3, [r7, #28]
 8000a62:	7dfb      	ldrb	r3, [r7, #23]
 8000a64:	69fa      	ldr	r2, [r7, #28]
 8000a66:	429a      	cmp	r2, r3
 8000a68:	ddcd      	ble.n	8000a06 <LCD_DrawIBig+0x1a>
			}
		}
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	bf00      	nop
 8000a6e:	3720      	adds	r7, #32
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000000 	.word	0x20000000

08000a78 <LCD_DrawJBig>:

void LCD_DrawJBig(uint16_t x0, uint16_t y0) {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b088      	sub	sp, #32
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	4603      	mov	r3, r0
 8000a80:	460a      	mov	r2, r1
 8000a82:	80fb      	strh	r3, [r7, #6]
 8000a84:	4613      	mov	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000a88:	230f      	movs	r3, #15
 8000a8a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	61fb      	str	r3, [r7, #28]
 8000a90:	e030      	b.n	8000af4 <LCD_DrawJBig+0x7c>
		for(int dx = 0; dx <=width; dx++){
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	e026      	b.n	8000ae6 <LCD_DrawJBig+0x6e>
			if ((dy <= 3) || (dx >= 6 && dx <= 9) || (dx <= 9 && dy >= 12)) {
 8000a98:	69fb      	ldr	r3, [r7, #28]
 8000a9a:	2b03      	cmp	r3, #3
 8000a9c:	dd0b      	ble.n	8000ab6 <LCD_DrawJBig+0x3e>
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	2b05      	cmp	r3, #5
 8000aa2:	dd02      	ble.n	8000aaa <LCD_DrawJBig+0x32>
 8000aa4:	69bb      	ldr	r3, [r7, #24]
 8000aa6:	2b09      	cmp	r3, #9
 8000aa8:	dd05      	ble.n	8000ab6 <LCD_DrawJBig+0x3e>
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	2b09      	cmp	r3, #9
 8000aae:	dc17      	bgt.n	8000ae0 <LCD_DrawJBig+0x68>
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0b      	cmp	r3, #11
 8000ab4:	dd14      	ble.n	8000ae0 <LCD_DrawJBig+0x68>
				int y = y0 + dy;
 8000ab6:	88bb      	ldrh	r3, [r7, #4]
 8000ab8:	69fa      	ldr	r2, [r7, #28]
 8000aba:	4413      	add	r3, r2
 8000abc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000abe:	88fb      	ldrh	r3, [r7, #6]
 8000ac0:	69ba      	ldr	r2, [r7, #24]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ac6:	4b10      	ldr	r3, [pc, #64]	; (8000b08 <LCD_DrawJBig+0x90>)
 8000ac8:	7818      	ldrb	r0, [r3, #0]
 8000aca:	693a      	ldr	r2, [r7, #16]
 8000acc:	4613      	mov	r3, r2
 8000ace:	011b      	lsls	r3, r3, #4
 8000ad0:	1a9b      	subs	r3, r3, r2
 8000ad2:	011b      	lsls	r3, r3, #4
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4413      	add	r3, r2
 8000ada:	4619      	mov	r1, r3
 8000adc:	f001 fc1c 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	7dfb      	ldrb	r3, [r7, #23]
 8000ae8:	69ba      	ldr	r2, [r7, #24]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	ddd4      	ble.n	8000a98 <LCD_DrawJBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3301      	adds	r3, #1
 8000af2:	61fb      	str	r3, [r7, #28]
 8000af4:	7dfb      	ldrb	r3, [r7, #23]
 8000af6:	69fa      	ldr	r2, [r7, #28]
 8000af8:	429a      	cmp	r2, r3
 8000afa:	ddca      	ble.n	8000a92 <LCD_DrawJBig+0x1a>
			}
		}
	}
}
 8000afc:	bf00      	nop
 8000afe:	bf00      	nop
 8000b00:	3720      	adds	r7, #32
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000000 	.word	0x20000000

08000b0c <LCD_DrawKBig>:

void LCD_DrawKBig(uint16_t x0, uint16_t y0) {
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b088      	sub	sp, #32
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	460a      	mov	r2, r1
 8000b16:	80fb      	strh	r3, [r7, #6]
 8000b18:	4613      	mov	r3, r2
 8000b1a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
 8000b24:	e054      	b.n	8000bd0 <LCD_DrawKBig+0xc4>
		for(int dx = 0; dx <=width; dx++){
 8000b26:	2300      	movs	r3, #0
 8000b28:	61bb      	str	r3, [r7, #24]
 8000b2a:	e04a      	b.n	8000bc2 <LCD_DrawKBig+0xb6>
			if ((dx <= 3) || (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 11 && dy <= 3) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	2b03      	cmp	r3, #3
 8000b30:	dd2f      	ble.n	8000b92 <LCD_DrawKBig+0x86>
 8000b32:	69bb      	ldr	r3, [r7, #24]
 8000b34:	2b0b      	cmp	r3, #11
 8000b36:	dd02      	ble.n	8000b3e <LCD_DrawKBig+0x32>
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	2b0b      	cmp	r3, #11
 8000b3c:	dc29      	bgt.n	8000b92 <LCD_DrawKBig+0x86>
 8000b3e:	69bb      	ldr	r3, [r7, #24]
 8000b40:	2b07      	cmp	r3, #7
 8000b42:	dd08      	ble.n	8000b56 <LCD_DrawKBig+0x4a>
 8000b44:	69bb      	ldr	r3, [r7, #24]
 8000b46:	2b0b      	cmp	r3, #11
 8000b48:	dc05      	bgt.n	8000b56 <LCD_DrawKBig+0x4a>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	dd02      	ble.n	8000b56 <LCD_DrawKBig+0x4a>
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	2b0b      	cmp	r3, #11
 8000b54:	dd1d      	ble.n	8000b92 <LCD_DrawKBig+0x86>
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	2b03      	cmp	r3, #3
 8000b5a:	dd08      	ble.n	8000b6e <LCD_DrawKBig+0x62>
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	dc05      	bgt.n	8000b6e <LCD_DrawKBig+0x62>
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	2b03      	cmp	r3, #3
 8000b66:	dd02      	ble.n	8000b6e <LCD_DrawKBig+0x62>
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	dd11      	ble.n	8000b92 <LCD_DrawKBig+0x86>
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	2b0a      	cmp	r3, #10
 8000b72:	dd02      	ble.n	8000b7a <LCD_DrawKBig+0x6e>
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	2b03      	cmp	r3, #3
 8000b78:	dd0b      	ble.n	8000b92 <LCD_DrawKBig+0x86>
 8000b7a:	69bb      	ldr	r3, [r7, #24]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	dd1d      	ble.n	8000bbc <LCD_DrawKBig+0xb0>
 8000b80:	69bb      	ldr	r3, [r7, #24]
 8000b82:	2b0b      	cmp	r3, #11
 8000b84:	dc1a      	bgt.n	8000bbc <LCD_DrawKBig+0xb0>
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	dd17      	ble.n	8000bbc <LCD_DrawKBig+0xb0>
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b07      	cmp	r3, #7
 8000b90:	dc14      	bgt.n	8000bbc <LCD_DrawKBig+0xb0>
				int y = y0 + dy;
 8000b92:	88bb      	ldrh	r3, [r7, #4]
 8000b94:	69fa      	ldr	r2, [r7, #28]
 8000b96:	4413      	add	r3, r2
 8000b98:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000b9a:	88fb      	ldrh	r3, [r7, #6]
 8000b9c:	69ba      	ldr	r2, [r7, #24]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000ba2:	4b10      	ldr	r3, [pc, #64]	; (8000be4 <LCD_DrawKBig+0xd8>)
 8000ba4:	7818      	ldrb	r0, [r3, #0]
 8000ba6:	693a      	ldr	r2, [r7, #16]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	011b      	lsls	r3, r3, #4
 8000bac:	1a9b      	subs	r3, r3, r2
 8000bae:	011b      	lsls	r3, r3, #4
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f001 fbae 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	61bb      	str	r3, [r7, #24]
 8000bc2:	7dfb      	ldrb	r3, [r7, #23]
 8000bc4:	69ba      	ldr	r2, [r7, #24]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	ddb0      	ble.n	8000b2c <LCD_DrawKBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000bca:	69fb      	ldr	r3, [r7, #28]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	61fb      	str	r3, [r7, #28]
 8000bd0:	7dfb      	ldrb	r3, [r7, #23]
 8000bd2:	69fa      	ldr	r2, [r7, #28]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	dda6      	ble.n	8000b26 <LCD_DrawKBig+0x1a>
			}
		}
	}
}
 8000bd8:	bf00      	nop
 8000bda:	bf00      	nop
 8000bdc:	3720      	adds	r7, #32
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000000 	.word	0x20000000

08000be8 <LCD_DrawLBig>:

void LCD_DrawLBig(uint16_t x0, uint16_t y0) {
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b088      	sub	sp, #32
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	460a      	mov	r2, r1
 8000bf2:	80fb      	strh	r3, [r7, #6]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
 8000c00:	e027      	b.n	8000c52 <LCD_DrawLBig+0x6a>
		for(int dx = 0; dx <=width; dx++){
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	e01d      	b.n	8000c44 <LCD_DrawLBig+0x5c>
			if ((dx <= 3) || (dy >= 12)) {
 8000c08:	69bb      	ldr	r3, [r7, #24]
 8000c0a:	2b03      	cmp	r3, #3
 8000c0c:	dd02      	ble.n	8000c14 <LCD_DrawLBig+0x2c>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	2b0b      	cmp	r3, #11
 8000c12:	dd14      	ble.n	8000c3e <LCD_DrawLBig+0x56>
				int y = y0 + dy;
 8000c14:	88bb      	ldrh	r3, [r7, #4]
 8000c16:	69fa      	ldr	r2, [r7, #28]
 8000c18:	4413      	add	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	4413      	add	r3, r2
 8000c22:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000c24:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <LCD_DrawLBig+0x7c>)
 8000c26:	7818      	ldrb	r0, [r3, #0]
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	011b      	lsls	r3, r3, #4
 8000c2e:	1a9b      	subs	r3, r3, r2
 8000c30:	011b      	lsls	r3, r3, #4
 8000c32:	461a      	mov	r2, r3
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	f001 fb6d 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000c3e:	69bb      	ldr	r3, [r7, #24]
 8000c40:	3301      	adds	r3, #1
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	7dfb      	ldrb	r3, [r7, #23]
 8000c46:	69ba      	ldr	r2, [r7, #24]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	dddd      	ble.n	8000c08 <LCD_DrawLBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000c4c:	69fb      	ldr	r3, [r7, #28]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	61fb      	str	r3, [r7, #28]
 8000c52:	7dfb      	ldrb	r3, [r7, #23]
 8000c54:	69fa      	ldr	r2, [r7, #28]
 8000c56:	429a      	cmp	r2, r3
 8000c58:	ddd3      	ble.n	8000c02 <LCD_DrawLBig+0x1a>
			}
		}
	}
}
 8000c5a:	bf00      	nop
 8000c5c:	bf00      	nop
 8000c5e:	3720      	adds	r7, #32
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000000 	.word	0x20000000

08000c68 <LCD_DrawMBig>:

void LCD_DrawMBig(uint16_t x0, uint16_t y0) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b088      	sub	sp, #32
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	80fb      	strh	r3, [r7, #6]
 8000c74:	4613      	mov	r3, r2
 8000c76:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000c78:	230f      	movs	r3, #15
 8000c7a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	61fb      	str	r3, [r7, #28]
 8000c80:	e04b      	b.n	8000d1a <LCD_DrawMBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000c82:	2300      	movs	r3, #0
 8000c84:	61bb      	str	r3, [r7, #24]
 8000c86:	e041      	b.n	8000d0c <LCD_DrawMBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 3 && dy <= 6))) {
 8000c88:	69bb      	ldr	r3, [r7, #24]
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	dd26      	ble.n	8000cdc <LCD_DrawMBig+0x74>
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	2b0b      	cmp	r3, #11
 8000c92:	dc23      	bgt.n	8000cdc <LCD_DrawMBig+0x74>
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	2b05      	cmp	r3, #5
 8000c98:	dd08      	ble.n	8000cac <LCD_DrawMBig+0x44>
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	2b09      	cmp	r3, #9
 8000c9e:	dc05      	bgt.n	8000cac <LCD_DrawMBig+0x44>
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	2b05      	cmp	r3, #5
 8000ca4:	dd02      	ble.n	8000cac <LCD_DrawMBig+0x44>
 8000ca6:	69fb      	ldr	r3, [r7, #28]
 8000ca8:	2b09      	cmp	r3, #9
 8000caa:	dd17      	ble.n	8000cdc <LCD_DrawMBig+0x74>
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	dd08      	ble.n	8000cc4 <LCD_DrawMBig+0x5c>
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	dc05      	bgt.n	8000cc4 <LCD_DrawMBig+0x5c>
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	dd02      	ble.n	8000cc4 <LCD_DrawMBig+0x5c>
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2b06      	cmp	r3, #6
 8000cc2:	dd0b      	ble.n	8000cdc <LCD_DrawMBig+0x74>
 8000cc4:	69bb      	ldr	r3, [r7, #24]
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	dd1d      	ble.n	8000d06 <LCD_DrawMBig+0x9e>
 8000cca:	69bb      	ldr	r3, [r7, #24]
 8000ccc:	2b0c      	cmp	r3, #12
 8000cce:	dc1a      	bgt.n	8000d06 <LCD_DrawMBig+0x9e>
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	dd17      	ble.n	8000d06 <LCD_DrawMBig+0x9e>
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	2b06      	cmp	r3, #6
 8000cda:	dc14      	bgt.n	8000d06 <LCD_DrawMBig+0x9e>
				int y = y0 + dy;
 8000cdc:	88bb      	ldrh	r3, [r7, #4]
 8000cde:	69fa      	ldr	r2, [r7, #28]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ce4:	88fb      	ldrh	r3, [r7, #6]
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4413      	add	r3, r2
 8000cea:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <LCD_DrawMBig+0xc4>)
 8000cee:	7818      	ldrb	r0, [r3, #0]
 8000cf0:	693a      	ldr	r2, [r7, #16]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	011b      	lsls	r3, r3, #4
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	011b      	lsls	r3, r3, #4
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4413      	add	r3, r2
 8000d00:	4619      	mov	r1, r3
 8000d02:	f001 fb09 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	7dfb      	ldrb	r3, [r7, #23]
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	ddb9      	ble.n	8000c88 <LCD_DrawMBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	3301      	adds	r3, #1
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	7dfb      	ldrb	r3, [r7, #23]
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	ddaf      	ble.n	8000c82 <LCD_DrawMBig+0x1a>
			}
		}
	}
}
 8000d22:	bf00      	nop
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000000 	.word	0x20000000

08000d30 <LCD_DrawNBig>:

void LCD_DrawNBig(uint16_t x0, uint16_t y0) {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b088      	sub	sp, #32
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	460a      	mov	r2, r1
 8000d3a:	80fb      	strh	r3, [r7, #6]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000d40:	230f      	movs	r3, #15
 8000d42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000d44:	2300      	movs	r3, #0
 8000d46:	61fb      	str	r3, [r7, #28]
 8000d48:	e04b      	b.n	8000de2 <LCD_DrawNBig+0xb2>
		for(int dx = 0; dx <=width; dx++){
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
 8000d4e:	e041      	b.n	8000dd4 <LCD_DrawNBig+0xa4>
			if ((dx <= 3) || (dx >= 12) || ((dx >= 6 && dx <= 9) && (dy >= 6 && dy <= 9)) || ((dx >= 3 && dx <= 6) && (dy >= 3 && dy <= 6)) || ((dx >= 9 && dx <= 12) && (dy >= 9 && dy <= 12))) {
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	2b03      	cmp	r3, #3
 8000d54:	dd26      	ble.n	8000da4 <LCD_DrawNBig+0x74>
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	2b0b      	cmp	r3, #11
 8000d5a:	dc23      	bgt.n	8000da4 <LCD_DrawNBig+0x74>
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	2b05      	cmp	r3, #5
 8000d60:	dd08      	ble.n	8000d74 <LCD_DrawNBig+0x44>
 8000d62:	69bb      	ldr	r3, [r7, #24]
 8000d64:	2b09      	cmp	r3, #9
 8000d66:	dc05      	bgt.n	8000d74 <LCD_DrawNBig+0x44>
 8000d68:	69fb      	ldr	r3, [r7, #28]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	dd02      	ble.n	8000d74 <LCD_DrawNBig+0x44>
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	2b09      	cmp	r3, #9
 8000d72:	dd17      	ble.n	8000da4 <LCD_DrawNBig+0x74>
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	dd08      	ble.n	8000d8c <LCD_DrawNBig+0x5c>
 8000d7a:	69bb      	ldr	r3, [r7, #24]
 8000d7c:	2b06      	cmp	r3, #6
 8000d7e:	dc05      	bgt.n	8000d8c <LCD_DrawNBig+0x5c>
 8000d80:	69fb      	ldr	r3, [r7, #28]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	dd02      	ble.n	8000d8c <LCD_DrawNBig+0x5c>
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	dd0b      	ble.n	8000da4 <LCD_DrawNBig+0x74>
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2b08      	cmp	r3, #8
 8000d90:	dd1d      	ble.n	8000dce <LCD_DrawNBig+0x9e>
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2b0c      	cmp	r3, #12
 8000d96:	dc1a      	bgt.n	8000dce <LCD_DrawNBig+0x9e>
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	2b08      	cmp	r3, #8
 8000d9c:	dd17      	ble.n	8000dce <LCD_DrawNBig+0x9e>
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	2b0c      	cmp	r3, #12
 8000da2:	dc14      	bgt.n	8000dce <LCD_DrawNBig+0x9e>
				int y = y0 + dy;
 8000da4:	88bb      	ldrh	r3, [r7, #4]
 8000da6:	69fa      	ldr	r2, [r7, #28]
 8000da8:	4413      	add	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000dac:	88fb      	ldrh	r3, [r7, #6]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4413      	add	r3, r2
 8000db2:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <LCD_DrawNBig+0xc4>)
 8000db6:	7818      	ldrb	r0, [r3, #0]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	011b      	lsls	r3, r3, #4
 8000dbe:	1a9b      	subs	r3, r3, r2
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	4619      	mov	r1, r3
 8000dca:	f001 faa5 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000dce:	69bb      	ldr	r3, [r7, #24]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
 8000dd4:	7dfb      	ldrb	r3, [r7, #23]
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	ddb9      	ble.n	8000d50 <LCD_DrawNBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	3301      	adds	r3, #1
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	7dfb      	ldrb	r3, [r7, #23]
 8000de4:	69fa      	ldr	r2, [r7, #28]
 8000de6:	429a      	cmp	r2, r3
 8000de8:	ddaf      	ble.n	8000d4a <LCD_DrawNBig+0x1a>
			}
		}
	}
}
 8000dea:	bf00      	nop
 8000dec:	bf00      	nop
 8000dee:	3720      	adds	r7, #32
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	20000000 	.word	0x20000000

08000df8 <LCD_DrawOBig>:

void LCD_DrawOBig(uint16_t x0, uint16_t y0) {
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	4603      	mov	r3, r0
 8000e00:	460a      	mov	r2, r1
 8000e02:	80fb      	strh	r3, [r7, #6]
 8000e04:	4613      	mov	r3, r2
 8000e06:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e08:	230f      	movs	r3, #15
 8000e0a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]
 8000e10:	e02d      	b.n	8000e6e <LCD_DrawOBig+0x76>
		for(int dx = 0; dx <=width; dx++){
 8000e12:	2300      	movs	r3, #0
 8000e14:	61bb      	str	r3, [r7, #24]
 8000e16:	e023      	b.n	8000e60 <LCD_DrawOBig+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	dd08      	ble.n	8000e30 <LCD_DrawOBig+0x38>
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b0b      	cmp	r3, #11
 8000e22:	dc05      	bgt.n	8000e30 <LCD_DrawOBig+0x38>
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	2b03      	cmp	r3, #3
 8000e28:	dd02      	ble.n	8000e30 <LCD_DrawOBig+0x38>
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	2b0b      	cmp	r3, #11
 8000e2e:	dd14      	ble.n	8000e5a <LCD_DrawOBig+0x62>
				int y = y0 + dy;
 8000e30:	88bb      	ldrh	r3, [r7, #4]
 8000e32:	69fa      	ldr	r2, [r7, #28]
 8000e34:	4413      	add	r3, r2
 8000e36:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000e38:	88fb      	ldrh	r3, [r7, #6]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000e40:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <LCD_DrawOBig+0x88>)
 8000e42:	7818      	ldrb	r0, [r3, #0]
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4613      	mov	r3, r2
 8000e48:	011b      	lsls	r3, r3, #4
 8000e4a:	1a9b      	subs	r3, r3, r2
 8000e4c:	011b      	lsls	r3, r3, #4
 8000e4e:	461a      	mov	r2, r3
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	4413      	add	r3, r2
 8000e54:	4619      	mov	r1, r3
 8000e56:	f001 fa5f 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000e5a:	69bb      	ldr	r3, [r7, #24]
 8000e5c:	3301      	adds	r3, #1
 8000e5e:	61bb      	str	r3, [r7, #24]
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	69ba      	ldr	r2, [r7, #24]
 8000e64:	429a      	cmp	r2, r3
 8000e66:	ddd7      	ble.n	8000e18 <LCD_DrawOBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	61fb      	str	r3, [r7, #28]
 8000e6e:	7dfb      	ldrb	r3, [r7, #23]
 8000e70:	69fa      	ldr	r2, [r7, #28]
 8000e72:	429a      	cmp	r2, r3
 8000e74:	ddcd      	ble.n	8000e12 <LCD_DrawOBig+0x1a>
			}
		}
	}
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	3720      	adds	r7, #32
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000

08000e84 <LCD_DrawPBig>:

void LCD_DrawPBig(uint16_t x0, uint16_t y0) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b088      	sub	sp, #32
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	460a      	mov	r2, r1
 8000e8e:	80fb      	strh	r3, [r7, #6]
 8000e90:	4613      	mov	r3, r2
 8000e92:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000e94:	230f      	movs	r3, #15
 8000e96:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
 8000e9c:	e03c      	b.n	8000f18 <LCD_DrawPBig+0x94>
		for(int dx = 0; dx <=width; dx++){
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61bb      	str	r3, [r7, #24]
 8000ea2:	e032      	b.n	8000f0a <LCD_DrawPBig+0x86>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))) {
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	dd17      	ble.n	8000eda <LCD_DrawPBig+0x56>
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	dc02      	bgt.n	8000eb6 <LCD_DrawPBig+0x32>
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b0b      	cmp	r3, #11
 8000eb4:	dd11      	ble.n	8000eda <LCD_DrawPBig+0x56>
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	2b05      	cmp	r3, #5
 8000eba:	dd05      	ble.n	8000ec8 <LCD_DrawPBig+0x44>
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	2b09      	cmp	r3, #9
 8000ec0:	dc02      	bgt.n	8000ec8 <LCD_DrawPBig+0x44>
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b0b      	cmp	r3, #11
 8000ec6:	dd08      	ble.n	8000eda <LCD_DrawPBig+0x56>
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	2b0b      	cmp	r3, #11
 8000ecc:	dd1a      	ble.n	8000f04 <LCD_DrawPBig+0x80>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	dd17      	ble.n	8000f04 <LCD_DrawPBig+0x80>
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	dc14      	bgt.n	8000f04 <LCD_DrawPBig+0x80>
				int y = y0 + dy;
 8000eda:	88bb      	ldrh	r3, [r7, #4]
 8000edc:	69fa      	ldr	r2, [r7, #28]
 8000ede:	4413      	add	r3, r2
 8000ee0:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <LCD_DrawPBig+0xa8>)
 8000eec:	7818      	ldrb	r0, [r3, #0]
 8000eee:	693a      	ldr	r2, [r7, #16]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	1a9b      	subs	r3, r3, r2
 8000ef6:	011b      	lsls	r3, r3, #4
 8000ef8:	461a      	mov	r2, r3
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	4413      	add	r3, r2
 8000efe:	4619      	mov	r1, r3
 8000f00:	f001 fa0a 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	3301      	adds	r3, #1
 8000f08:	61bb      	str	r3, [r7, #24]
 8000f0a:	7dfb      	ldrb	r3, [r7, #23]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	ddc8      	ble.n	8000ea4 <LCD_DrawPBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3301      	adds	r3, #1
 8000f16:	61fb      	str	r3, [r7, #28]
 8000f18:	7dfb      	ldrb	r3, [r7, #23]
 8000f1a:	69fa      	ldr	r2, [r7, #28]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	ddbe      	ble.n	8000e9e <LCD_DrawPBig+0x1a>
			}
		}
	}
}
 8000f20:	bf00      	nop
 8000f22:	bf00      	nop
 8000f24:	3720      	adds	r7, #32
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000000 	.word	0x20000000

08000f30 <LCD_DrawQBig>:

void LCD_DrawQBig(uint16_t x0, uint16_t y0) {
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	80fb      	strh	r3, [r7, #6]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000f40:	230f      	movs	r3, #15
 8000f42:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
 8000f48:	e039      	b.n	8000fbe <LCD_DrawQBig+0x8e>
		for(int dx = 0; dx <=width; dx++){
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61bb      	str	r3, [r7, #24]
 8000f4e:	e02f      	b.n	8000fb0 <LCD_DrawQBig+0x80>
			if ((dx <= 3)||(dx >= 12) || (dy <= 3) || (dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000f50:	69bb      	ldr	r3, [r7, #24]
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	dd14      	ble.n	8000f80 <LCD_DrawQBig+0x50>
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	2b0b      	cmp	r3, #11
 8000f5a:	dc11      	bgt.n	8000f80 <LCD_DrawQBig+0x50>
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	dd0e      	ble.n	8000f80 <LCD_DrawQBig+0x50>
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	2b0b      	cmp	r3, #11
 8000f66:	dc0b      	bgt.n	8000f80 <LCD_DrawQBig+0x50>
 8000f68:	69bb      	ldr	r3, [r7, #24]
 8000f6a:	2b07      	cmp	r3, #7
 8000f6c:	dd1d      	ble.n	8000faa <LCD_DrawQBig+0x7a>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b0b      	cmp	r3, #11
 8000f72:	dc1a      	bgt.n	8000faa <LCD_DrawQBig+0x7a>
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	2b07      	cmp	r3, #7
 8000f78:	dd17      	ble.n	8000faa <LCD_DrawQBig+0x7a>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	2b0b      	cmp	r3, #11
 8000f7e:	dc14      	bgt.n	8000faa <LCD_DrawQBig+0x7a>
				int y = y0 + dy;
 8000f80:	88bb      	ldrh	r3, [r7, #4]
 8000f82:	69fa      	ldr	r2, [r7, #28]
 8000f84:	4413      	add	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8000f88:	88fb      	ldrh	r3, [r7, #6]
 8000f8a:	69ba      	ldr	r2, [r7, #24]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8000f90:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <LCD_DrawQBig+0xa0>)
 8000f92:	7818      	ldrb	r0, [r3, #0]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	4613      	mov	r3, r2
 8000f98:	011b      	lsls	r3, r3, #4
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	011b      	lsls	r3, r3, #4
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	f001 f9b7 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	3301      	adds	r3, #1
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	69ba      	ldr	r2, [r7, #24]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	ddcb      	ble.n	8000f50 <LCD_DrawQBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	3301      	adds	r3, #1
 8000fbc:	61fb      	str	r3, [r7, #28]
 8000fbe:	7dfb      	ldrb	r3, [r7, #23]
 8000fc0:	69fa      	ldr	r2, [r7, #28]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	ddc1      	ble.n	8000f4a <LCD_DrawQBig+0x1a>
			}
		}
	}
}
 8000fc6:	bf00      	nop
 8000fc8:	bf00      	nop
 8000fca:	3720      	adds	r7, #32
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000000 	.word	0x20000000

08000fd4 <LCD_DrawRBig>:

void LCD_DrawRBig(uint16_t x0, uint16_t y0) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b088      	sub	sp, #32
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	80fb      	strh	r3, [r7, #6]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8000fe4:	230f      	movs	r3, #15
 8000fe6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8000fe8:	2300      	movs	r3, #0
 8000fea:	61fb      	str	r3, [r7, #28]
 8000fec:	e04e      	b.n	800108c <LCD_DrawRBig+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
 8000ff2:	e044      	b.n	800107e <LCD_DrawRBig+0xaa>
			if ((dx <= 3) || (dy <= 3 && dx <= 11) || ((dy >= 6 && dy <= 9) && dx <= 11) || (dx >= 12 && (dy >= 3 && dy <= 6))|| (dx >= 12 && dy >= 12) || (dx >= 8 && dx <= 11 && dy >= 8 && dy <= 11)) {
 8000ff4:	69bb      	ldr	r3, [r7, #24]
 8000ff6:	2b03      	cmp	r3, #3
 8000ff8:	dd29      	ble.n	800104e <LCD_DrawRBig+0x7a>
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	2b03      	cmp	r3, #3
 8000ffe:	dc02      	bgt.n	8001006 <LCD_DrawRBig+0x32>
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	2b0b      	cmp	r3, #11
 8001004:	dd23      	ble.n	800104e <LCD_DrawRBig+0x7a>
 8001006:	69fb      	ldr	r3, [r7, #28]
 8001008:	2b05      	cmp	r3, #5
 800100a:	dd05      	ble.n	8001018 <LCD_DrawRBig+0x44>
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	2b09      	cmp	r3, #9
 8001010:	dc02      	bgt.n	8001018 <LCD_DrawRBig+0x44>
 8001012:	69bb      	ldr	r3, [r7, #24]
 8001014:	2b0b      	cmp	r3, #11
 8001016:	dd1a      	ble.n	800104e <LCD_DrawRBig+0x7a>
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	2b0b      	cmp	r3, #11
 800101c:	dd05      	ble.n	800102a <LCD_DrawRBig+0x56>
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	2b02      	cmp	r3, #2
 8001022:	dd02      	ble.n	800102a <LCD_DrawRBig+0x56>
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	2b06      	cmp	r3, #6
 8001028:	dd11      	ble.n	800104e <LCD_DrawRBig+0x7a>
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	2b0b      	cmp	r3, #11
 800102e:	dd02      	ble.n	8001036 <LCD_DrawRBig+0x62>
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	2b0b      	cmp	r3, #11
 8001034:	dc0b      	bgt.n	800104e <LCD_DrawRBig+0x7a>
 8001036:	69bb      	ldr	r3, [r7, #24]
 8001038:	2b07      	cmp	r3, #7
 800103a:	dd1d      	ble.n	8001078 <LCD_DrawRBig+0xa4>
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	2b0b      	cmp	r3, #11
 8001040:	dc1a      	bgt.n	8001078 <LCD_DrawRBig+0xa4>
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	2b07      	cmp	r3, #7
 8001046:	dd17      	ble.n	8001078 <LCD_DrawRBig+0xa4>
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	2b0b      	cmp	r3, #11
 800104c:	dc14      	bgt.n	8001078 <LCD_DrawRBig+0xa4>
				int y = y0 + dy;
 800104e:	88bb      	ldrh	r3, [r7, #4]
 8001050:	69fa      	ldr	r2, [r7, #28]
 8001052:	4413      	add	r3, r2
 8001054:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001056:	88fb      	ldrh	r3, [r7, #6]
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4413      	add	r3, r2
 800105c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800105e:	4b10      	ldr	r3, [pc, #64]	; (80010a0 <LCD_DrawRBig+0xcc>)
 8001060:	7818      	ldrb	r0, [r3, #0]
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4613      	mov	r3, r2
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	1a9b      	subs	r3, r3, r2
 800106a:	011b      	lsls	r3, r3, #4
 800106c:	461a      	mov	r2, r3
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f001 f950 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	3301      	adds	r3, #1
 800107c:	61bb      	str	r3, [r7, #24]
 800107e:	7dfb      	ldrb	r3, [r7, #23]
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	429a      	cmp	r2, r3
 8001084:	ddb6      	ble.n	8000ff4 <LCD_DrawRBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3301      	adds	r3, #1
 800108a:	61fb      	str	r3, [r7, #28]
 800108c:	7dfb      	ldrb	r3, [r7, #23]
 800108e:	69fa      	ldr	r2, [r7, #28]
 8001090:	429a      	cmp	r2, r3
 8001092:	ddac      	ble.n	8000fee <LCD_DrawRBig+0x1a>
			}
		}
	}
}
 8001094:	bf00      	nop
 8001096:	bf00      	nop
 8001098:	3720      	adds	r7, #32
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000000 	.word	0x20000000

080010a4 <LCD_DrawSBig>:

void LCD_DrawSBig(uint16_t x0, uint16_t y0) {
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b088      	sub	sp, #32
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	4603      	mov	r3, r0
 80010ac:	460a      	mov	r2, r1
 80010ae:	80fb      	strh	r3, [r7, #6]
 80010b0:	4613      	mov	r3, r2
 80010b2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80010b4:	230f      	movs	r3, #15
 80010b6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
 80010bc:	e03f      	b.n	800113e <LCD_DrawSBig+0x9a>
		for(int dx = 0; dx <=width; dx++){
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	e035      	b.n	8001130 <LCD_DrawSBig+0x8c>
			if ((dx <= 3 && dy <= 9) || (dx >= 12 && dy >= 6) || (dy <= 3 || dy == 6 || dy == 7 || dy == 8 || dy ==9 || dy >= 12)) {
 80010c4:	69bb      	ldr	r3, [r7, #24]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	dc02      	bgt.n	80010d0 <LCD_DrawSBig+0x2c>
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	2b09      	cmp	r3, #9
 80010ce:	dd17      	ble.n	8001100 <LCD_DrawSBig+0x5c>
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	2b0b      	cmp	r3, #11
 80010d4:	dd02      	ble.n	80010dc <LCD_DrawSBig+0x38>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	2b05      	cmp	r3, #5
 80010da:	dc11      	bgt.n	8001100 <LCD_DrawSBig+0x5c>
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	dd0e      	ble.n	8001100 <LCD_DrawSBig+0x5c>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b06      	cmp	r3, #6
 80010e6:	d00b      	beq.n	8001100 <LCD_DrawSBig+0x5c>
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2b07      	cmp	r3, #7
 80010ec:	d008      	beq.n	8001100 <LCD_DrawSBig+0x5c>
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d005      	beq.n	8001100 <LCD_DrawSBig+0x5c>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b09      	cmp	r3, #9
 80010f8:	d002      	beq.n	8001100 <LCD_DrawSBig+0x5c>
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	2b0b      	cmp	r3, #11
 80010fe:	dd14      	ble.n	800112a <LCD_DrawSBig+0x86>
				int y = y0 + dy;
 8001100:	88bb      	ldrh	r3, [r7, #4]
 8001102:	69fa      	ldr	r2, [r7, #28]
 8001104:	4413      	add	r3, r2
 8001106:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	69ba      	ldr	r2, [r7, #24]
 800110c:	4413      	add	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <LCD_DrawSBig+0xac>)
 8001112:	7818      	ldrb	r0, [r3, #0]
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4613      	mov	r3, r2
 8001118:	011b      	lsls	r3, r3, #4
 800111a:	1a9b      	subs	r3, r3, r2
 800111c:	011b      	lsls	r3, r3, #4
 800111e:	461a      	mov	r2, r3
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	4619      	mov	r1, r3
 8001126:	f001 f8f7 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800112a:	69bb      	ldr	r3, [r7, #24]
 800112c:	3301      	adds	r3, #1
 800112e:	61bb      	str	r3, [r7, #24]
 8001130:	7dfb      	ldrb	r3, [r7, #23]
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	429a      	cmp	r2, r3
 8001136:	ddc5      	ble.n	80010c4 <LCD_DrawSBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	3301      	adds	r3, #1
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	7dfb      	ldrb	r3, [r7, #23]
 8001140:	69fa      	ldr	r2, [r7, #28]
 8001142:	429a      	cmp	r2, r3
 8001144:	ddbb      	ble.n	80010be <LCD_DrawSBig+0x1a>
			}
		}
	}
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000000 	.word	0x20000000

08001154 <LCD_DrawTBig>:

void LCD_DrawTBig(uint16_t x0, uint16_t y0) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001164:	230f      	movs	r3, #15
 8001166:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
 800116c:	e02a      	b.n	80011c4 <LCD_DrawTBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
 8001172:	e020      	b.n	80011b6 <LCD_DrawTBig+0x62>
			if ((dy <= 3) || (dx >= 6 && dx <= 9)) {
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	2b03      	cmp	r3, #3
 8001178:	dd05      	ble.n	8001186 <LCD_DrawTBig+0x32>
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	2b05      	cmp	r3, #5
 800117e:	dd17      	ble.n	80011b0 <LCD_DrawTBig+0x5c>
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	2b09      	cmp	r3, #9
 8001184:	dc14      	bgt.n	80011b0 <LCD_DrawTBig+0x5c>
				int y = y0 + dy;
 8001186:	88bb      	ldrh	r3, [r7, #4]
 8001188:	69fa      	ldr	r2, [r7, #28]
 800118a:	4413      	add	r3, r2
 800118c:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4413      	add	r3, r2
 8001194:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <LCD_DrawTBig+0x84>)
 8001198:	7818      	ldrb	r0, [r3, #0]
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4613      	mov	r3, r2
 800119e:	011b      	lsls	r3, r3, #4
 80011a0:	1a9b      	subs	r3, r3, r2
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	461a      	mov	r2, r3
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	4413      	add	r3, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f001 f8b4 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	3301      	adds	r3, #1
 80011b4:	61bb      	str	r3, [r7, #24]
 80011b6:	7dfb      	ldrb	r3, [r7, #23]
 80011b8:	69ba      	ldr	r2, [r7, #24]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	ddda      	ble.n	8001174 <LCD_DrawTBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80011be:	69fb      	ldr	r3, [r7, #28]
 80011c0:	3301      	adds	r3, #1
 80011c2:	61fb      	str	r3, [r7, #28]
 80011c4:	7dfb      	ldrb	r3, [r7, #23]
 80011c6:	69fa      	ldr	r2, [r7, #28]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	ddd0      	ble.n	800116e <LCD_DrawTBig+0x1a>
			}
		}
	}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000000 	.word	0x20000000

080011dc <LCD_DrawUBig>:

void LCD_DrawUBig(uint16_t x0, uint16_t y0) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b088      	sub	sp, #32
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	460a      	mov	r2, r1
 80011e6:	80fb      	strh	r3, [r7, #6]
 80011e8:	4613      	mov	r3, r2
 80011ea:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80011ec:	230f      	movs	r3, #15
 80011ee:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
 80011f4:	e02a      	b.n	800124c <LCD_DrawUBig+0x70>
		for(int dx = 0; dx <=width; dx++){
 80011f6:	2300      	movs	r3, #0
 80011f8:	61bb      	str	r3, [r7, #24]
 80011fa:	e020      	b.n	800123e <LCD_DrawUBig+0x62>
			if ((dx <= 3) || (dx >= 12) || (dy >= 12)) {
 80011fc:	69bb      	ldr	r3, [r7, #24]
 80011fe:	2b03      	cmp	r3, #3
 8001200:	dd05      	ble.n	800120e <LCD_DrawUBig+0x32>
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b0b      	cmp	r3, #11
 8001206:	dc02      	bgt.n	800120e <LCD_DrawUBig+0x32>
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	2b0b      	cmp	r3, #11
 800120c:	dd14      	ble.n	8001238 <LCD_DrawUBig+0x5c>
				int y = y0 + dy;
 800120e:	88bb      	ldrh	r3, [r7, #4]
 8001210:	69fa      	ldr	r2, [r7, #28]
 8001212:	4413      	add	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001216:	88fb      	ldrh	r3, [r7, #6]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	4413      	add	r3, r2
 800121c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800121e:	4b10      	ldr	r3, [pc, #64]	; (8001260 <LCD_DrawUBig+0x84>)
 8001220:	7818      	ldrb	r0, [r3, #0]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4613      	mov	r3, r2
 8001226:	011b      	lsls	r3, r3, #4
 8001228:	1a9b      	subs	r3, r3, r2
 800122a:	011b      	lsls	r3, r3, #4
 800122c:	461a      	mov	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4413      	add	r3, r2
 8001232:	4619      	mov	r1, r3
 8001234:	f001 f870 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001238:	69bb      	ldr	r3, [r7, #24]
 800123a:	3301      	adds	r3, #1
 800123c:	61bb      	str	r3, [r7, #24]
 800123e:	7dfb      	ldrb	r3, [r7, #23]
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	429a      	cmp	r2, r3
 8001244:	ddda      	ble.n	80011fc <LCD_DrawUBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3301      	adds	r3, #1
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	7dfb      	ldrb	r3, [r7, #23]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	429a      	cmp	r2, r3
 8001252:	ddd0      	ble.n	80011f6 <LCD_DrawUBig+0x1a>
			}
		}
	}
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3720      	adds	r7, #32
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000000 	.word	0x20000000

08001264 <LCD_DrawVBig>:

void LCD_DrawVBig(uint16_t x0, uint16_t y0) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b088      	sub	sp, #32
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	460a      	mov	r2, r1
 800126e:	80fb      	strh	r3, [r7, #6]
 8001270:	4613      	mov	r3, r2
 8001272:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001274:	230f      	movs	r3, #15
 8001276:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
 800127c:	e066      	b.n	800134c <LCD_DrawVBig+0xe8>
		for(int dx = 0; dx <=width; dx++){
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
 8001282:	e05c      	b.n	800133e <LCD_DrawVBig+0xda>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 6 && dx <= 9 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 2 && dx <= 5) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7) || (dy >= 4 && dy <= 7 && dx >= 10 && dx <= 13) || (dy >= 8 && dy <= 11 && dx >= 8 && dx <= 11) ) {
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b03      	cmp	r3, #3
 8001288:	dc02      	bgt.n	8001290 <LCD_DrawVBig+0x2c>
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	2b03      	cmp	r3, #3
 800128e:	dd3e      	ble.n	800130e <LCD_DrawVBig+0xaa>
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	2b0b      	cmp	r3, #11
 8001294:	dd02      	ble.n	800129c <LCD_DrawVBig+0x38>
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	2b03      	cmp	r3, #3
 800129a:	dd38      	ble.n	800130e <LCD_DrawVBig+0xaa>
 800129c:	69bb      	ldr	r3, [r7, #24]
 800129e:	2b05      	cmp	r3, #5
 80012a0:	dd05      	ble.n	80012ae <LCD_DrawVBig+0x4a>
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dc02      	bgt.n	80012ae <LCD_DrawVBig+0x4a>
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	2b0b      	cmp	r3, #11
 80012ac:	dc2f      	bgt.n	800130e <LCD_DrawVBig+0xaa>
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	dd08      	ble.n	80012c6 <LCD_DrawVBig+0x62>
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	2b07      	cmp	r3, #7
 80012b8:	dc05      	bgt.n	80012c6 <LCD_DrawVBig+0x62>
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	dd02      	ble.n	80012c6 <LCD_DrawVBig+0x62>
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	dd23      	ble.n	800130e <LCD_DrawVBig+0xaa>
 80012c6:	69fb      	ldr	r3, [r7, #28]
 80012c8:	2b07      	cmp	r3, #7
 80012ca:	dd08      	ble.n	80012de <LCD_DrawVBig+0x7a>
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	2b0b      	cmp	r3, #11
 80012d0:	dc05      	bgt.n	80012de <LCD_DrawVBig+0x7a>
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b03      	cmp	r3, #3
 80012d6:	dd02      	ble.n	80012de <LCD_DrawVBig+0x7a>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b07      	cmp	r3, #7
 80012dc:	dd17      	ble.n	800130e <LCD_DrawVBig+0xaa>
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	2b03      	cmp	r3, #3
 80012e2:	dd08      	ble.n	80012f6 <LCD_DrawVBig+0x92>
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	2b07      	cmp	r3, #7
 80012e8:	dc05      	bgt.n	80012f6 <LCD_DrawVBig+0x92>
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	2b09      	cmp	r3, #9
 80012ee:	dd02      	ble.n	80012f6 <LCD_DrawVBig+0x92>
 80012f0:	69bb      	ldr	r3, [r7, #24]
 80012f2:	2b0d      	cmp	r3, #13
 80012f4:	dd0b      	ble.n	800130e <LCD_DrawVBig+0xaa>
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	2b07      	cmp	r3, #7
 80012fa:	dd1d      	ble.n	8001338 <LCD_DrawVBig+0xd4>
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	2b0b      	cmp	r3, #11
 8001300:	dc1a      	bgt.n	8001338 <LCD_DrawVBig+0xd4>
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	2b07      	cmp	r3, #7
 8001306:	dd17      	ble.n	8001338 <LCD_DrawVBig+0xd4>
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	2b0b      	cmp	r3, #11
 800130c:	dc14      	bgt.n	8001338 <LCD_DrawVBig+0xd4>
				int y = y0 + dy;
 800130e:	88bb      	ldrh	r3, [r7, #4]
 8001310:	69fa      	ldr	r2, [r7, #28]
 8001312:	4413      	add	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001316:	88fb      	ldrh	r3, [r7, #6]
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4413      	add	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <LCD_DrawVBig+0xfc>)
 8001320:	7818      	ldrb	r0, [r3, #0]
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4613      	mov	r3, r2
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	1a9b      	subs	r3, r3, r2
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	461a      	mov	r2, r3
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	4413      	add	r3, r2
 8001332:	4619      	mov	r1, r3
 8001334:	f000 fff0 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	3301      	adds	r3, #1
 800133c:	61bb      	str	r3, [r7, #24]
 800133e:	7dfb      	ldrb	r3, [r7, #23]
 8001340:	69ba      	ldr	r2, [r7, #24]
 8001342:	429a      	cmp	r2, r3
 8001344:	dd9e      	ble.n	8001284 <LCD_DrawVBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3301      	adds	r3, #1
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	7dfb      	ldrb	r3, [r7, #23]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	429a      	cmp	r2, r3
 8001352:	dd94      	ble.n	800127e <LCD_DrawVBig+0x1a>
			}
		}
	}
}
 8001354:	bf00      	nop
 8001356:	bf00      	nop
 8001358:	3720      	adds	r7, #32
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000000 	.word	0x20000000

08001364 <LCD_DrawWBig>:

void LCD_DrawWBig(uint16_t x0, uint16_t y0) {
 8001364:	b580      	push	{r7, lr}
 8001366:	b088      	sub	sp, #32
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	460a      	mov	r2, r1
 800136e:	80fb      	strh	r3, [r7, #6]
 8001370:	4613      	mov	r3, r2
 8001372:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001374:	230f      	movs	r3, #15
 8001376:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001378:	2300      	movs	r3, #0
 800137a:	61fb      	str	r3, [r7, #28]
 800137c:	e081      	b.n	8001482 <LCD_DrawWBig+0x11e>
		for(int dx = 0; dx <=width; dx++){
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
 8001382:	e077      	b.n	8001474 <LCD_DrawWBig+0x110>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dy >= 4 && dy <= 7 && dx >= 1 && dx <= 4) || (dy >= 8 && dy <= 11 && dx >= 2 && dx <= 5)  || (dy >= 12 && dy <= 15 && dx >= 3 && dx <= 6)|| (dy >= 4 && dy <= 7 && dx >= 11 && dx <= 14) || (dy >= 8 && dy <= 11 && dx >= 10 && dx <= 13) || (dy >= 12 && dy <= 15 && dx >= 9 && dx <= 12) || (dx >= 6 && dx <= 9 && dy >= 6 && dy <= 11)) {
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b03      	cmp	r3, #3
 8001388:	dc02      	bgt.n	8001390 <LCD_DrawWBig+0x2c>
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	2b03      	cmp	r3, #3
 800138e:	dd59      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 8001390:	69bb      	ldr	r3, [r7, #24]
 8001392:	2b0b      	cmp	r3, #11
 8001394:	dd02      	ble.n	800139c <LCD_DrawWBig+0x38>
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	2b03      	cmp	r3, #3
 800139a:	dd53      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	2b03      	cmp	r3, #3
 80013a0:	dd08      	ble.n	80013b4 <LCD_DrawWBig+0x50>
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	2b07      	cmp	r3, #7
 80013a6:	dc05      	bgt.n	80013b4 <LCD_DrawWBig+0x50>
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	dd02      	ble.n	80013b4 <LCD_DrawWBig+0x50>
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	2b04      	cmp	r3, #4
 80013b2:	dd47      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	2b07      	cmp	r3, #7
 80013b8:	dd08      	ble.n	80013cc <LCD_DrawWBig+0x68>
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	2b0b      	cmp	r3, #11
 80013be:	dc05      	bgt.n	80013cc <LCD_DrawWBig+0x68>
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	dd02      	ble.n	80013cc <LCD_DrawWBig+0x68>
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	dd3b      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	2b0b      	cmp	r3, #11
 80013d0:	dd08      	ble.n	80013e4 <LCD_DrawWBig+0x80>
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	2b0f      	cmp	r3, #15
 80013d6:	dc05      	bgt.n	80013e4 <LCD_DrawWBig+0x80>
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	dd02      	ble.n	80013e4 <LCD_DrawWBig+0x80>
 80013de:	69bb      	ldr	r3, [r7, #24]
 80013e0:	2b06      	cmp	r3, #6
 80013e2:	dd2f      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	2b03      	cmp	r3, #3
 80013e8:	dd08      	ble.n	80013fc <LCD_DrawWBig+0x98>
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	2b07      	cmp	r3, #7
 80013ee:	dc05      	bgt.n	80013fc <LCD_DrawWBig+0x98>
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	2b0a      	cmp	r3, #10
 80013f4:	dd02      	ble.n	80013fc <LCD_DrawWBig+0x98>
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b0e      	cmp	r3, #14
 80013fa:	dd23      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 80013fc:	69fb      	ldr	r3, [r7, #28]
 80013fe:	2b07      	cmp	r3, #7
 8001400:	dd08      	ble.n	8001414 <LCD_DrawWBig+0xb0>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	2b0b      	cmp	r3, #11
 8001406:	dc05      	bgt.n	8001414 <LCD_DrawWBig+0xb0>
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	2b09      	cmp	r3, #9
 800140c:	dd02      	ble.n	8001414 <LCD_DrawWBig+0xb0>
 800140e:	69bb      	ldr	r3, [r7, #24]
 8001410:	2b0d      	cmp	r3, #13
 8001412:	dd17      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0b      	cmp	r3, #11
 8001418:	dd08      	ble.n	800142c <LCD_DrawWBig+0xc8>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	dc05      	bgt.n	800142c <LCD_DrawWBig+0xc8>
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	2b08      	cmp	r3, #8
 8001424:	dd02      	ble.n	800142c <LCD_DrawWBig+0xc8>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b0c      	cmp	r3, #12
 800142a:	dd0b      	ble.n	8001444 <LCD_DrawWBig+0xe0>
 800142c:	69bb      	ldr	r3, [r7, #24]
 800142e:	2b05      	cmp	r3, #5
 8001430:	dd1d      	ble.n	800146e <LCD_DrawWBig+0x10a>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	2b09      	cmp	r3, #9
 8001436:	dc1a      	bgt.n	800146e <LCD_DrawWBig+0x10a>
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	2b05      	cmp	r3, #5
 800143c:	dd17      	ble.n	800146e <LCD_DrawWBig+0x10a>
 800143e:	69fb      	ldr	r3, [r7, #28]
 8001440:	2b0b      	cmp	r3, #11
 8001442:	dc14      	bgt.n	800146e <LCD_DrawWBig+0x10a>
				int y = y0 + dy;
 8001444:	88bb      	ldrh	r3, [r7, #4]
 8001446:	69fa      	ldr	r2, [r7, #28]
 8001448:	4413      	add	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800144c:	88fb      	ldrh	r3, [r7, #6]
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4413      	add	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001454:	4b10      	ldr	r3, [pc, #64]	; (8001498 <LCD_DrawWBig+0x134>)
 8001456:	7818      	ldrb	r0, [r3, #0]
 8001458:	693a      	ldr	r2, [r7, #16]
 800145a:	4613      	mov	r3, r2
 800145c:	011b      	lsls	r3, r3, #4
 800145e:	1a9b      	subs	r3, r3, r2
 8001460:	011b      	lsls	r3, r3, #4
 8001462:	461a      	mov	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	4413      	add	r3, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f000 ff55 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	3301      	adds	r3, #1
 8001472:	61bb      	str	r3, [r7, #24]
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	429a      	cmp	r2, r3
 800147a:	dd83      	ble.n	8001384 <LCD_DrawWBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	3301      	adds	r3, #1
 8001480:	61fb      	str	r3, [r7, #28]
 8001482:	7dfb      	ldrb	r3, [r7, #23]
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	429a      	cmp	r2, r3
 8001488:	f77f af79 	ble.w	800137e <LCD_DrawWBig+0x1a>
			}
		}
	}
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3720      	adds	r7, #32
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	20000000 	.word	0x20000000

0800149c <LCD_DrawXBig>:

void LCD_DrawXBig(uint16_t x0, uint16_t y0) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b088      	sub	sp, #32
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	4603      	mov	r3, r0
 80014a4:	460a      	mov	r2, r1
 80014a6:	80fb      	strh	r3, [r7, #6]
 80014a8:	4613      	mov	r3, r2
 80014aa:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80014ac:	230f      	movs	r3, #15
 80014ae:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e045      	b.n	8001542 <LCD_DrawXBig+0xa6>
		for(int dx = 0; dx <=width; dx++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
 80014ba:	e03b      	b.n	8001534 <LCD_DrawXBig+0x98>
			if ((dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx <= 3 && dy >= 12) || (dx >= 12 && dy >= 12) || (dy >= 4 && dy <= 11 && dx >= 4 && dx <= 11)) {
 80014bc:	69bb      	ldr	r3, [r7, #24]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	dc02      	bgt.n	80014c8 <LCD_DrawXBig+0x2c>
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	dd1d      	ble.n	8001504 <LCD_DrawXBig+0x68>
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2b0b      	cmp	r3, #11
 80014cc:	dd02      	ble.n	80014d4 <LCD_DrawXBig+0x38>
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b03      	cmp	r3, #3
 80014d2:	dd17      	ble.n	8001504 <LCD_DrawXBig+0x68>
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	2b03      	cmp	r3, #3
 80014d8:	dc02      	bgt.n	80014e0 <LCD_DrawXBig+0x44>
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	2b0b      	cmp	r3, #11
 80014de:	dc11      	bgt.n	8001504 <LCD_DrawXBig+0x68>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	2b0b      	cmp	r3, #11
 80014e4:	dd02      	ble.n	80014ec <LCD_DrawXBig+0x50>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	2b0b      	cmp	r3, #11
 80014ea:	dc0b      	bgt.n	8001504 <LCD_DrawXBig+0x68>
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	dd1d      	ble.n	800152e <LCD_DrawXBig+0x92>
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b0b      	cmp	r3, #11
 80014f6:	dc1a      	bgt.n	800152e <LCD_DrawXBig+0x92>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b03      	cmp	r3, #3
 80014fc:	dd17      	ble.n	800152e <LCD_DrawXBig+0x92>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0b      	cmp	r3, #11
 8001502:	dc14      	bgt.n	800152e <LCD_DrawXBig+0x92>
				int y = y0 + dy;
 8001504:	88bb      	ldrh	r3, [r7, #4]
 8001506:	69fa      	ldr	r2, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800150c:	88fb      	ldrh	r3, [r7, #6]
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	4413      	add	r3, r2
 8001512:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001514:	4b0f      	ldr	r3, [pc, #60]	; (8001554 <LCD_DrawXBig+0xb8>)
 8001516:	7818      	ldrb	r0, [r3, #0]
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4613      	mov	r3, r2
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	1a9b      	subs	r3, r3, r2
 8001520:	011b      	lsls	r3, r3, #4
 8001522:	461a      	mov	r2, r3
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	4413      	add	r3, r2
 8001528:	4619      	mov	r1, r3
 800152a:	f000 fef5 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800152e:	69bb      	ldr	r3, [r7, #24]
 8001530:	3301      	adds	r3, #1
 8001532:	61bb      	str	r3, [r7, #24]
 8001534:	7dfb      	ldrb	r3, [r7, #23]
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	429a      	cmp	r2, r3
 800153a:	ddbf      	ble.n	80014bc <LCD_DrawXBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3301      	adds	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	69fa      	ldr	r2, [r7, #28]
 8001546:	429a      	cmp	r2, r3
 8001548:	ddb5      	ble.n	80014b6 <LCD_DrawXBig+0x1a>
			}
		}
	}
}
 800154a:	bf00      	nop
 800154c:	bf00      	nop
 800154e:	3720      	adds	r7, #32
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20000000 	.word	0x20000000

08001558 <LCD_DrawYBig>:

void LCD_DrawYBig(uint16_t x0, uint16_t y0) {
 8001558:	b580      	push	{r7, lr}
 800155a:	b088      	sub	sp, #32
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	460a      	mov	r2, r1
 8001562:	80fb      	strh	r3, [r7, #6]
 8001564:	4613      	mov	r3, r2
 8001566:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001568:	230f      	movs	r3, #15
 800156a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800156c:	2300      	movs	r3, #0
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e04e      	b.n	8001610 <LCD_DrawYBig+0xb8>
		for(int dx = 0; dx <=width; dx++){
 8001572:	2300      	movs	r3, #0
 8001574:	61bb      	str	r3, [r7, #24]
 8001576:	e044      	b.n	8001602 <LCD_DrawYBig+0xaa>
			if ((dx >= 6 && dx <= 9 && dy >= 8) || (dx <= 3 && dy <= 3) || (dx >= 12 && dy <= 3) || (dx >= 4 && dx <= 7 && dy >= 4 && dy <= 7) || (dx >= 8 && dx <= 11 && dy >= 4 && dy <= 7)) {
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	2b05      	cmp	r3, #5
 800157c:	dd05      	ble.n	800158a <LCD_DrawYBig+0x32>
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2b09      	cmp	r3, #9
 8001582:	dc02      	bgt.n	800158a <LCD_DrawYBig+0x32>
 8001584:	69fb      	ldr	r3, [r7, #28]
 8001586:	2b07      	cmp	r3, #7
 8001588:	dc23      	bgt.n	80015d2 <LCD_DrawYBig+0x7a>
 800158a:	69bb      	ldr	r3, [r7, #24]
 800158c:	2b03      	cmp	r3, #3
 800158e:	dc02      	bgt.n	8001596 <LCD_DrawYBig+0x3e>
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b03      	cmp	r3, #3
 8001594:	dd1d      	ble.n	80015d2 <LCD_DrawYBig+0x7a>
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	2b0b      	cmp	r3, #11
 800159a:	dd02      	ble.n	80015a2 <LCD_DrawYBig+0x4a>
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	2b03      	cmp	r3, #3
 80015a0:	dd17      	ble.n	80015d2 <LCD_DrawYBig+0x7a>
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	dd08      	ble.n	80015ba <LCD_DrawYBig+0x62>
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	2b07      	cmp	r3, #7
 80015ac:	dc05      	bgt.n	80015ba <LCD_DrawYBig+0x62>
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	dd02      	ble.n	80015ba <LCD_DrawYBig+0x62>
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	2b07      	cmp	r3, #7
 80015b8:	dd0b      	ble.n	80015d2 <LCD_DrawYBig+0x7a>
 80015ba:	69bb      	ldr	r3, [r7, #24]
 80015bc:	2b07      	cmp	r3, #7
 80015be:	dd1d      	ble.n	80015fc <LCD_DrawYBig+0xa4>
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b0b      	cmp	r3, #11
 80015c4:	dc1a      	bgt.n	80015fc <LCD_DrawYBig+0xa4>
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	dd17      	ble.n	80015fc <LCD_DrawYBig+0xa4>
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	2b07      	cmp	r3, #7
 80015d0:	dc14      	bgt.n	80015fc <LCD_DrawYBig+0xa4>
				int y = y0 + dy;
 80015d2:	88bb      	ldrh	r3, [r7, #4]
 80015d4:	69fa      	ldr	r2, [r7, #28]
 80015d6:	4413      	add	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80015da:	88fb      	ldrh	r3, [r7, #6]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4413      	add	r3, r2
 80015e0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80015e2:	4b10      	ldr	r3, [pc, #64]	; (8001624 <LCD_DrawYBig+0xcc>)
 80015e4:	7818      	ldrb	r0, [r3, #0]
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	4613      	mov	r3, r2
 80015ea:	011b      	lsls	r3, r3, #4
 80015ec:	1a9b      	subs	r3, r3, r2
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	461a      	mov	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	4413      	add	r3, r2
 80015f6:	4619      	mov	r1, r3
 80015f8:	f000 fe8e 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	3301      	adds	r3, #1
 8001600:	61bb      	str	r3, [r7, #24]
 8001602:	7dfb      	ldrb	r3, [r7, #23]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	429a      	cmp	r2, r3
 8001608:	ddb6      	ble.n	8001578 <LCD_DrawYBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3301      	adds	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
 8001610:	7dfb      	ldrb	r3, [r7, #23]
 8001612:	69fa      	ldr	r2, [r7, #28]
 8001614:	429a      	cmp	r2, r3
 8001616:	ddac      	ble.n	8001572 <LCD_DrawYBig+0x1a>
			}
		}
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3720      	adds	r7, #32
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	20000000 	.word	0x20000000

08001628 <LCD_DrawZBig>:

void LCD_DrawZBig(uint16_t x0, uint16_t y0) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b088      	sub	sp, #32
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	460a      	mov	r2, r1
 8001632:	80fb      	strh	r3, [r7, #6]
 8001634:	4613      	mov	r3, r2
 8001636:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001638:	230f      	movs	r3, #15
 800163a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
 8001640:	e03f      	b.n	80016c2 <LCD_DrawZBig+0x9a>
		for(int dx = 0; dx <=width; dx++){
 8001642:	2300      	movs	r3, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	e035      	b.n	80016b4 <LCD_DrawZBig+0x8c>
			if (dy <= 3 || dy >= 12 || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	2b03      	cmp	r3, #3
 800164c:	dd1a      	ble.n	8001684 <LCD_DrawZBig+0x5c>
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	2b0b      	cmp	r3, #11
 8001652:	dc17      	bgt.n	8001684 <LCD_DrawZBig+0x5c>
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b03      	cmp	r3, #3
 8001658:	dd08      	ble.n	800166c <LCD_DrawZBig+0x44>
 800165a:	69fb      	ldr	r3, [r7, #28]
 800165c:	2b07      	cmp	r3, #7
 800165e:	dc05      	bgt.n	800166c <LCD_DrawZBig+0x44>
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	2b07      	cmp	r3, #7
 8001664:	dd02      	ble.n	800166c <LCD_DrawZBig+0x44>
 8001666:	69bb      	ldr	r3, [r7, #24]
 8001668:	2b0b      	cmp	r3, #11
 800166a:	dd0b      	ble.n	8001684 <LCD_DrawZBig+0x5c>
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	2b07      	cmp	r3, #7
 8001670:	dd1d      	ble.n	80016ae <LCD_DrawZBig+0x86>
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	2b0b      	cmp	r3, #11
 8001676:	dc1a      	bgt.n	80016ae <LCD_DrawZBig+0x86>
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	2b03      	cmp	r3, #3
 800167c:	dd17      	ble.n	80016ae <LCD_DrawZBig+0x86>
 800167e:	69bb      	ldr	r3, [r7, #24]
 8001680:	2b07      	cmp	r3, #7
 8001682:	dc14      	bgt.n	80016ae <LCD_DrawZBig+0x86>
				int y = y0 + dy;
 8001684:	88bb      	ldrh	r3, [r7, #4]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4413      	add	r3, r2
 800168a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800168c:	88fb      	ldrh	r3, [r7, #6]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4413      	add	r3, r2
 8001692:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <LCD_DrawZBig+0xac>)
 8001696:	7818      	ldrb	r0, [r3, #0]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	4613      	mov	r3, r2
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	011b      	lsls	r3, r3, #4
 80016a2:	461a      	mov	r2, r3
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	4413      	add	r3, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f000 fe35 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	3301      	adds	r3, #1
 80016b2:	61bb      	str	r3, [r7, #24]
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	ddc5      	ble.n	8001648 <LCD_DrawZBig+0x20>
	for(int dy = 0; dy <= width; dy++){
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	ddbb      	ble.n	8001642 <LCD_DrawZBig+0x1a>
			}
		}
	}
}
 80016ca:	bf00      	nop
 80016cc:	bf00      	nop
 80016ce:	3720      	adds	r7, #32
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	20000000 	.word	0x20000000

080016d8 <LCD_Draw0Big>:

void LCD_Draw0Big(uint16_t x0, uint16_t y0) {
 80016d8:	b580      	push	{r7, lr}
 80016da:	b088      	sub	sp, #32
 80016dc:	af00      	add	r7, sp, #0
 80016de:	4603      	mov	r3, r0
 80016e0:	460a      	mov	r2, r1
 80016e2:	80fb      	strh	r3, [r7, #6]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80016e8:	230f      	movs	r3, #15
 80016ea:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80016ec:	2300      	movs	r3, #0
 80016ee:	61fb      	str	r3, [r7, #28]
 80016f0:	e02d      	b.n	800174e <LCD_Draw0Big+0x76>
		for(int dx = 0; dx <=width; dx++){
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
 80016f6:	e023      	b.n	8001740 <LCD_Draw0Big+0x68>
			if ((dx <= 3 || dx >= 12) || (dy <= 3 || dy >= 12)) {
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	dd08      	ble.n	8001710 <LCD_Draw0Big+0x38>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0b      	cmp	r3, #11
 8001702:	dc05      	bgt.n	8001710 <LCD_Draw0Big+0x38>
 8001704:	69fb      	ldr	r3, [r7, #28]
 8001706:	2b03      	cmp	r3, #3
 8001708:	dd02      	ble.n	8001710 <LCD_Draw0Big+0x38>
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	2b0b      	cmp	r3, #11
 800170e:	dd14      	ble.n	800173a <LCD_Draw0Big+0x62>
				int y = y0 + dy;
 8001710:	88bb      	ldrh	r3, [r7, #4]
 8001712:	69fa      	ldr	r2, [r7, #28]
 8001714:	4413      	add	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4413      	add	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <LCD_Draw0Big+0x88>)
 8001722:	7818      	ldrb	r0, [r3, #0]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	4613      	mov	r3, r2
 8001728:	011b      	lsls	r3, r3, #4
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	461a      	mov	r2, r3
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	4413      	add	r3, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f000 fdef 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	3301      	adds	r3, #1
 800173e:	61bb      	str	r3, [r7, #24]
 8001740:	7dfb      	ldrb	r3, [r7, #23]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	429a      	cmp	r2, r3
 8001746:	ddd7      	ble.n	80016f8 <LCD_Draw0Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
 800174e:	7dfb      	ldrb	r3, [r7, #23]
 8001750:	69fa      	ldr	r2, [r7, #28]
 8001752:	429a      	cmp	r2, r3
 8001754:	ddcd      	ble.n	80016f2 <LCD_Draw0Big+0x1a>
			}
		}
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3720      	adds	r7, #32
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000000 	.word	0x20000000

08001764 <LCD_Draw1Big>:

void LCD_Draw1Big(uint16_t x0, uint16_t y0) {
 8001764:	b580      	push	{r7, lr}
 8001766:	b088      	sub	sp, #32
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	460a      	mov	r2, r1
 800176e:	80fb      	strh	r3, [r7, #6]
 8001770:	4613      	mov	r3, r2
 8001772:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001774:	230f      	movs	r3, #15
 8001776:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	e027      	b.n	80017ce <LCD_Draw1Big+0x6a>
		for(int dx = 0; dx <=width; dx++){
 800177e:	2300      	movs	r3, #0
 8001780:	61bb      	str	r3, [r7, #24]
 8001782:	e01d      	b.n	80017c0 <LCD_Draw1Big+0x5c>
			if (dx >= 6 && dx <= 9) {
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	2b05      	cmp	r3, #5
 8001788:	dd17      	ble.n	80017ba <LCD_Draw1Big+0x56>
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	2b09      	cmp	r3, #9
 800178e:	dc14      	bgt.n	80017ba <LCD_Draw1Big+0x56>
				int y = y0 + dy;
 8001790:	88bb      	ldrh	r3, [r7, #4]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001798:	88fb      	ldrh	r3, [r7, #6]
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4413      	add	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80017a0:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <LCD_Draw1Big+0x7c>)
 80017a2:	7818      	ldrb	r0, [r3, #0]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4613      	mov	r3, r2
 80017a8:	011b      	lsls	r3, r3, #4
 80017aa:	1a9b      	subs	r3, r3, r2
 80017ac:	011b      	lsls	r3, r3, #4
 80017ae:	461a      	mov	r2, r3
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4413      	add	r3, r2
 80017b4:	4619      	mov	r1, r3
 80017b6:	f000 fdaf 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	3301      	adds	r3, #1
 80017be:	61bb      	str	r3, [r7, #24]
 80017c0:	7dfb      	ldrb	r3, [r7, #23]
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dddd      	ble.n	8001784 <LCD_Draw1Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	3301      	adds	r3, #1
 80017cc:	61fb      	str	r3, [r7, #28]
 80017ce:	7dfb      	ldrb	r3, [r7, #23]
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	ddd3      	ble.n	800177e <LCD_Draw1Big+0x1a>
			}
		}
	}
}
 80017d6:	bf00      	nop
 80017d8:	bf00      	nop
 80017da:	3720      	adds	r7, #32
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20000000 	.word	0x20000000

080017e4 <LCD_Draw2Big>:

void LCD_Draw2Big(uint16_t x0, uint16_t y0) {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	460a      	mov	r2, r1
 80017ee:	80fb      	strh	r3, [r7, #6]
 80017f0:	4613      	mov	r3, r2
 80017f2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80017f4:	230f      	movs	r3, #15
 80017f6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80017f8:	2300      	movs	r3, #0
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	e039      	b.n	8001872 <LCD_Draw2Big+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
 8001802:	e02f      	b.n	8001864 <LCD_Draw2Big+0x80>
			if (dy <= 3 || dy >= 12|| (dx >= 12 && dy <= 5) || (dx <= 3 && dy >= 10) || (dy >= 6 && dy <= 9)) {
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	2b03      	cmp	r3, #3
 8001808:	dd14      	ble.n	8001834 <LCD_Draw2Big+0x50>
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	2b0b      	cmp	r3, #11
 800180e:	dc11      	bgt.n	8001834 <LCD_Draw2Big+0x50>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0b      	cmp	r3, #11
 8001814:	dd02      	ble.n	800181c <LCD_Draw2Big+0x38>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2b05      	cmp	r3, #5
 800181a:	dd0b      	ble.n	8001834 <LCD_Draw2Big+0x50>
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	2b03      	cmp	r3, #3
 8001820:	dc02      	bgt.n	8001828 <LCD_Draw2Big+0x44>
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	2b09      	cmp	r3, #9
 8001826:	dc05      	bgt.n	8001834 <LCD_Draw2Big+0x50>
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	2b05      	cmp	r3, #5
 800182c:	dd17      	ble.n	800185e <LCD_Draw2Big+0x7a>
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	2b09      	cmp	r3, #9
 8001832:	dc14      	bgt.n	800185e <LCD_Draw2Big+0x7a>
				int y = y0 + dy;
 8001834:	88bb      	ldrh	r3, [r7, #4]
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	4413      	add	r3, r2
 800183a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 800183c:	88fb      	ldrh	r3, [r7, #6]
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4413      	add	r3, r2
 8001842:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <LCD_Draw2Big+0xa0>)
 8001846:	7818      	ldrb	r0, [r3, #0]
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	4613      	mov	r3, r2
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	1a9b      	subs	r3, r3, r2
 8001850:	011b      	lsls	r3, r3, #4
 8001852:	461a      	mov	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	4413      	add	r3, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f000 fd5d 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	3301      	adds	r3, #1
 8001862:	61bb      	str	r3, [r7, #24]
 8001864:	7dfb      	ldrb	r3, [r7, #23]
 8001866:	69ba      	ldr	r2, [r7, #24]
 8001868:	429a      	cmp	r2, r3
 800186a:	ddcb      	ble.n	8001804 <LCD_Draw2Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	3301      	adds	r3, #1
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	69fa      	ldr	r2, [r7, #28]
 8001876:	429a      	cmp	r2, r3
 8001878:	ddc1      	ble.n	80017fe <LCD_Draw2Big+0x1a>
			}
		}
	}
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3720      	adds	r7, #32
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000

08001888 <LCD_Draw3Big>:

void LCD_Draw3Big(uint16_t x0, uint16_t y0) {
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	460a      	mov	r2, r1
 8001892:	80fb      	strh	r3, [r7, #6]
 8001894:	4613      	mov	r3, r2
 8001896:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001898:	230f      	movs	r3, #15
 800189a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 800189c:	2300      	movs	r3, #0
 800189e:	61fb      	str	r3, [r7, #28]
 80018a0:	e030      	b.n	8001904 <LCD_Draw3Big+0x7c>
		for(int dx = 0; dx <=width; dx++){
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
 80018a6:	e026      	b.n	80018f6 <LCD_Draw3Big+0x6e>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12)) {
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	dd0b      	ble.n	80018c6 <LCD_Draw3Big+0x3e>
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	2b0b      	cmp	r3, #11
 80018b2:	dc08      	bgt.n	80018c6 <LCD_Draw3Big+0x3e>
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	2b05      	cmp	r3, #5
 80018b8:	dd02      	ble.n	80018c0 <LCD_Draw3Big+0x38>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	2b09      	cmp	r3, #9
 80018be:	dd02      	ble.n	80018c6 <LCD_Draw3Big+0x3e>
 80018c0:	69bb      	ldr	r3, [r7, #24]
 80018c2:	2b0b      	cmp	r3, #11
 80018c4:	dd14      	ble.n	80018f0 <LCD_Draw3Big+0x68>
				int y = y0 + dy;
 80018c6:	88bb      	ldrh	r3, [r7, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	4413      	add	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 80018ce:	88fb      	ldrh	r3, [r7, #6]
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4413      	add	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 80018d6:	4b10      	ldr	r3, [pc, #64]	; (8001918 <LCD_Draw3Big+0x90>)
 80018d8:	7818      	ldrb	r0, [r3, #0]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	4613      	mov	r3, r2
 80018de:	011b      	lsls	r3, r3, #4
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	011b      	lsls	r3, r3, #4
 80018e4:	461a      	mov	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	4413      	add	r3, r2
 80018ea:	4619      	mov	r1, r3
 80018ec:	f000 fd14 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	3301      	adds	r3, #1
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	7dfb      	ldrb	r3, [r7, #23]
 80018f8:	69ba      	ldr	r2, [r7, #24]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	ddd4      	ble.n	80018a8 <LCD_Draw3Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3301      	adds	r3, #1
 8001902:	61fb      	str	r3, [r7, #28]
 8001904:	7dfb      	ldrb	r3, [r7, #23]
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	429a      	cmp	r2, r3
 800190a:	ddca      	ble.n	80018a2 <LCD_Draw3Big+0x1a>
			}
		}
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3720      	adds	r7, #32
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000000 	.word	0x20000000

0800191c <LCD_Draw4Big>:

void LCD_Draw4Big(uint16_t x0, uint16_t y0) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b088      	sub	sp, #32
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	460a      	mov	r2, r1
 8001926:	80fb      	strh	r3, [r7, #6]
 8001928:	4613      	mov	r3, r2
 800192a:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 800192c:	230f      	movs	r3, #15
 800192e:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001930:	2300      	movs	r3, #0
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e033      	b.n	800199e <LCD_Draw4Big+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	e029      	b.n	8001990 <LCD_Draw4Big+0x74>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 10 && dx <= 13)) {
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b03      	cmp	r3, #3
 8001940:	dc02      	bgt.n	8001948 <LCD_Draw4Big+0x2c>
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	2b09      	cmp	r3, #9
 8001946:	dd0b      	ble.n	8001960 <LCD_Draw4Big+0x44>
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b05      	cmp	r3, #5
 800194c:	dd02      	ble.n	8001954 <LCD_Draw4Big+0x38>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	2b09      	cmp	r3, #9
 8001952:	dd05      	ble.n	8001960 <LCD_Draw4Big+0x44>
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b09      	cmp	r3, #9
 8001958:	dd17      	ble.n	800198a <LCD_Draw4Big+0x6e>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0d      	cmp	r3, #13
 800195e:	dc14      	bgt.n	800198a <LCD_Draw4Big+0x6e>
				int y = y0 + dy;
 8001960:	88bb      	ldrh	r3, [r7, #4]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	4413      	add	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001968:	88fb      	ldrh	r3, [r7, #6]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <LCD_Draw4Big+0x94>)
 8001972:	7818      	ldrb	r0, [r3, #0]
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	4613      	mov	r3, r2
 8001978:	011b      	lsls	r3, r3, #4
 800197a:	1a9b      	subs	r3, r3, r2
 800197c:	011b      	lsls	r3, r3, #4
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	4619      	mov	r1, r3
 8001986:	f000 fcc7 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	3301      	adds	r3, #1
 800198e:	61bb      	str	r3, [r7, #24]
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	429a      	cmp	r2, r3
 8001996:	ddd1      	ble.n	800193c <LCD_Draw4Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	3301      	adds	r3, #1
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	7dfb      	ldrb	r3, [r7, #23]
 80019a0:	69fa      	ldr	r2, [r7, #28]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	ddc7      	ble.n	8001936 <LCD_Draw4Big+0x1a>
			}
		}
	}
}
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	3720      	adds	r7, #32
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	20000000 	.word	0x20000000

080019b4 <LCD_Draw5Big>:

void LCD_Draw5Big(uint16_t x0, uint16_t y0) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b088      	sub	sp, #32
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	460a      	mov	r2, r1
 80019be:	80fb      	strh	r3, [r7, #6]
 80019c0:	4613      	mov	r3, r2
 80019c2:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 80019c4:	230f      	movs	r3, #15
 80019c6:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
 80019cc:	e039      	b.n	8001a42 <LCD_Draw5Big+0x8e>
		for(int dx = 0; dx <=width; dx++){
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
 80019d2:	e02f      	b.n	8001a34 <LCD_Draw5Big+0x80>
			if (dy <= 3 || dy >= 12|| (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6) || (dx <= 3 && dy <= 9)) {
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	dd14      	ble.n	8001a04 <LCD_Draw5Big+0x50>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	2b0b      	cmp	r3, #11
 80019de:	dc11      	bgt.n	8001a04 <LCD_Draw5Big+0x50>
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b05      	cmp	r3, #5
 80019e4:	dd02      	ble.n	80019ec <LCD_Draw5Big+0x38>
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	dd0b      	ble.n	8001a04 <LCD_Draw5Big+0x50>
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	2b0b      	cmp	r3, #11
 80019f0:	dd02      	ble.n	80019f8 <LCD_Draw5Big+0x44>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	2b05      	cmp	r3, #5
 80019f6:	dc05      	bgt.n	8001a04 <LCD_Draw5Big+0x50>
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	2b03      	cmp	r3, #3
 80019fc:	dc17      	bgt.n	8001a2e <LCD_Draw5Big+0x7a>
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	2b09      	cmp	r3, #9
 8001a02:	dc14      	bgt.n	8001a2e <LCD_Draw5Big+0x7a>
				int y = y0 + dy;
 8001a04:	88bb      	ldrh	r3, [r7, #4]
 8001a06:	69fa      	ldr	r2, [r7, #28]
 8001a08:	4413      	add	r3, r2
 8001a0a:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001a0c:	88fb      	ldrh	r3, [r7, #6]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4413      	add	r3, r2
 8001a12:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001a14:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <LCD_Draw5Big+0xa0>)
 8001a16:	7818      	ldrb	r0, [r3, #0]
 8001a18:	693a      	ldr	r2, [r7, #16]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	011b      	lsls	r3, r3, #4
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	461a      	mov	r2, r3
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4413      	add	r3, r2
 8001a28:	4619      	mov	r1, r3
 8001a2a:	f000 fc75 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	7dfb      	ldrb	r3, [r7, #23]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	ddcb      	ble.n	80019d4 <LCD_Draw5Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	7dfb      	ldrb	r3, [r7, #23]
 8001a44:	69fa      	ldr	r2, [r7, #28]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	ddc1      	ble.n	80019ce <LCD_Draw5Big+0x1a>
			}
		}
	}
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3720      	adds	r7, #32
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000000 	.word	0x20000000

08001a58 <LCD_Draw6Big>:

void LCD_Draw6Big(uint16_t x0, uint16_t y0) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b088      	sub	sp, #32
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	460a      	mov	r2, r1
 8001a62:	80fb      	strh	r3, [r7, #6]
 8001a64:	4613      	mov	r3, r2
 8001a66:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001a68:	230f      	movs	r3, #15
 8001a6a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61fb      	str	r3, [r7, #28]
 8001a70:	e036      	b.n	8001ae0 <LCD_Draw6Big+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
 8001a76:	e02c      	b.n	8001ad2 <LCD_Draw6Big+0x7a>
			if (dy <= 3 || dx <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12 && dy >= 6)) {
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b03      	cmp	r3, #3
 8001a7c:	dd11      	ble.n	8001aa2 <LCD_Draw6Big+0x4a>
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b03      	cmp	r3, #3
 8001a82:	dd0e      	ble.n	8001aa2 <LCD_Draw6Big+0x4a>
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	2b0b      	cmp	r3, #11
 8001a88:	dc0b      	bgt.n	8001aa2 <LCD_Draw6Big+0x4a>
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	dd02      	ble.n	8001a96 <LCD_Draw6Big+0x3e>
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b09      	cmp	r3, #9
 8001a94:	dd05      	ble.n	8001aa2 <LCD_Draw6Big+0x4a>
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	2b0b      	cmp	r3, #11
 8001a9a:	dd17      	ble.n	8001acc <LCD_Draw6Big+0x74>
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	2b05      	cmp	r3, #5
 8001aa0:	dd14      	ble.n	8001acc <LCD_Draw6Big+0x74>
				int y = y0 + dy;
 8001aa2:	88bb      	ldrh	r3, [r7, #4]
 8001aa4:	69fa      	ldr	r2, [r7, #28]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001aaa:	88fb      	ldrh	r3, [r7, #6]
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <LCD_Draw6Big+0x9c>)
 8001ab4:	7818      	ldrb	r0, [r3, #0]
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	011b      	lsls	r3, r3, #4
 8001abc:	1a9b      	subs	r3, r3, r2
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f000 fc26 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	61bb      	str	r3, [r7, #24]
 8001ad2:	7dfb      	ldrb	r3, [r7, #23]
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	ddce      	ble.n	8001a78 <LCD_Draw6Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	3301      	adds	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
 8001ae0:	7dfb      	ldrb	r3, [r7, #23]
 8001ae2:	69fa      	ldr	r2, [r7, #28]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	ddc4      	ble.n	8001a72 <LCD_Draw6Big+0x1a>
			}
		}
	}
}
 8001ae8:	bf00      	nop
 8001aea:	bf00      	nop
 8001aec:	3720      	adds	r7, #32
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000000 	.word	0x20000000

08001af8 <LCD_Draw7Big>:

void LCD_Draw7Big(uint16_t x0, uint16_t y0) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	460a      	mov	r2, r1
 8001b02:	80fb      	strh	r3, [r7, #6]
 8001b04:	4613      	mov	r3, r2
 8001b06:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001b08:	230f      	movs	r3, #15
 8001b0a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
 8001b10:	e042      	b.n	8001b98 <LCD_Draw7Big+0xa0>
		for(int dx = 0; dx <=width; dx++){
 8001b12:	2300      	movs	r3, #0
 8001b14:	61bb      	str	r3, [r7, #24]
 8001b16:	e038      	b.n	8001b8a <LCD_Draw7Big+0x92>
			if ((dy <= 3) || (dx <= 3 && dy >= 12) || (dy >= 4 && dy <= 7 && dx >= 8 && dx <= 11) || (dy >= 8 && dy <= 11 && dx >= 4 && dx <= 7)) {
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	dd1d      	ble.n	8001b5a <LCD_Draw7Big+0x62>
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	2b03      	cmp	r3, #3
 8001b22:	dc02      	bgt.n	8001b2a <LCD_Draw7Big+0x32>
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0b      	cmp	r3, #11
 8001b28:	dc17      	bgt.n	8001b5a <LCD_Draw7Big+0x62>
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	dd08      	ble.n	8001b42 <LCD_Draw7Big+0x4a>
 8001b30:	69fb      	ldr	r3, [r7, #28]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	dc05      	bgt.n	8001b42 <LCD_Draw7Big+0x4a>
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b07      	cmp	r3, #7
 8001b3a:	dd02      	ble.n	8001b42 <LCD_Draw7Big+0x4a>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0b      	cmp	r3, #11
 8001b40:	dd0b      	ble.n	8001b5a <LCD_Draw7Big+0x62>
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	2b07      	cmp	r3, #7
 8001b46:	dd1d      	ble.n	8001b84 <LCD_Draw7Big+0x8c>
 8001b48:	69fb      	ldr	r3, [r7, #28]
 8001b4a:	2b0b      	cmp	r3, #11
 8001b4c:	dc1a      	bgt.n	8001b84 <LCD_Draw7Big+0x8c>
 8001b4e:	69bb      	ldr	r3, [r7, #24]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	dd17      	ble.n	8001b84 <LCD_Draw7Big+0x8c>
 8001b54:	69bb      	ldr	r3, [r7, #24]
 8001b56:	2b07      	cmp	r3, #7
 8001b58:	dc14      	bgt.n	8001b84 <LCD_Draw7Big+0x8c>
				int y = y0 + dy;
 8001b5a:	88bb      	ldrh	r3, [r7, #4]
 8001b5c:	69fa      	ldr	r2, [r7, #28]
 8001b5e:	4413      	add	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001b62:	88fb      	ldrh	r3, [r7, #6]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001b6a:	4b10      	ldr	r3, [pc, #64]	; (8001bac <LCD_Draw7Big+0xb4>)
 8001b6c:	7818      	ldrb	r0, [r3, #0]
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	011b      	lsls	r3, r3, #4
 8001b78:	461a      	mov	r2, r3
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	4619      	mov	r1, r3
 8001b80:	f000 fbca 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61bb      	str	r3, [r7, #24]
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	ddc2      	ble.n	8001b18 <LCD_Draw7Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3301      	adds	r3, #1
 8001b96:	61fb      	str	r3, [r7, #28]
 8001b98:	7dfb      	ldrb	r3, [r7, #23]
 8001b9a:	69fa      	ldr	r2, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	ddb8      	ble.n	8001b12 <LCD_Draw7Big+0x1a>
			}
		}
	}
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	3720      	adds	r7, #32
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	20000000 	.word	0x20000000

08001bb0 <LCD_Draw8Big>:

void LCD_Draw8Big(uint16_t x0, uint16_t y0) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	460a      	mov	r2, r1
 8001bba:	80fb      	strh	r3, [r7, #6]
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001bc0:	230f      	movs	r3, #15
 8001bc2:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	61fb      	str	r3, [r7, #28]
 8001bc8:	e033      	b.n	8001c32 <LCD_Draw8Big+0x82>
		for(int dx = 0; dx <=width; dx++){
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
 8001bce:	e029      	b.n	8001c24 <LCD_Draw8Big+0x74>
			if (dy <= 3 || dy >= 12 || (dy >= 6 && dy <= 9) || (dx >= 12) || (dx <= 3)) {
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	dd0e      	ble.n	8001bf4 <LCD_Draw8Big+0x44>
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	2b0b      	cmp	r3, #11
 8001bda:	dc0b      	bgt.n	8001bf4 <LCD_Draw8Big+0x44>
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	2b05      	cmp	r3, #5
 8001be0:	dd02      	ble.n	8001be8 <LCD_Draw8Big+0x38>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	2b09      	cmp	r3, #9
 8001be6:	dd05      	ble.n	8001bf4 <LCD_Draw8Big+0x44>
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2b0b      	cmp	r3, #11
 8001bec:	dc02      	bgt.n	8001bf4 <LCD_Draw8Big+0x44>
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	dc14      	bgt.n	8001c1e <LCD_Draw8Big+0x6e>
				int y = y0 + dy;
 8001bf4:	88bb      	ldrh	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001bfc:	88fb      	ldrh	r3, [r7, #6]
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	4413      	add	r3, r2
 8001c02:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <LCD_Draw8Big+0x94>)
 8001c06:	7818      	ldrb	r0, [r3, #0]
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	461a      	mov	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4413      	add	r3, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f000 fb7d 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	3301      	adds	r3, #1
 8001c22:	61bb      	str	r3, [r7, #24]
 8001c24:	7dfb      	ldrb	r3, [r7, #23]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	ddd1      	ble.n	8001bd0 <LCD_Draw8Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	3301      	adds	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	ddc7      	ble.n	8001bca <LCD_Draw8Big+0x1a>
			}
		}
	}
}
 8001c3a:	bf00      	nop
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000000 	.word	0x20000000

08001c48 <LCD_Draw9Big>:

void LCD_Draw9Big(uint16_t x0, uint16_t y0) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	460a      	mov	r2, r1
 8001c52:	80fb      	strh	r3, [r7, #6]
 8001c54:	4613      	mov	r3, r2
 8001c56:	80bb      	strh	r3, [r7, #4]
	const uint8_t width = 15;
 8001c58:	230f      	movs	r3, #15
 8001c5a:	75fb      	strb	r3, [r7, #23]
	for(int dy = 0; dy <= width; dy++){
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	e036      	b.n	8001cd0 <LCD_Draw9Big+0x88>
		for(int dx = 0; dx <=width; dx++){
 8001c62:	2300      	movs	r3, #0
 8001c64:	61bb      	str	r3, [r7, #24]
 8001c66:	e02c      	b.n	8001cc2 <LCD_Draw9Big+0x7a>
			if ((dx <= 3 && dy <= 9) || (dy >= 6 && dy <= 9) || (dx >= 12) || (dy <= 3) || (dy >= 12)) {
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	dc02      	bgt.n	8001c74 <LCD_Draw9Big+0x2c>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	2b09      	cmp	r3, #9
 8001c72:	dd0e      	ble.n	8001c92 <LCD_Draw9Big+0x4a>
 8001c74:	69fb      	ldr	r3, [r7, #28]
 8001c76:	2b05      	cmp	r3, #5
 8001c78:	dd02      	ble.n	8001c80 <LCD_Draw9Big+0x38>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b09      	cmp	r3, #9
 8001c7e:	dd08      	ble.n	8001c92 <LCD_Draw9Big+0x4a>
 8001c80:	69bb      	ldr	r3, [r7, #24]
 8001c82:	2b0b      	cmp	r3, #11
 8001c84:	dc05      	bgt.n	8001c92 <LCD_Draw9Big+0x4a>
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	2b03      	cmp	r3, #3
 8001c8a:	dd02      	ble.n	8001c92 <LCD_Draw9Big+0x4a>
 8001c8c:	69fb      	ldr	r3, [r7, #28]
 8001c8e:	2b0b      	cmp	r3, #11
 8001c90:	dd14      	ble.n	8001cbc <LCD_Draw9Big+0x74>
				int y = y0 + dy;
 8001c92:	88bb      	ldrh	r3, [r7, #4]
 8001c94:	69fa      	ldr	r2, [r7, #28]
 8001c96:	4413      	add	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
				int x = x0 + dx;
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	60fb      	str	r3, [r7, #12]
				LCD_WriteGRAM(COLOR_LTDC, y * LCD_WIDTH + x);
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <LCD_Draw9Big+0x9c>)
 8001ca4:	7818      	ldrb	r0, [r3, #0]
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4613      	mov	r3, r2
 8001caa:	011b      	lsls	r3, r3, #4
 8001cac:	1a9b      	subs	r3, r3, r2
 8001cae:	011b      	lsls	r3, r3, #4
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f000 fb2e 	bl	8002318 <LCD_WriteGRAM>
		for(int dx = 0; dx <=width; dx++){
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	ddce      	ble.n	8001c68 <LCD_Draw9Big+0x20>
	for(int dy = 0; dy <= width; dy++){
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	3301      	adds	r3, #1
 8001cce:	61fb      	str	r3, [r7, #28]
 8001cd0:	7dfb      	ldrb	r3, [r7, #23]
 8001cd2:	69fa      	ldr	r2, [r7, #28]
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	ddc4      	ble.n	8001c62 <LCD_Draw9Big+0x1a>
			}
		}
	}
}
 8001cd8:	bf00      	nop
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	20000000 	.word	0x20000000

08001ce8 <LCD_GpioInit>:
extern SPI_HandleTypeDef hspi5;
extern LTDC_HandleTypeDef hltdc;

uint8_t GRAM[LCD_WIDTH * LCD_HEIGHT] = {30, 30, 30, 10, 123, 123, 123, 123, 123, 123};

void LCD_GpioInit() {
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b088      	sub	sp, #32
 8001cec:	af00      	add	r7, sp, #0
	MX_SPI5_Init();
 8001cee:	f001 fac3 	bl	8003278 <MX_SPI5_Init>
	// Enable Port Clock
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	60bb      	str	r3, [r7, #8]
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <LCD_GpioInit+0x90>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a1f      	ldr	r2, [pc, #124]	; (8001d78 <LCD_GpioInit+0x90>)
 8001cfc:	f043 0304 	orr.w	r3, r3, #4
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <LCD_GpioInit+0x90>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
 8001d12:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <LCD_GpioInit+0x90>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d16:	4a18      	ldr	r2, [pc, #96]	; (8001d78 <LCD_GpioInit+0x90>)
 8001d18:	f043 0308 	orr.w	r3, r3, #8
 8001d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1e:	4b16      	ldr	r3, [pc, #88]	; (8001d78 <LCD_GpioInit+0x90>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	f003 0308 	and.w	r3, r3, #8
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	687b      	ldr	r3, [r7, #4]
	// Initialize NCS and DCX Port
	GPIO_InitTypeDef Gpio_InitStruct;
	Gpio_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	613b      	str	r3, [r7, #16]
	Gpio_InitStruct.Pull = GPIO_PULLUP;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	617b      	str	r3, [r7, #20]
	Gpio_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	61bb      	str	r3, [r7, #24]
	Gpio_InitStruct.Pin = LCD_NCS_PIN;
 8001d36:	2304      	movs	r3, #4
 8001d38:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_NCS_GPIO, &Gpio_InitStruct);
 8001d3a:	f107 030c 	add.w	r3, r7, #12
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480e      	ldr	r0, [pc, #56]	; (8001d7c <LCD_GpioInit+0x94>)
 8001d42:	f001 fe59 	bl	80039f8 <HAL_GPIO_Init>
	Gpio_InitStruct.Pin = LCD_DCX_PIN;
 8001d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_Init(LCD_DCX_GPIO, &Gpio_InitStruct);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	4619      	mov	r1, r3
 8001d52:	480b      	ldr	r0, [pc, #44]	; (8001d80 <LCD_GpioInit+0x98>)
 8001d54:	f001 fe50 	bl	80039f8 <HAL_GPIO_Init>
	// Initialize NCS and DCX value
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	4807      	ldr	r0, [pc, #28]	; (8001d7c <LCD_GpioInit+0x94>)
 8001d5e:	f001 fff7 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 8001d62:	2201      	movs	r2, #1
 8001d64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d68:	4805      	ldr	r0, [pc, #20]	; (8001d80 <LCD_GpioInit+0x98>)
 8001d6a:	f001 fff1 	bl	8003d50 <HAL_GPIO_WritePin>
}
 8001d6e:	bf00      	nop
 8001d70:	3720      	adds	r7, #32
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800
 8001d7c:	40020800 	.word	0x40020800
 8001d80:	40020c00 	.word	0x40020c00

08001d84 <LCD_LtdcInit>:

void LCD_LtdcInit() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
	MX_LTDC_Init();
 8001d88:	f000 faf0 	bl	800236c <MX_LTDC_Init>
	HAL_LTDC_SetAddress(&hltdc, (uint32_t)GRAM, LTDC_LAYER_1);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <LCD_LtdcInit+0x38>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	4619      	mov	r1, r3
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <LCD_LtdcInit+0x3c>)
 8001d94:	f002 f9d9 	bl	800414a <HAL_LTDC_SetAddress>
	HAL_LTDC_ConfigCLUT(&hltdc, CLUT, 256, LTDC_LAYER_1);
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d9e:	4909      	ldr	r1, [pc, #36]	; (8001dc4 <LCD_LtdcInit+0x40>)
 8001da0:	4807      	ldr	r0, [pc, #28]	; (8001dc0 <LCD_LtdcInit+0x3c>)
 8001da2:	f002 f925 	bl	8003ff0 <HAL_LTDC_ConfigCLUT>
	HAL_LTDC_EnableCLUT(&hltdc, LTDC_LAYER_1);
 8001da6:	2100      	movs	r1, #0
 8001da8:	4805      	ldr	r0, [pc, #20]	; (8001dc0 <LCD_LtdcInit+0x3c>)
 8001daa:	f002 f995 	bl	80040d8 <HAL_LTDC_EnableCLUT>
	HAL_LTDC_Reload(&hltdc, LTDC_RELOAD_VERTICAL_BLANKING);
 8001dae:	2102      	movs	r1, #2
 8001db0:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <LCD_LtdcInit+0x3c>)
 8001db2:	f002 fa00 	bl	80041b6 <HAL_LTDC_Reload>
}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000004 	.word	0x20000004
 8001dc0:	20012c34 	.word	0x20012c34
 8001dc4:	08006d5c 	.word	0x08006d5c

08001dc8 <LCD_DispInit_Spi>:

void LCD_DispInit_Spi() {
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
	//SOFTWARE RESET
	LCD_WriteCommand(0x01);
 8001dcc:	2001      	movs	r0, #1
 8001dce:	f000 fa47 	bl	8002260 <LCD_WriteCommand>
	HAL_Delay(1000);
 8001dd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dd6:	f001 fcb7 	bl	8003748 <HAL_Delay>

	//POWER CONTROL A
	LCD_WriteCommand(0xCB);
 8001dda:	20cb      	movs	r0, #203	; 0xcb
 8001ddc:	f000 fa40 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8001de0:	2039      	movs	r0, #57	; 0x39
 8001de2:	f000 fa6b 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x2C);
 8001de6:	202c      	movs	r0, #44	; 0x2c
 8001de8:	f000 fa68 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8001dec:	2000      	movs	r0, #0
 8001dee:	f000 fa65 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x34);
 8001df2:	2034      	movs	r0, #52	; 0x34
 8001df4:	f000 fa62 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x02);
 8001df8:	2002      	movs	r0, #2
 8001dfa:	f000 fa5f 	bl	80022bc <LCD_WriteData>

	//POWER CONTROL B
	LCD_WriteCommand(0xCF);
 8001dfe:	20cf      	movs	r0, #207	; 0xcf
 8001e00:	f000 fa2e 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001e04:	2000      	movs	r0, #0
 8001e06:	f000 fa59 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001e0a:	20c1      	movs	r0, #193	; 0xc1
 8001e0c:	f000 fa56 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x30);
 8001e10:	2030      	movs	r0, #48	; 0x30
 8001e12:	f000 fa53 	bl	80022bc <LCD_WriteData>

	//DRIVER TIMING CONTROL A
	LCD_WriteCommand(0xE8);
 8001e16:	20e8      	movs	r0, #232	; 0xe8
 8001e18:	f000 fa22 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8001e1c:	2085      	movs	r0, #133	; 0x85
 8001e1e:	f000 fa4d 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 fa4a 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x78);
 8001e28:	2078      	movs	r0, #120	; 0x78
 8001e2a:	f000 fa47 	bl	80022bc <LCD_WriteData>

	//DRIVER TIMING CONTROL B
	LCD_WriteCommand(0xEA);
 8001e2e:	20ea      	movs	r0, #234	; 0xea
 8001e30:	f000 fa16 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001e34:	2000      	movs	r0, #0
 8001e36:	f000 fa41 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8001e3a:	2000      	movs	r0, #0
 8001e3c:	f000 fa3e 	bl	80022bc <LCD_WriteData>

	//POWER ON SEQUENCE CONTROL
	LCD_WriteCommand(0xED);
 8001e40:	20ed      	movs	r0, #237	; 0xed
 8001e42:	f000 fa0d 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 8001e46:	2064      	movs	r0, #100	; 0x64
 8001e48:	f000 fa38 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x03);
 8001e4c:	2003      	movs	r0, #3
 8001e4e:	f000 fa35 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x12);
 8001e52:	2012      	movs	r0, #18
 8001e54:	f000 fa32 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x81);
 8001e58:	2081      	movs	r0, #129	; 0x81
 8001e5a:	f000 fa2f 	bl	80022bc <LCD_WriteData>

	//PUMP RATIO CONTROL
	LCD_WriteCommand(0xF7);
 8001e5e:	20f7      	movs	r0, #247	; 0xf7
 8001e60:	f000 f9fe 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8001e64:	2020      	movs	r0, #32
 8001e66:	f000 fa29 	bl	80022bc <LCD_WriteData>

	//POWER CONTROL,VRH[5:0]
	LCD_WriteCommand(0xC0);
 8001e6a:	20c0      	movs	r0, #192	; 0xc0
 8001e6c:	f000 f9f8 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x23);
 8001e70:	2023      	movs	r0, #35	; 0x23
 8001e72:	f000 fa23 	bl	80022bc <LCD_WriteData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	LCD_WriteCommand(0xC1);
 8001e76:	20c1      	movs	r0, #193	; 0xc1
 8001e78:	f000 f9f2 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 8001e7c:	2010      	movs	r0, #16
 8001e7e:	f000 fa1d 	bl	80022bc <LCD_WriteData>

	//VCM CONTROL
	LCD_WriteCommand(0xC5);
 8001e82:	20c5      	movs	r0, #197	; 0xc5
 8001e84:	f000 f9ec 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x3E);
 8001e88:	203e      	movs	r0, #62	; 0x3e
 8001e8a:	f000 fa17 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x28);
 8001e8e:	2028      	movs	r0, #40	; 0x28
 8001e90:	f000 fa14 	bl	80022bc <LCD_WriteData>

	//VCM CONTROL 2
	LCD_WriteCommand(0xC7);
 8001e94:	20c7      	movs	r0, #199	; 0xc7
 8001e96:	f000 f9e3 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x86);
 8001e9a:	2086      	movs	r0, #134	; 0x86
 8001e9c:	f000 fa0e 	bl	80022bc <LCD_WriteData>

	//MEMORY ACCESS CONTROL
	LCD_WriteCommand(0x36);
 8001ea0:	2036      	movs	r0, #54	; 0x36
 8001ea2:	f000 f9dd 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x48);
 8001ea6:	2048      	movs	r0, #72	; 0x48
 8001ea8:	f000 fa08 	bl	80022bc <LCD_WriteData>

	//PIXEL FORMAT
	LCD_WriteCommand(0x3A);
 8001eac:	203a      	movs	r0, #58	; 0x3a
 8001eae:	f000 f9d7 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x55);
 8001eb2:	2055      	movs	r0, #85	; 0x55
 8001eb4:	f000 fa02 	bl	80022bc <LCD_WriteData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	LCD_WriteCommand(0xB1);
 8001eb8:	20b1      	movs	r0, #177	; 0xb1
 8001eba:	f000 f9d1 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f000 f9fc 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x18);
 8001ec4:	2018      	movs	r0, #24
 8001ec6:	f000 f9f9 	bl	80022bc <LCD_WriteData>

	//DISPLAY FUNCTION CONTROL
	LCD_WriteCommand(0xB6);
 8001eca:	20b6      	movs	r0, #182	; 0xb6
 8001ecc:	f000 f9c8 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x08);
 8001ed0:	2008      	movs	r0, #8
 8001ed2:	f000 f9f3 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x82);
 8001ed6:	2082      	movs	r0, #130	; 0x82
 8001ed8:	f000 f9f0 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x27);
 8001edc:	2027      	movs	r0, #39	; 0x27
 8001ede:	f000 f9ed 	bl	80022bc <LCD_WriteData>

	//3GAMMA FUNCTION DISABLE
	LCD_WriteCommand(0xF2);
 8001ee2:	20f2      	movs	r0, #242	; 0xf2
 8001ee4:	f000 f9bc 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001ee8:	2000      	movs	r0, #0
 8001eea:	f000 f9e7 	bl	80022bc <LCD_WriteData>

	//GAMMA CURVE SELECTED
	LCD_WriteCommand(0x26);
 8001eee:	2026      	movs	r0, #38	; 0x26
 8001ef0:	f000 f9b6 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f000 f9e1 	bl	80022bc <LCD_WriteData>

	//POSITIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE0);
 8001efa:	20e0      	movs	r0, #224	; 0xe0
 8001efc:	f000 f9b0 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 8001f00:	200f      	movs	r0, #15
 8001f02:	f000 f9db 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x31);
 8001f06:	2031      	movs	r0, #49	; 0x31
 8001f08:	f000 f9d8 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x2B);
 8001f0c:	202b      	movs	r0, #43	; 0x2b
 8001f0e:	f000 f9d5 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0C);
 8001f12:	200c      	movs	r0, #12
 8001f14:	f000 f9d2 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001f18:	200e      	movs	r0, #14
 8001f1a:	f000 f9cf 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x08);
 8001f1e:	2008      	movs	r0, #8
 8001f20:	f000 f9cc 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x4E);
 8001f24:	204e      	movs	r0, #78	; 0x4e
 8001f26:	f000 f9c9 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xF1);
 8001f2a:	20f1      	movs	r0, #241	; 0xf1
 8001f2c:	f000 f9c6 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x37);
 8001f30:	2037      	movs	r0, #55	; 0x37
 8001f32:	f000 f9c3 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x07);
 8001f36:	2007      	movs	r0, #7
 8001f38:	f000 f9c0 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x10);
 8001f3c:	2010      	movs	r0, #16
 8001f3e:	f000 f9bd 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x03);
 8001f42:	2003      	movs	r0, #3
 8001f44:	f000 f9ba 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001f48:	200e      	movs	r0, #14
 8001f4a:	f000 f9b7 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x09);
 8001f4e:	2009      	movs	r0, #9
 8001f50:	f000 f9b4 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8001f54:	2000      	movs	r0, #0
 8001f56:	f000 f9b1 	bl	80022bc <LCD_WriteData>

	//NEGATIVE GAMMA CORRECTION
	LCD_WriteCommand(0xE1);
 8001f5a:	20e1      	movs	r0, #225	; 0xe1
 8001f5c:	f000 f980 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001f60:	2000      	movs	r0, #0
 8001f62:	f000 f9ab 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0E);
 8001f66:	200e      	movs	r0, #14
 8001f68:	f000 f9a8 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x14);
 8001f6c:	2014      	movs	r0, #20
 8001f6e:	f000 f9a5 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x03);
 8001f72:	2003      	movs	r0, #3
 8001f74:	f000 f9a2 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x11);
 8001f78:	2011      	movs	r0, #17
 8001f7a:	f000 f99f 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x07);
 8001f7e:	2007      	movs	r0, #7
 8001f80:	f000 f99c 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x31);
 8001f84:	2031      	movs	r0, #49	; 0x31
 8001f86:	f000 f999 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001f8a:	20c1      	movs	r0, #193	; 0xc1
 8001f8c:	f000 f996 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x48);
 8001f90:	2048      	movs	r0, #72	; 0x48
 8001f92:	f000 f993 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x08);
 8001f96:	2008      	movs	r0, #8
 8001f98:	f000 f990 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001f9c:	200f      	movs	r0, #15
 8001f9e:	f000 f98d 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0C);
 8001fa2:	200c      	movs	r0, #12
 8001fa4:	f000 f98a 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x31);
 8001fa8:	2031      	movs	r0, #49	; 0x31
 8001faa:	f000 f987 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x36);
 8001fae:	2036      	movs	r0, #54	; 0x36
 8001fb0:	f000 f984 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0F);
 8001fb4:	200f      	movs	r0, #15
 8001fb6:	f000 f981 	bl	80022bc <LCD_WriteData>

	//EXIT SLEEP
	LCD_WriteCommand(0x11);
 8001fba:	2011      	movs	r0, #17
 8001fbc:	f000 f950 	bl	8002260 <LCD_WriteCommand>
	HAL_Delay(120);
 8001fc0:	2078      	movs	r0, #120	; 0x78
 8001fc2:	f001 fbc1 	bl	8003748 <HAL_Delay>

	//TURN ON DISPLAY
	LCD_WriteCommand(0x29);
 8001fc6:	2029      	movs	r0, #41	; 0x29
 8001fc8:	f000 f94a 	bl	8002260 <LCD_WriteCommand>
}
 8001fcc:	bf00      	nop
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <LCD_DispInit_Ltdc>:

void LCD_DispInit_Ltdc() {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
	LCD_WriteCommand(0xCA);
 8001fd4:	20ca      	movs	r0, #202	; 0xca
 8001fd6:	f000 f943 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0xC3);
 8001fda:	20c3      	movs	r0, #195	; 0xc3
 8001fdc:	f000 f96e 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x08);
 8001fe0:	2008      	movs	r0, #8
 8001fe2:	f000 f96b 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x50);
 8001fe6:	2050      	movs	r0, #80	; 0x50
 8001fe8:	f000 f968 	bl	80022bc <LCD_WriteData>

	// LCD_POWERB
	LCD_WriteCommand(LCD_POWERB);
 8001fec:	20cf      	movs	r0, #207	; 0xcf
 8001fee:	f000 f937 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	f000 f962 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xC1);
 8001ff8:	20c1      	movs	r0, #193	; 0xc1
 8001ffa:	f000 f95f 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x30);
 8001ffe:	2030      	movs	r0, #48	; 0x30
 8002000:	f000 f95c 	bl	80022bc <LCD_WriteData>

	// LCD_POWER_SEQ
	LCD_WriteCommand(LCD_POWER_SEQ);
 8002004:	20ed      	movs	r0, #237	; 0xed
 8002006:	f000 f92b 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x64);
 800200a:	2064      	movs	r0, #100	; 0x64
 800200c:	f000 f956 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x03);
 8002010:	2003      	movs	r0, #3
 8002012:	f000 f953 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x12);
 8002016:	2012      	movs	r0, #18
 8002018:	f000 f950 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x81);
 800201c:	2081      	movs	r0, #129	; 0x81
 800201e:	f000 f94d 	bl	80022bc <LCD_WriteData>

	// LCD_DTCA
	LCD_WriteCommand(LCD_DTCA);
 8002022:	20e8      	movs	r0, #232	; 0xe8
 8002024:	f000 f91c 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x85);
 8002028:	2085      	movs	r0, #133	; 0x85
 800202a:	f000 f947 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 800202e:	2000      	movs	r0, #0
 8002030:	f000 f944 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x78);
 8002034:	2078      	movs	r0, #120	; 0x78
 8002036:	f000 f941 	bl	80022bc <LCD_WriteData>

	// LCD_POWERA
	LCD_WriteCommand(LCD_POWERA);
 800203a:	20cb      	movs	r0, #203	; 0xcb
 800203c:	f000 f910 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x39);
 8002040:	2039      	movs	r0, #57	; 0x39
 8002042:	f000 f93b 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x2C);
 8002046:	202c      	movs	r0, #44	; 0x2c
 8002048:	f000 f938 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 800204c:	2000      	movs	r0, #0
 800204e:	f000 f935 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x34);
 8002052:	2034      	movs	r0, #52	; 0x34
 8002054:	f000 f932 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x02);
 8002058:	2002      	movs	r0, #2
 800205a:	f000 f92f 	bl	80022bc <LCD_WriteData>

	// LCD_RPC
	LCD_WriteCommand(LCD_PRC);
 800205e:	20f7      	movs	r0, #247	; 0xf7
 8002060:	f000 f8fe 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x20);
 8002064:	2020      	movs	r0, #32
 8002066:	f000 f929 	bl	80022bc <LCD_WriteData>

	// LCD_DTCB
	LCD_WriteCommand(LCD_DTCB);
 800206a:	20ea      	movs	r0, #234	; 0xea
 800206c:	f000 f8f8 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002070:	2000      	movs	r0, #0
 8002072:	f000 f923 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8002076:	2000      	movs	r0, #0
 8002078:	f000 f920 	bl	80022bc <LCD_WriteData>

	// LCD_FRMCTR1
	LCD_WriteCommand(LCD_FRMCTR1);
 800207c:	20b1      	movs	r0, #177	; 0xb1
 800207e:	f000 f8ef 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 8002082:	2000      	movs	r0, #0
 8002084:	f000 f91a 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x1B);
 8002088:	201b      	movs	r0, #27
 800208a:	f000 f917 	bl	80022bc <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 800208e:	20b6      	movs	r0, #182	; 0xb6
 8002090:	f000 f8e6 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002094:	200a      	movs	r0, #10
 8002096:	f000 f911 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xA2);
 800209a:	20a2      	movs	r0, #162	; 0xa2
 800209c:	f000 f90e 	bl	80022bc <LCD_WriteData>

	// LCD_POWER1
	LCD_WriteCommand(LCD_POWER1);
 80020a0:	20c0      	movs	r0, #192	; 0xc0
 80020a2:	f000 f8dd 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80020a6:	2010      	movs	r0, #16
 80020a8:	f000 f908 	bl	80022bc <LCD_WriteData>
	LCD_WriteCommand(LCD_POWER2);
 80020ac:	20c1      	movs	r0, #193	; 0xc1
 80020ae:	f000 f8d7 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x10);
 80020b2:	2010      	movs	r0, #16
 80020b4:	f000 f902 	bl	80022bc <LCD_WriteData>

	// LCD_VCOM
	LCD_WriteCommand(LCD_VCOM1);
 80020b8:	20c5      	movs	r0, #197	; 0xc5
 80020ba:	f000 f8d1 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x45);
 80020be:	2045      	movs	r0, #69	; 0x45
 80020c0:	f000 f8fc 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x15);
 80020c4:	2015      	movs	r0, #21
 80020c6:	f000 f8f9 	bl	80022bc <LCD_WriteData>
	LCD_WriteCommand(LCD_VCOM2);
 80020ca:	20c7      	movs	r0, #199	; 0xc7
 80020cc:	f000 f8c8 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x90);
 80020d0:	2090      	movs	r0, #144	; 0x90
 80020d2:	f000 f8f3 	bl	80022bc <LCD_WriteData>

	// LCD_MAC
	LCD_WriteCommand(LCD_MAC);
 80020d6:	2036      	movs	r0, #54	; 0x36
 80020d8:	f000 f8c2 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0xC8);
 80020dc:	20c8      	movs	r0, #200	; 0xc8
 80020de:	f000 f8ed 	bl	80022bc <LCD_WriteData>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_3GAMMA_EN);
 80020e2:	20f2      	movs	r0, #242	; 0xf2
 80020e4:	f000 f8bc 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80020e8:	2000      	movs	r0, #0
 80020ea:	f000 f8e7 	bl	80022bc <LCD_WriteData>

	// LCD_RGB_INTERFACE
	LCD_WriteCommand(LCD_RGB_INTERFACE);
 80020ee:	20b0      	movs	r0, #176	; 0xb0
 80020f0:	f000 f8b6 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0xC2);
 80020f4:	20c2      	movs	r0, #194	; 0xc2
 80020f6:	f000 f8e1 	bl	80022bc <LCD_WriteData>

	// LCD_DFC
	LCD_WriteCommand(LCD_DFC);
 80020fa:	20b6      	movs	r0, #182	; 0xb6
 80020fc:	f000 f8b0 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x0A);
 8002100:	200a      	movs	r0, #10
 8002102:	f000 f8db 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xA7);
 8002106:	20a7      	movs	r0, #167	; 0xa7
 8002108:	f000 f8d8 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x27);
 800210c:	2027      	movs	r0, #39	; 0x27
 800210e:	f000 f8d5 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x04);
 8002112:	2004      	movs	r0, #4
 8002114:	f000 f8d2 	bl	80022bc <LCD_WriteData>

	// COLUMN_ADDR
	LCD_WriteCommand(LCD_COLUMN_ADDR);
 8002118:	202a      	movs	r0, #42	; 0x2a
 800211a:	f000 f8a1 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800211e:	2000      	movs	r0, #0
 8002120:	f000 f8cc 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8002124:	2000      	movs	r0, #0
 8002126:	f000 f8c9 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f8c6 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0xEF);
 8002130:	20ef      	movs	r0, #239	; 0xef
 8002132:	f000 f8c3 	bl	80022bc <LCD_WriteData>

	// PAGE_ADDR
	LCD_WriteCommand(LCD_PAGE_ADDR);
 8002136:	202b      	movs	r0, #43	; 0x2b
 8002138:	f000 f892 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 800213c:	2000      	movs	r0, #0
 800213e:	f000 f8bd 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8002142:	2000      	movs	r0, #0
 8002144:	f000 f8ba 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x01);
 8002148:	2001      	movs	r0, #1
 800214a:	f000 f8b7 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x3F);
 800214e:	203f      	movs	r0, #63	; 0x3f
 8002150:	f000 f8b4 	bl	80022bc <LCD_WriteData>

	// INERFACE
	LCD_WriteCommand(LCD_INTERFACE);
 8002154:	20f6      	movs	r0, #246	; 0xf6
 8002156:	f000 f883 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800215a:	2001      	movs	r0, #1
 800215c:	f000 f8ae 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 8002160:	2000      	movs	r0, #0
 8002162:	f000 f8ab 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x06);
 8002166:	2006      	movs	r0, #6
 8002168:	f000 f8a8 	bl	80022bc <LCD_WriteData>

	// LCD_GRAM
	LCD_WriteCommand(LCD_GRAM);
 800216c:	202c      	movs	r0, #44	; 0x2c
 800216e:	f000 f877 	bl	8002260 <LCD_WriteCommand>
	HAL_Delay(200);
 8002172:	20c8      	movs	r0, #200	; 0xc8
 8002174:	f001 fae8 	bl	8003748 <HAL_Delay>

	// LCD_GAMMA
	LCD_WriteCommand(LCD_GAMMA);
 8002178:	2026      	movs	r0, #38	; 0x26
 800217a:	f000 f871 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x01);
 800217e:	2001      	movs	r0, #1
 8002180:	f000 f89c 	bl	80022bc <LCD_WriteData>

	// LCD_PGAMMA
	LCD_WriteCommand(LCD_PGAMMA);
 8002184:	20e0      	movs	r0, #224	; 0xe0
 8002186:	f000 f86b 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x0F);
 800218a:	200f      	movs	r0, #15
 800218c:	f000 f896 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x29);
 8002190:	2029      	movs	r0, #41	; 0x29
 8002192:	f000 f893 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x24);
 8002196:	2024      	movs	r0, #36	; 0x24
 8002198:	f000 f890 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0C);
 800219c:	200c      	movs	r0, #12
 800219e:	f000 f88d 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0E);
 80021a2:	200e      	movs	r0, #14
 80021a4:	f000 f88a 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x09);
 80021a8:	2009      	movs	r0, #9
 80021aa:	f000 f887 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x4E);
 80021ae:	204e      	movs	r0, #78	; 0x4e
 80021b0:	f000 f884 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x78);
 80021b4:	2078      	movs	r0, #120	; 0x78
 80021b6:	f000 f881 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x3C);
 80021ba:	203c      	movs	r0, #60	; 0x3c
 80021bc:	f000 f87e 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x09);
 80021c0:	2009      	movs	r0, #9
 80021c2:	f000 f87b 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x13);
 80021c6:	2013      	movs	r0, #19
 80021c8:	f000 f878 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x05);
 80021cc:	2005      	movs	r0, #5
 80021ce:	f000 f875 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x17);
 80021d2:	2017      	movs	r0, #23
 80021d4:	f000 f872 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x11);
 80021d8:	2011      	movs	r0, #17
 80021da:	f000 f86f 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x00);
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 f86c 	bl	80022bc <LCD_WriteData>
	LCD_WriteCommand(LCD_NGAMMA);
 80021e4:	20e1      	movs	r0, #225	; 0xe1
 80021e6:	f000 f83b 	bl	8002260 <LCD_WriteCommand>
	LCD_WriteData(0x00);
 80021ea:	2000      	movs	r0, #0
 80021ec:	f000 f866 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x16);
 80021f0:	2016      	movs	r0, #22
 80021f2:	f000 f863 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x1B);
 80021f6:	201b      	movs	r0, #27
 80021f8:	f000 f860 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x04);
 80021fc:	2004      	movs	r0, #4
 80021fe:	f000 f85d 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x11);
 8002202:	2011      	movs	r0, #17
 8002204:	f000 f85a 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x07);
 8002208:	2007      	movs	r0, #7
 800220a:	f000 f857 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x31);
 800220e:	2031      	movs	r0, #49	; 0x31
 8002210:	f000 f854 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x33);
 8002214:	2033      	movs	r0, #51	; 0x33
 8002216:	f000 f851 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x42);
 800221a:	2042      	movs	r0, #66	; 0x42
 800221c:	f000 f84e 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x05);
 8002220:	2005      	movs	r0, #5
 8002222:	f000 f84b 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0C);
 8002226:	200c      	movs	r0, #12
 8002228:	f000 f848 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0A);
 800222c:	200a      	movs	r0, #10
 800222e:	f000 f845 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x28);
 8002232:	2028      	movs	r0, #40	; 0x28
 8002234:	f000 f842 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x2F);
 8002238:	202f      	movs	r0, #47	; 0x2f
 800223a:	f000 f83f 	bl	80022bc <LCD_WriteData>
	LCD_WriteData(0x0F);
 800223e:	200f      	movs	r0, #15
 8002240:	f000 f83c 	bl	80022bc <LCD_WriteData>

	// LCD_SLEEP_OUT
	LCD_WriteCommand(LCD_SLEEP_OUT);
 8002244:	2011      	movs	r0, #17
 8002246:	f000 f80b 	bl	8002260 <LCD_WriteCommand>
	HAL_Delay(200);
 800224a:	20c8      	movs	r0, #200	; 0xc8
 800224c:	f001 fa7c 	bl	8003748 <HAL_Delay>

	// LCD_DISP_ON
	LCD_WriteCommand(LCD_DISPLAY_ON);
 8002250:	2029      	movs	r0, #41	; 0x29
 8002252:	f000 f805 	bl	8002260 <LCD_WriteCommand>

	// LCD_WRITE_RAM
	LCD_WriteCommand(LCD_GRAM);
 8002256:	202c      	movs	r0, #44	; 0x2c
 8002258:	f000 f802 	bl	8002260 <LCD_WriteCommand>
}
 800225c:	bf00      	nop
 800225e:	bd80      	pop	{r7, pc}

08002260 <LCD_WriteCommand>:

void LCD_ModeSelect(DcMode mode){
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, mode);
}

void LCD_WriteCommand(uint8_t data) {
 8002260:	b580      	push	{r7, lr}
 8002262:	b082      	sub	sp, #8
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 800226a:	2200      	movs	r2, #0
 800226c:	2104      	movs	r1, #4
 800226e:	4810      	ldr	r0, [pc, #64]	; (80022b0 <LCD_WriteCommand+0x50>)
 8002270:	f001 fd6e 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_RESET);
 8002274:	2200      	movs	r2, #0
 8002276:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800227a:	480e      	ldr	r0, [pc, #56]	; (80022b4 <LCD_WriteCommand+0x54>)
 800227c:	f001 fd68 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 1);
 8002280:	1df9      	adds	r1, r7, #7
 8002282:	2301      	movs	r3, #1
 8002284:	2201      	movs	r2, #1
 8002286:	480c      	ldr	r0, [pc, #48]	; (80022b8 <LCD_WriteCommand+0x58>)
 8002288:	f003 f954 	bl	8005534 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 800228c:	bf00      	nop
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <LCD_WriteCommand+0x58>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	2b00      	cmp	r3, #0
 800229a:	d0f8      	beq.n	800228e <LCD_WriteCommand+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 800229c:	2201      	movs	r2, #1
 800229e:	2104      	movs	r1, #4
 80022a0:	4803      	ldr	r0, [pc, #12]	; (80022b0 <LCD_WriteCommand+0x50>)
 80022a2:	f001 fd55 	bl	8003d50 <HAL_GPIO_WritePin>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	200137a8 	.word	0x200137a8

080022bc <LCD_WriteData>:

void LCD_WriteData(uint8_t data) {
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_RESET);
 80022c6:	2200      	movs	r2, #0
 80022c8:	2104      	movs	r1, #4
 80022ca:	4810      	ldr	r0, [pc, #64]	; (800230c <LCD_WriteData+0x50>)
 80022cc:	f001 fd40 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_DCX_GPIO, LCD_DCX_PIN, GPIO_PIN_SET);
 80022d0:	2201      	movs	r2, #1
 80022d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022d6:	480e      	ldr	r0, [pc, #56]	; (8002310 <LCD_WriteData+0x54>)
 80022d8:	f001 fd3a 	bl	8003d50 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &data, 1, 10);
 80022dc:	1df9      	adds	r1, r7, #7
 80022de:	230a      	movs	r3, #10
 80022e0:	2201      	movs	r2, #1
 80022e2:	480c      	ldr	r0, [pc, #48]	; (8002314 <LCD_WriteData+0x58>)
 80022e4:	f003 f926 	bl	8005534 <HAL_SPI_Transmit>
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
 80022e8:	bf00      	nop
 80022ea:	4b0a      	ldr	r3, [pc, #40]	; (8002314 <LCD_WriteData+0x58>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0302 	and.w	r3, r3, #2
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d0f8      	beq.n	80022ea <LCD_WriteData+0x2e>
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
 80022f8:	2201      	movs	r2, #1
 80022fa:	2104      	movs	r1, #4
 80022fc:	4803      	ldr	r0, [pc, #12]	; (800230c <LCD_WriteData+0x50>)
 80022fe:	f001 fd27 	bl	8003d50 <HAL_GPIO_WritePin>
}
 8002302:	bf00      	nop
 8002304:	3708      	adds	r7, #8
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	200137a8 	.word	0x200137a8

08002318 <LCD_WriteGRAM>:
	HAL_SPI_Transmit(&hspi5, data, 2, 10);
	while(!((hspi5.Instance->SR) & SPI_SR_TXE));
	HAL_GPIO_WritePin(LCD_NCS_GPIO, LCD_NCS_PIN, GPIO_PIN_SET);
}

void LCD_WriteGRAM(uint8_t data, uint32_t addr) {
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	6039      	str	r1, [r7, #0]
 8002322:	71fb      	strb	r3, [r7, #7]
	if (addr >= LCD_WIDTH * LCD_HEIGHT)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 800232a:	d205      	bcs.n	8002338 <LCD_WriteGRAM+0x20>
		return;
	GRAM[addr] = data;
 800232c:	4a05      	ldr	r2, [pc, #20]	; (8002344 <LCD_WriteGRAM+0x2c>)
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	4413      	add	r3, r2
 8002332:	79fa      	ldrb	r2, [r7, #7]
 8002334:	701a      	strb	r2, [r3, #0]
 8002336:	e000      	b.n	800233a <LCD_WriteGRAM+0x22>
		return;
 8002338:	bf00      	nop
}
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	20000004 	.word	0x20000004

08002348 <LCD_ClearScreenLtdc>:

void LCD_ClearScreenLtdc(uint8_t c) {
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	4603      	mov	r3, r0
 8002350:	71fb      	strb	r3, [r7, #7]
	memset(GRAM, c, LCD_WIDTH * LCD_HEIGHT);
 8002352:	79fb      	ldrb	r3, [r7, #7]
 8002354:	f44f 3296 	mov.w	r2, #76800	; 0x12c00
 8002358:	4619      	mov	r1, r3
 800235a:	4803      	ldr	r0, [pc, #12]	; (8002368 <LCD_ClearScreenLtdc+0x20>)
 800235c:	f004 fca6 	bl	8006cac <memset>
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20000004 	.word	0x20000004

0800236c <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;


void MX_LTDC_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af00      	add	r7, sp, #0
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002372:	1d3b      	adds	r3, r7, #4
 8002374:	2234      	movs	r2, #52	; 0x34
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f004 fc97 	bl	8006cac <memset>

  hltdc.Instance = LTDC;
 800237e:	4b39      	ldr	r3, [pc, #228]	; (8002464 <MX_LTDC_Init+0xf8>)
 8002380:	4a39      	ldr	r2, [pc, #228]	; (8002468 <MX_LTDC_Init+0xfc>)
 8002382:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002384:	4b37      	ldr	r3, [pc, #220]	; (8002464 <MX_LTDC_Init+0xf8>)
 8002386:	2200      	movs	r2, #0
 8002388:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800238a:	4b36      	ldr	r3, [pc, #216]	; (8002464 <MX_LTDC_Init+0xf8>)
 800238c:	2200      	movs	r2, #0
 800238e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002390:	4b34      	ldr	r3, [pc, #208]	; (8002464 <MX_LTDC_Init+0xf8>)
 8002392:	2200      	movs	r2, #0
 8002394:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002396:	4b33      	ldr	r3, [pc, #204]	; (8002464 <MX_LTDC_Init+0xf8>)
 8002398:	2200      	movs	r2, #0
 800239a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800239c:	4b31      	ldr	r3, [pc, #196]	; (8002464 <MX_LTDC_Init+0xf8>)
 800239e:	2209      	movs	r2, #9
 80023a0:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80023a2:	4b30      	ldr	r3, [pc, #192]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80023a8:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023aa:	221d      	movs	r2, #29
 80023ac:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80023ae:	4b2d      	ldr	r3, [pc, #180]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023b0:	2203      	movs	r2, #3
 80023b2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80023b4:	4b2b      	ldr	r3, [pc, #172]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023b6:	f240 120d 	movw	r2, #269	; 0x10d
 80023ba:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80023bc:	4b29      	ldr	r3, [pc, #164]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023be:	f240 1243 	movw	r2, #323	; 0x143
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 80023c4:	4b27      	ldr	r3, [pc, #156]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023c6:	f240 1217 	movw	r2, #279	; 0x117
 80023ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 80023cc:	4b25      	ldr	r3, [pc, #148]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023ce:	f240 1247 	movw	r2, #327	; 0x147
 80023d2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80023dc:	4b21      	ldr	r3, [pc, #132]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80023e4:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80023ec:	481d      	ldr	r0, [pc, #116]	; (8002464 <MX_LTDC_Init+0xf8>)
 80023ee:	f001 fced 	bl	8003dcc <HAL_LTDC_Init>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80023f8:	f000 faea 	bl	80029d0 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80023fc:	2300      	movs	r3, #0
 80023fe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 239;
 8002400:	23ef      	movs	r3, #239	; 0xef
 8002402:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8002404:	2300      	movs	r3, #0
 8002406:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 319;
 8002408:	f240 133f 	movw	r3, #319	; 0x13f
 800240c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_L8;
 800240e:	2305      	movs	r3, #5
 8002410:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 0xff;
 8002412:	23ff      	movs	r3, #255	; 0xff
 8002414:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0x00;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800241a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800241e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002420:	2307      	movs	r3, #7
 8002422:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0;
 8002424:	2300      	movs	r3, #0
 8002426:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8002428:	23f0      	movs	r3, #240	; 0xf0
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 800242c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002430:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8002432:	2300      	movs	r3, #0
 8002434:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8002438:	2300      	movs	r3, #0
 800243a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2200      	movs	r2, #0
 8002448:	4619      	mov	r1, r3
 800244a:	4806      	ldr	r0, [pc, #24]	; (8002464 <MX_LTDC_Init+0xf8>)
 800244c:	f001 fd92 	bl	8003f74 <HAL_LTDC_ConfigLayer>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_LTDC_Init+0xee>
  {
    Error_Handler();
 8002456:	f000 fabb 	bl	80029d0 <Error_Handler>
  }

}
 800245a:	bf00      	nop
 800245c:	3738      	adds	r7, #56	; 0x38
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20012c34 	.word	0x20012c34
 8002468:	40016800 	.word	0x40016800

0800246c <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b090      	sub	sp, #64	; 0x40
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a75      	ldr	r2, [pc, #468]	; (8002660 <HAL_LTDC_MspInit+0x1f4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	f040 80e4 	bne.w	8002658 <HAL_LTDC_MspInit+0x1ec>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* LTDC clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8002490:	2300      	movs	r3, #0
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	4b73      	ldr	r3, [pc, #460]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002498:	4a72      	ldr	r2, [pc, #456]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800249a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249e:	6453      	str	r3, [r2, #68]	; 0x44
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
 80024b0:	4b6c      	ldr	r3, [pc, #432]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4a6b      	ldr	r2, [pc, #428]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024b6:	f043 0320 	orr.w	r3, r3, #32
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
 80024bc:	4b69      	ldr	r3, [pc, #420]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c0:	f003 0320 	and.w	r3, r3, #32
 80024c4:	627b      	str	r3, [r7, #36]	; 0x24
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	623b      	str	r3, [r7, #32]
 80024cc:	4b65      	ldr	r3, [pc, #404]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a64      	ldr	r2, [pc, #400]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b62      	ldr	r3, [pc, #392]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	623b      	str	r3, [r7, #32]
 80024e2:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024e4:	2300      	movs	r3, #0
 80024e6:	61fb      	str	r3, [r7, #28]
 80024e8:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ec:	4a5d      	ldr	r2, [pc, #372]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024ee:	f043 0302 	orr.w	r3, r3, #2
 80024f2:	6313      	str	r3, [r2, #48]	; 0x30
 80024f4:	4b5b      	ldr	r3, [pc, #364]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	4b57      	ldr	r3, [pc, #348]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002508:	4a56      	ldr	r2, [pc, #344]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800250a:	f043 0310 	orr.w	r3, r3, #16
 800250e:	6313      	str	r3, [r2, #48]	; 0x30
 8002510:	4b54      	ldr	r3, [pc, #336]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	61bb      	str	r3, [r7, #24]
 800251a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	617b      	str	r3, [r7, #20]
 8002520:	4b50      	ldr	r3, [pc, #320]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4a4f      	ldr	r2, [pc, #316]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002526:	f043 0308 	orr.w	r3, r3, #8
 800252a:	6313      	str	r3, [r2, #48]	; 0x30
 800252c:	4b4d      	ldr	r3, [pc, #308]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002538:	2300      	movs	r3, #0
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	4b49      	ldr	r3, [pc, #292]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800253e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002540:	4a48      	ldr	r2, [pc, #288]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002542:	f043 0304 	orr.w	r3, r3, #4
 8002546:	6313      	str	r3, [r2, #48]	; 0x30
 8002548:	4b46      	ldr	r3, [pc, #280]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800254a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002554:	2300      	movs	r3, #0
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	4b42      	ldr	r3, [pc, #264]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800255a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255c:	4a41      	ldr	r2, [pc, #260]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 800255e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002562:	6313      	str	r3, [r2, #48]	; 0x30
 8002564:	4b3f      	ldr	r3, [pc, #252]	; (8002664 <HAL_LTDC_MspInit+0x1f8>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
    PA12     ------> LTDC_R5
    PD3     ------> LTDC_G7
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002576:	2302      	movs	r3, #2
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002582:	230e      	movs	r3, #14
 8002584:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002586:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800258a:	4619      	mov	r1, r3
 800258c:	4836      	ldr	r0, [pc, #216]	; (8002668 <HAL_LTDC_MspInit+0x1fc>)
 800258e:	f001 fa33 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11 
 8002592:	f641 0358 	movw	r3, #6232	; 0x1858
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a0:	2300      	movs	r3, #0
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025a4:	230e      	movs	r3, #14
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ac:	4619      	mov	r1, r3
 80025ae:	482f      	ldr	r0, [pc, #188]	; (800266c <HAL_LTDC_MspInit+0x200>)
 80025b0:	f001 fa22 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025b4:	2303      	movs	r3, #3
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b8:	2302      	movs	r3, #2
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80025c4:	2309      	movs	r3, #9
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025cc:	4619      	mov	r1, r3
 80025ce:	4828      	ldr	r0, [pc, #160]	; (8002670 <HAL_LTDC_MspInit+0x204>)
 80025d0:	f001 fa12 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_11;
 80025d4:	f44f 53e6 	mov.w	r3, #7360	; 0x1cc0
 80025d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025da:	2302      	movs	r3, #2
 80025dc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025de:	2300      	movs	r3, #0
 80025e0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e2:	2300      	movs	r3, #0
 80025e4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80025e6:	230e      	movs	r3, #14
 80025e8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025ee:	4619      	mov	r1, r3
 80025f0:	4820      	ldr	r0, [pc, #128]	; (8002674 <HAL_LTDC_MspInit+0x208>)
 80025f2:	f001 fa01 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 80025f6:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002608:	230e      	movs	r3, #14
 800260a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002610:	4619      	mov	r1, r3
 8002612:	4817      	ldr	r0, [pc, #92]	; (8002670 <HAL_LTDC_MspInit+0x204>)
 8002614:	f001 f9f0 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002618:	2308      	movs	r3, #8
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800261c:	2302      	movs	r3, #2
 800261e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002620:	2300      	movs	r3, #0
 8002622:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	2300      	movs	r3, #0
 8002626:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002628:	230e      	movs	r3, #14
 800262a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800262c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002630:	4619      	mov	r1, r3
 8002632:	4811      	ldr	r0, [pc, #68]	; (8002678 <HAL_LTDC_MspInit+0x20c>)
 8002634:	f001 f9e0 	bl	80039f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002638:	23c0      	movs	r3, #192	; 0xc0
 800263a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263c:	2302      	movs	r3, #2
 800263e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002648:	230e      	movs	r3, #14
 800264a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800264c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002650:	4619      	mov	r1, r3
 8002652:	480a      	ldr	r0, [pc, #40]	; (800267c <HAL_LTDC_MspInit+0x210>)
 8002654:	f001 f9d0 	bl	80039f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8002658:	bf00      	nop
 800265a:	3740      	adds	r7, #64	; 0x40
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40016800 	.word	0x40016800
 8002664:	40023800 	.word	0x40023800
 8002668:	40021400 	.word	0x40021400
 800266c:	40020000 	.word	0x40020000
 8002670:	40020400 	.word	0x40020400
 8002674:	40021800 	.word	0x40021800
 8002678:	40020c00 	.word	0x40020c00
 800267c:	40020800 	.word	0x40020800

08002680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002684:	f000 ffee 	bl	8003664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002688:	f000 f836 	bl	80026f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800268c:	f000 f942 	bl	8002914 <MX_GPIO_Init>

  LCD_GpioInit();
 8002690:	f7ff fb2a 	bl	8001ce8 <LCD_GpioInit>
  LCD_LtdcInit();
 8002694:	f7ff fb76 	bl	8001d84 <LCD_LtdcInit>
  LCD_DispInit_Spi();
 8002698:	f7ff fb96 	bl	8001dc8 <LCD_DispInit_Spi>
  LCD_DispInit_Ltdc();
 800269c:	f7ff fc98 	bl	8001fd0 <LCD_DispInit_Ltdc>
  //initializeGPIONVIC();
  //InitialScreen();
  //MenuScreen();

  MX_TIM6_Init();
 80026a0:	f000 f8d8 	bl	8002854 <MX_TIM6_Init>
  MX_USART1_UART_Init();
 80026a4:	f000 f90c 	bl	80028c0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80026a8:	f000 f8ae 	bl	8002808 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(200);
 80026ac:	20c8      	movs	r0, #200	; 0xc8
 80026ae:	f001 f84b 	bl	8003748 <HAL_Delay>
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, SET);
 80026b2:	2201      	movs	r2, #1
 80026b4:	2102      	movs	r1, #2
 80026b6:	480c      	ldr	r0, [pc, #48]	; (80026e8 <main+0x68>)
 80026b8:	f001 fb4a 	bl	8003d50 <HAL_GPIO_WritePin>
  HAL_Delay(1000);
 80026bc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026c0:	f001 f842 	bl	8003748 <HAL_Delay>
  memset(buffer, 0, sizeof(buffer));
 80026c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80026c8:	2100      	movs	r1, #0
 80026ca:	4808      	ldr	r0, [pc, #32]	; (80026ec <main+0x6c>)
 80026cc:	f004 faee 	bl	8006cac <memset>
  HAL_TIM_Base_Start_IT(&htim6);
 80026d0:	4807      	ldr	r0, [pc, #28]	; (80026f0 <main+0x70>)
 80026d2:	f003 f91e 	bl	8005912 <HAL_TIM_Base_Start_IT>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80026d6:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <main+0x74>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <main+0x74>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0220 	orr.w	r2, r2, #32
 80026e4:	60da      	str	r2, [r3, #12]
  /* USER CODE END 2 */


  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80026e6:	e7fe      	b.n	80026e6 <main+0x66>
 80026e8:	40021400 	.word	0x40021400
 80026ec:	20013338 	.word	0x20013338
 80026f0:	20012d54 	.word	0x20012d54
 80026f4:	20012cf4 	.word	0x20012cf4

080026f8 <SystemClock_Config>:
 *
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b0a0      	sub	sp, #128	; 0x80
 80026fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80026fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002702:	2230      	movs	r2, #48	; 0x30
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f004 fad0 	bl	8006cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800270c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002710:	2200      	movs	r2, #0
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	609a      	str	r2, [r3, #8]
 8002718:	60da      	str	r2, [r3, #12]
 800271a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800271c:	f107 030c 	add.w	r3, r7, #12
 8002720:	2230      	movs	r2, #48	; 0x30
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f004 fac1 	bl	8006cac <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	4b34      	ldr	r3, [pc, #208]	; (8002800 <SystemClock_Config+0x108>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a33      	ldr	r2, [pc, #204]	; (8002800 <SystemClock_Config+0x108>)
 8002734:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
 800273a:	4b31      	ldr	r3, [pc, #196]	; (8002800 <SystemClock_Config+0x108>)
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002742:	60bb      	str	r3, [r7, #8]
 8002744:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002746:	2300      	movs	r3, #0
 8002748:	607b      	str	r3, [r7, #4]
 800274a:	4b2e      	ldr	r3, [pc, #184]	; (8002804 <SystemClock_Config+0x10c>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a2d      	ldr	r2, [pc, #180]	; (8002804 <SystemClock_Config+0x10c>)
 8002750:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	4b2b      	ldr	r3, [pc, #172]	; (8002804 <SystemClock_Config+0x10c>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800275e:	607b      	str	r3, [r7, #4]
 8002760:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8002762:	230a      	movs	r3, #10
 8002764:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002766:	2301      	movs	r3, #1
 8002768:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800276a:	2310      	movs	r3, #16
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800276e:	2301      	movs	r3, #1
 8002770:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002772:	2302      	movs	r3, #2
 8002774:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002776:	2300      	movs	r3, #0
 8002778:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800277a:	2308      	movs	r3, #8
 800277c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 800277e:	23b4      	movs	r3, #180	; 0xb4
 8002780:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002782:	2302      	movs	r3, #2
 8002784:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002786:	2304      	movs	r3, #4
 8002788:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800278a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800278e:	4618      	mov	r0, r3
 8002790:	f001 ff2e 	bl	80045f0 <HAL_RCC_OscConfig>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800279a:	f000 f919 	bl	80029d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800279e:	f001 fed7 	bl	8004550 <HAL_PWREx_EnableOverDrive>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d001      	beq.n	80027ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80027a8:	f000 f912 	bl	80029d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027ac:	230f      	movs	r3, #15
 80027ae:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027b0:	2302      	movs	r3, #2
 80027b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027b4:	2300      	movs	r3, #0
 80027b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80027b8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80027bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80027be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80027c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80027c8:	2105      	movs	r1, #5
 80027ca:	4618      	mov	r0, r3
 80027cc:	f002 f980 	bl	8004ad0 <HAL_RCC_ClockConfig>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80027d6:	f000 f8fb 	bl	80029d0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80027da:	2320      	movs	r3, #32
 80027dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80027de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027e2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027e4:	f107 030c 	add.w	r3, r7, #12
 80027e8:	4618      	mov	r0, r3
 80027ea:	f002 fb41 	bl	8004e70 <HAL_RCCEx_PeriphCLKConfig>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <SystemClock_Config+0x100>
  {
    Error_Handler();
 80027f4:	f000 f8ec 	bl	80029d0 <Error_Handler>
  }
}
 80027f8:	bf00      	nop
 80027fa:	3780      	adds	r7, #128	; 0x80
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	40023800 	.word	0x40023800
 8002804:	40007000 	.word	0x40007000

08002808 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <MX_RTC_Init+0x44>)
 800280e:	4a10      	ldr	r2, [pc, #64]	; (8002850 <MX_RTC_Init+0x48>)
 8002810:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <MX_RTC_Init+0x44>)
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002818:	4b0c      	ldr	r3, [pc, #48]	; (800284c <MX_RTC_Init+0x44>)
 800281a:	227f      	movs	r2, #127	; 0x7f
 800281c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800281e:	4b0b      	ldr	r3, [pc, #44]	; (800284c <MX_RTC_Init+0x44>)
 8002820:	22ff      	movs	r2, #255	; 0xff
 8002822:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002824:	4b09      	ldr	r3, [pc, #36]	; (800284c <MX_RTC_Init+0x44>)
 8002826:	2200      	movs	r2, #0
 8002828:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800282a:	4b08      	ldr	r3, [pc, #32]	; (800284c <MX_RTC_Init+0x44>)
 800282c:	2200      	movs	r2, #0
 800282e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002830:	4b06      	ldr	r3, [pc, #24]	; (800284c <MX_RTC_Init+0x44>)
 8002832:	2200      	movs	r2, #0
 8002834:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002836:	4805      	ldr	r0, [pc, #20]	; (800284c <MX_RTC_Init+0x44>)
 8002838:	f002 fcd8 	bl	80051ec <HAL_RTC_Init>
 800283c:	4603      	mov	r3, r0
 800283e:	2b00      	cmp	r3, #0
 8002840:	d001      	beq.n	8002846 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8002842:	f000 f8c5 	bl	80029d0 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20012d34 	.word	0x20012d34
 8002850:	40002800 	.word	0x40002800

08002854 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800285a:	463b      	mov	r3, r7
 800285c:	2200      	movs	r2, #0
 800285e:	601a      	str	r2, [r3, #0]
 8002860:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002864:	4a15      	ldr	r2, [pc, #84]	; (80028bc <MX_TIM6_Init+0x68>)
 8002866:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 720;
 8002868:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <MX_TIM6_Init+0x64>)
 800286a:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 800286e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002870:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002872:	2200      	movs	r2, #0
 8002874:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1999;
 8002876:	4b10      	ldr	r3, [pc, #64]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002878:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800287c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800287e:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002880:	2200      	movs	r2, #0
 8002882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002884:	480c      	ldr	r0, [pc, #48]	; (80028b8 <MX_TIM6_Init+0x64>)
 8002886:	f003 f819 	bl	80058bc <HAL_TIM_Base_Init>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d001      	beq.n	8002894 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002890:	f000 f89e 	bl	80029d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800289c:	463b      	mov	r3, r7
 800289e:	4619      	mov	r1, r3
 80028a0:	4805      	ldr	r0, [pc, #20]	; (80028b8 <MX_TIM6_Init+0x64>)
 80028a2:	f003 fa35 	bl	8005d10 <HAL_TIMEx_MasterConfigSynchronization>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80028ac:	f000 f890 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20012d54 	.word	0x20012d54
 80028bc:	40001000 	.word	0x40001000

080028c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028c4:	4b11      	ldr	r3, [pc, #68]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <MX_USART1_UART_Init+0x50>)
 80028c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80028ca:	4b10      	ldr	r3, [pc, #64]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80028d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028d2:	4b0e      	ldr	r3, [pc, #56]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028da:	2200      	movs	r2, #0
 80028dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028e4:	4b09      	ldr	r3, [pc, #36]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028e6:	220c      	movs	r2, #12
 80028e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028ea:	4b08      	ldr	r3, [pc, #32]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028f6:	4805      	ldr	r0, [pc, #20]	; (800290c <MX_USART1_UART_Init+0x4c>)
 80028f8:	f003 fa9a 	bl	8005e30 <HAL_UART_Init>
 80028fc:	4603      	mov	r3, r0
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002902:	f000 f865 	bl	80029d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002906:	bf00      	nop
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	20012cf4 	.word	0x20012cf4
 8002910:	40011000 	.word	0x40011000

08002914 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	605a      	str	r2, [r3, #4]
 8002924:	609a      	str	r2, [r3, #8]
 8002926:	60da      	str	r2, [r3, #12]
 8002928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800292a:	2300      	movs	r3, #0
 800292c:	613b      	str	r3, [r7, #16]
 800292e:	4b26      	ldr	r3, [pc, #152]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	4a25      	ldr	r2, [pc, #148]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002934:	f043 0304 	orr.w	r3, r3, #4
 8002938:	6313      	str	r3, [r2, #48]	; 0x30
 800293a:	4b23      	ldr	r3, [pc, #140]	; (80029c8 <MX_GPIO_Init+0xb4>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	f003 0304 	and.w	r3, r3, #4
 8002942:	613b      	str	r3, [r7, #16]
 8002944:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	4b1f      	ldr	r3, [pc, #124]	; (80029c8 <MX_GPIO_Init+0xb4>)
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	4a1e      	ldr	r2, [pc, #120]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002950:	f043 0320 	orr.w	r3, r3, #32
 8002954:	6313      	str	r3, [r2, #48]	; 0x30
 8002956:	4b1c      	ldr	r3, [pc, #112]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295a:	f003 0320 	and.w	r3, r3, #32
 800295e:	60fb      	str	r3, [r7, #12]
 8002960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002962:	2300      	movs	r3, #0
 8002964:	60bb      	str	r3, [r7, #8]
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <MX_GPIO_Init+0xb4>)
 800296c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002970:	6313      	str	r3, [r2, #48]	; 0x30
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	2300      	movs	r3, #0
 8002980:	607b      	str	r3, [r7, #4]
 8002982:	4b11      	ldr	r3, [pc, #68]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	4a10      	ldr	r2, [pc, #64]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6313      	str	r3, [r2, #48]	; 0x30
 800298e:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <MX_GPIO_Init+0xb4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002992:	f003 0301 	and.w	r3, r3, #1
 8002996:	607b      	str	r3, [r7, #4]
 8002998:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BluetoothReset_GPIO_Port, BluetoothReset_Pin, GPIO_PIN_RESET);
 800299a:	2200      	movs	r2, #0
 800299c:	2102      	movs	r1, #2
 800299e:	480b      	ldr	r0, [pc, #44]	; (80029cc <MX_GPIO_Init+0xb8>)
 80029a0:	f001 f9d6 	bl	8003d50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BluetoothReset_Pin */
  GPIO_InitStruct.Pin = BluetoothReset_Pin;
 80029a4:	2302      	movs	r3, #2
 80029a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029a8:	2301      	movs	r3, #1
 80029aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BluetoothReset_GPIO_Port, &GPIO_InitStruct);
 80029b4:	f107 0314 	add.w	r3, r7, #20
 80029b8:	4619      	mov	r1, r3
 80029ba:	4804      	ldr	r0, [pc, #16]	; (80029cc <MX_GPIO_Init+0xb8>)
 80029bc:	f001 f81c 	bl	80039f8 <HAL_GPIO_Init>

}
 80029c0:	bf00      	nop
 80029c2:	3728      	adds	r7, #40	; 0x28
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40021400 	.word	0x40021400

080029d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029d4:	b672      	cpsid	i
}
 80029d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029d8:	e7fe      	b.n	80029d8 <Error_Handler+0x8>
	...

080029dc <EXTI0_IRQHandler>:
}


// EXIT0 handler
void EXTI0_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
	if (view_index == 0)
 80029e0:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <EXTI0_IRQHandler+0x5c>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d102      	bne.n	80029ee <EXTI0_IRQHandler+0x12>
	{
		BluetoothScreen();
 80029e8:	f000 fbfc 	bl	80031e4 <BluetoothScreen>
 80029ec:	e013      	b.n	8002a16 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 1)
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <EXTI0_IRQHandler+0x5c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d102      	bne.n	80029fc <EXTI0_IRQHandler+0x20>
	{
		ScheduleScreen();
 80029f6:	f000 fc13 	bl	8003220 <ScheduleScreen>
 80029fa:	e00c      	b.n	8002a16 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 2)
 80029fc:	4b0e      	ldr	r3, [pc, #56]	; (8002a38 <EXTI0_IRQHandler+0x5c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d102      	bne.n	8002a0a <EXTI0_IRQHandler+0x2e>
	{
		DispensedScreen();
 8002a04:	f000 fc22 	bl	800324c <DispensedScreen>
 8002a08:	e005      	b.n	8002a16 <EXTI0_IRQHandler+0x3a>
	}
	else if (view_index == 3)
 8002a0a:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <EXTI0_IRQHandler+0x5c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b03      	cmp	r3, #3
 8002a10:	d101      	bne.n	8002a16 <EXTI0_IRQHandler+0x3a>
	{
		MenuScreen();
 8002a12:	f000 fbd1 	bl	80031b8 <MenuScreen>
	}
	view_index = (view_index + 1) % 4;
 8002a16:	4b08      	ldr	r3, [pc, #32]	; (8002a38 <EXTI0_IRQHandler+0x5c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	425a      	negs	r2, r3
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	f002 0203 	and.w	r2, r2, #3
 8002a26:	bf58      	it	pl
 8002a28:	4253      	negpl	r3, r2
 8002a2a:	4a03      	ldr	r2, [pc, #12]	; (8002a38 <EXTI0_IRQHandler+0x5c>)
 8002a2c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a2e:	2001      	movs	r0, #1
 8002a30:	f001 f9a8 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
}
 8002a34:	bf00      	nop
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	20012c2c 	.word	0x20012c2c

08002a3c <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
	MenuScreen();
 8002a40:	f000 fbba 	bl	80031b8 <MenuScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a44:	2002      	movs	r0, #2
 8002a46:	f001 f99d 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
}
 8002a4a:	bf00      	nop
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	af00      	add	r7, sp, #0
	BluetoothScreen();
 8002a52:	f000 fbc7 	bl	80031e4 <BluetoothScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a56:	2004      	movs	r0, #4
 8002a58:	f001 f994 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
}
 8002a5c:	bf00      	nop
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
	ScheduleScreen();
 8002a64:	f000 fbdc 	bl	8003220 <ScheduleScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a68:	2008      	movs	r0, #8
 8002a6a:	f001 f98b 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}

08002a72 <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	af00      	add	r7, sp, #0
	DispensedScreen();
 8002a76:	f000 fbe9 	bl	800324c <DispensedScreen>
	HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002a7a:	2010      	movs	r0, #16
 8002a7c:	f001 f982 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
}
 8002a80:	bf00      	nop
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <Process_string>:

//  mon{\"mBinNumb\":\"1\",\"mMedName\":\"test\",\"mNumbPills\":\"2\",\"mTime\":\"6:48 PM\"}
//  mon{"mBinNumb":"1","mMedName":"Tylenol","mNumbPills":"1",'mTime":"3:00 PM"}
// grab data if the string format is as above
void Process_string(char arr[])
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
	  strncpy (mdate, arr, 3);
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	6879      	ldr	r1, [r7, #4]
 8002a90:	4834      	ldr	r0, [pc, #208]	; (8002b64 <Process_string+0xe0>)
 8002a92:	f004 f922 	bl	8006cda <strncpy>
	  strncpy (nbin, arr+16, 1);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	3310      	adds	r3, #16
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	4619      	mov	r1, r3
 8002a9e:	4832      	ldr	r0, [pc, #200]	; (8002b68 <Process_string+0xe4>)
 8002aa0:	f004 f91b 	bl	8006cda <strncpy>

	  uint8_t j=0, i=31;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	73fb      	strb	r3, [r7, #15]
 8002aa8:	231f      	movs	r3, #31
 8002aaa:	73bb      	strb	r3, [r7, #14]
	  while(arr[i] != ',')
 8002aac:	e005      	b.n	8002aba <Process_string+0x36>
	  {
		  i++;
 8002aae:	7bbb      	ldrb	r3, [r7, #14]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	73bb      	strb	r3, [r7, #14]
		  j++;
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
	  while(arr[i] != ',')
 8002aba:	7bbb      	ldrb	r3, [r7, #14]
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	4413      	add	r3, r2
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b2c      	cmp	r3, #44	; 0x2c
 8002ac4:	d1f3      	bne.n	8002aae <Process_string+0x2a>
	  }

	  strncpy (med, arr+31, j-1);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 011f 	add.w	r1, r3, #31
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	3b01      	subs	r3, #1
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4826      	ldr	r0, [pc, #152]	; (8002b6c <Process_string+0xe8>)
 8002ad4:	f004 f901 	bl	8006cda <strncpy>
	  strncpy (npill, arr+46+j, 1);
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	332e      	adds	r3, #46	; 0x2e
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	4413      	add	r3, r2
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4822      	ldr	r0, [pc, #136]	; (8002b70 <Process_string+0xec>)
 8002ae6:	f004 f8f8 	bl	8006cda <strncpy>
	  if(arr[62+j]==':')
 8002aea:	7bfb      	ldrb	r3, [r7, #15]
 8002aec:	333e      	adds	r3, #62	; 0x3e
 8002aee:	461a      	mov	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b3a      	cmp	r3, #58	; 0x3a
 8002af8:	d118      	bne.n	8002b2c <Process_string+0xa8>
	  {
		  strncpy (mtime, arr+58+j, 4);
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	333a      	adds	r3, #58	; 0x3a
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	2204      	movs	r2, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	481b      	ldr	r0, [pc, #108]	; (8002b74 <Process_string+0xf0>)
 8002b08:	f004 f8e7 	bl	8006cda <strncpy>
		  if(arr[66+j]=='A')
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	3342      	adds	r3, #66	; 0x42
 8002b10:	461a      	mov	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4413      	add	r3, r2
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b41      	cmp	r3, #65	; 0x41
 8002b1a:	d103      	bne.n	8002b24 <Process_string+0xa0>
		  {
			  apm = 0;
 8002b1c:	4b16      	ldr	r3, [pc, #88]	; (8002b78 <Process_string+0xf4>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	601a      	str	r2, [r3, #0]
		  {
			  apm = 1;
		  }
	  }

}
 8002b22:	e01b      	b.n	8002b5c <Process_string+0xd8>
			  apm = 1;
 8002b24:	4b14      	ldr	r3, [pc, #80]	; (8002b78 <Process_string+0xf4>)
 8002b26:	2201      	movs	r2, #1
 8002b28:	601a      	str	r2, [r3, #0]
}
 8002b2a:	e017      	b.n	8002b5c <Process_string+0xd8>
		  strncpy (mtime, arr+58+j, 5);
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	333a      	adds	r3, #58	; 0x3a
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	4413      	add	r3, r2
 8002b34:	2205      	movs	r2, #5
 8002b36:	4619      	mov	r1, r3
 8002b38:	480e      	ldr	r0, [pc, #56]	; (8002b74 <Process_string+0xf0>)
 8002b3a:	f004 f8ce 	bl	8006cda <strncpy>
		  if(arr[67+j]=='A')
 8002b3e:	7bfb      	ldrb	r3, [r7, #15]
 8002b40:	3343      	adds	r3, #67	; 0x43
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4413      	add	r3, r2
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b41      	cmp	r3, #65	; 0x41
 8002b4c:	d103      	bne.n	8002b56 <Process_string+0xd2>
			  apm = 0;
 8002b4e:	4b0a      	ldr	r3, [pc, #40]	; (8002b78 <Process_string+0xf4>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
}
 8002b54:	e002      	b.n	8002b5c <Process_string+0xd8>
			  apm = 1;
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <Process_string+0xf4>)
 8002b58:	2201      	movs	r2, #1
 8002b5a:	601a      	str	r2, [r3, #0]
}
 8002b5c:	bf00      	nop
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	20012db8 	.word	0x20012db8
 8002b68:	200137a0 	.word	0x200137a0
 8002b6c:	2001372c 	.word	0x2001372c
 8002b70:	200137a4 	.word	0x200137a4
 8002b74:	20013724 	.word	0x20013724
 8002b78:	20013334 	.word	0x20013334

08002b7c <Individual_med>:

// arr[] is the overall string possibly including several med, target[] is a 2d array
// which stores each med
void Individual_med(char arr[], char target[])
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b0a0      	sub	sp, #128	; 0x80
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
	char day[3], med[100];
	strncpy(day, arr, 3);
 8002b86:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002b8a:	2203      	movs	r2, #3
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f004 f8a3 	bl	8006cda <strncpy>
	int start, end, count=-1;
 8002b94:	f04f 33ff 	mov.w	r3, #4294967295
 8002b98:	67bb      	str	r3, [r7, #120]	; 0x78
	for(int i=0;i<=strlen(arr);i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	677b      	str	r3, [r7, #116]	; 0x74
 8002b9e:	e02f      	b.n	8002c00 <Individual_med+0x84>
	{
		if(arr[i]=='{')
 8002ba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b7b      	cmp	r3, #123	; 0x7b
 8002baa:	d104      	bne.n	8002bb6 <Individual_med+0x3a>
		{
			start = i;
 8002bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bae:	67fb      	str	r3, [r7, #124]	; 0x7c
			count++;
 8002bb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	67bb      	str	r3, [r7, #120]	; 0x78
		}
		if(arr[i]=='}')
 8002bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bb8:	687a      	ldr	r2, [r7, #4]
 8002bba:	4413      	add	r3, r2
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b7d      	cmp	r3, #125	; 0x7d
 8002bc0:	d11b      	bne.n	8002bfa <Individual_med+0x7e>
		{
			end = i;
 8002bc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bc4:	673b      	str	r3, [r7, #112]	; 0x70
			strncpy(med, arr+start, end-start+1);
 8002bc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	18d1      	adds	r1, r2, r3
 8002bcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002bce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	f107 0308 	add.w	r3, r7, #8
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f004 f87d 	bl	8006cda <strncpy>
			strncpy(target,day,3);
 8002be0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002be4:	2203      	movs	r2, #3
 8002be6:	4619      	mov	r1, r3
 8002be8:	6838      	ldr	r0, [r7, #0]
 8002bea:	f004 f876 	bl	8006cda <strncpy>
			strcat(target,med);
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	6838      	ldr	r0, [r7, #0]
 8002bf6:	f004 f861 	bl	8006cbc <strcat>
	for(int i=0;i<=strlen(arr);i++)
 8002bfa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	677b      	str	r3, [r7, #116]	; 0x74
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7fd faf3 	bl	80001ec <strlen>
 8002c06:	4602      	mov	r2, r0
 8002c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d2c8      	bcs.n	8002ba0 <Individual_med+0x24>
			//strncpy(target[count],day,3);
			//strcat(target[count],med);
		}
	}
}
 8002c0e:	bf00      	nop
 8002c10:	bf00      	nop
 8002c12:	3780      	adds	r7, #128	; 0x80
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <Manage_strings>:

// stores every weekday schedule into 2d array schdule[]
void Manage_strings()
{
 8002c18:	b590      	push	{r4, r7, lr}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
	//char weekday[7][3] = { "mon", "tue", "wed", "thu", "fri", "sat", "sun"};
	int pre = 0;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
	//char *pos;	//char *pointer = buffer;
	for(int i=0; i<=strlen(buffer); i++)
 8002c22:	2300      	movs	r3, #0
 8002c24:	603b      	str	r3, [r7, #0]
 8002c26:	e0b2      	b.n	8002d8e <Manage_strings+0x176>
	{
		//pos = strstr(pointer, weekday[i]);
    	if (buffer[i]=='t' && buffer[i+1]=='u' && buffer[i+2]=='e')
 8002c28:	4a65      	ldr	r2, [pc, #404]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	4413      	add	r3, r2
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b74      	cmp	r3, #116	; 0x74
 8002c32:	d113      	bne.n	8002c5c <Manage_strings+0x44>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	3301      	adds	r3, #1
 8002c38:	4a61      	ldr	r2, [pc, #388]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c3a:	5cd3      	ldrb	r3, [r2, r3]
 8002c3c:	2b75      	cmp	r3, #117	; 0x75
 8002c3e:	d10d      	bne.n	8002c5c <Manage_strings+0x44>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	3302      	adds	r3, #2
 8002c44:	4a5e      	ldr	r2, [pc, #376]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c46:	5cd3      	ldrb	r3, [r2, r3]
 8002c48:	2b65      	cmp	r3, #101	; 0x65
 8002c4a:	d107      	bne.n	8002c5c <Manage_strings+0x44>
    	{
    		strncpy(schedule[0],buffer,i);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	495b      	ldr	r1, [pc, #364]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c52:	485c      	ldr	r0, [pc, #368]	; (8002dc4 <Manage_strings+0x1ac>)
 8002c54:	f004 f841 	bl	8006cda <strncpy>
    		pre = i;
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='w' && buffer[i+1]=='e' && buffer[i+2]=='d')
 8002c5c:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	4413      	add	r3, r2
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b77      	cmp	r3, #119	; 0x77
 8002c66:	d117      	bne.n	8002c98 <Manage_strings+0x80>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	4a54      	ldr	r2, [pc, #336]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c6e:	5cd3      	ldrb	r3, [r2, r3]
 8002c70:	2b65      	cmp	r3, #101	; 0x65
 8002c72:	d111      	bne.n	8002c98 <Manage_strings+0x80>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	3302      	adds	r3, #2
 8002c78:	4a51      	ldr	r2, [pc, #324]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c7a:	5cd3      	ldrb	r3, [r2, r3]
 8002c7c:	2b64      	cmp	r3, #100	; 0x64
 8002c7e:	d10b      	bne.n	8002c98 <Manage_strings+0x80>
    	{
    		strncpy(schedule[1],buffer+pre,i-pre);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a4f      	ldr	r2, [pc, #316]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c84:	1899      	adds	r1, r3, r2
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	461a      	mov	r2, r3
 8002c8e:	484e      	ldr	r0, [pc, #312]	; (8002dc8 <Manage_strings+0x1b0>)
 8002c90:	f004 f823 	bl	8006cda <strncpy>
    		pre = i;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='t' && buffer[i+1]=='h' && buffer[i+2]=='u')
 8002c98:	4a49      	ldr	r2, [pc, #292]	; (8002dc0 <Manage_strings+0x1a8>)
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b74      	cmp	r3, #116	; 0x74
 8002ca2:	d117      	bne.n	8002cd4 <Manage_strings+0xbc>
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	4a45      	ldr	r2, [pc, #276]	; (8002dc0 <Manage_strings+0x1a8>)
 8002caa:	5cd3      	ldrb	r3, [r2, r3]
 8002cac:	2b68      	cmp	r3, #104	; 0x68
 8002cae:	d111      	bne.n	8002cd4 <Manage_strings+0xbc>
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	3302      	adds	r3, #2
 8002cb4:	4a42      	ldr	r2, [pc, #264]	; (8002dc0 <Manage_strings+0x1a8>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	2b75      	cmp	r3, #117	; 0x75
 8002cba:	d10b      	bne.n	8002cd4 <Manage_strings+0xbc>
    	{
    		strncpy(schedule[2],buffer+pre,i-pre);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a40      	ldr	r2, [pc, #256]	; (8002dc0 <Manage_strings+0x1a8>)
 8002cc0:	1899      	adds	r1, r3, r2
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	461a      	mov	r2, r3
 8002cca:	4840      	ldr	r0, [pc, #256]	; (8002dcc <Manage_strings+0x1b4>)
 8002ccc:	f004 f805 	bl	8006cda <strncpy>
    		pre = i;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='f' && buffer[i+1]=='r' && buffer[i+2]=='i')
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	; (8002dc0 <Manage_strings+0x1a8>)
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	4413      	add	r3, r2
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b66      	cmp	r3, #102	; 0x66
 8002cde:	d117      	bne.n	8002d10 <Manage_strings+0xf8>
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	4a36      	ldr	r2, [pc, #216]	; (8002dc0 <Manage_strings+0x1a8>)
 8002ce6:	5cd3      	ldrb	r3, [r2, r3]
 8002ce8:	2b72      	cmp	r3, #114	; 0x72
 8002cea:	d111      	bne.n	8002d10 <Manage_strings+0xf8>
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	3302      	adds	r3, #2
 8002cf0:	4a33      	ldr	r2, [pc, #204]	; (8002dc0 <Manage_strings+0x1a8>)
 8002cf2:	5cd3      	ldrb	r3, [r2, r3]
 8002cf4:	2b69      	cmp	r3, #105	; 0x69
 8002cf6:	d10b      	bne.n	8002d10 <Manage_strings+0xf8>
    	{
    		strncpy(schedule[3],buffer+pre,i-pre);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a31      	ldr	r2, [pc, #196]	; (8002dc0 <Manage_strings+0x1a8>)
 8002cfc:	1899      	adds	r1, r3, r2
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	461a      	mov	r2, r3
 8002d06:	4832      	ldr	r0, [pc, #200]	; (8002dd0 <Manage_strings+0x1b8>)
 8002d08:	f003 ffe7 	bl	8006cda <strncpy>
    		pre = i;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='s' && buffer[i+1]=='a' && buffer[i+2]=='t')
 8002d10:	4a2b      	ldr	r2, [pc, #172]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	4413      	add	r3, r2
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b73      	cmp	r3, #115	; 0x73
 8002d1a:	d117      	bne.n	8002d4c <Manage_strings+0x134>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4a27      	ldr	r2, [pc, #156]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	2b61      	cmp	r3, #97	; 0x61
 8002d26:	d111      	bne.n	8002d4c <Manage_strings+0x134>
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	3302      	adds	r3, #2
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	2b74      	cmp	r3, #116	; 0x74
 8002d32:	d10b      	bne.n	8002d4c <Manage_strings+0x134>
    	{
    		strncpy(schedule[4],buffer+pre,i-pre);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a22      	ldr	r2, [pc, #136]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d38:	1899      	adds	r1, r3, r2
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	1ad3      	subs	r3, r2, r3
 8002d40:	461a      	mov	r2, r3
 8002d42:	4824      	ldr	r0, [pc, #144]	; (8002dd4 <Manage_strings+0x1bc>)
 8002d44:	f003 ffc9 	bl	8006cda <strncpy>
    		pre = i;
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	607b      	str	r3, [r7, #4]
    	}
    	if (buffer[i]=='s' && buffer[i+1]=='u' && buffer[i+2]=='n')
 8002d4c:	4a1c      	ldr	r2, [pc, #112]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b73      	cmp	r3, #115	; 0x73
 8002d56:	d117      	bne.n	8002d88 <Manage_strings+0x170>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	4a18      	ldr	r2, [pc, #96]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d5e:	5cd3      	ldrb	r3, [r2, r3]
 8002d60:	2b75      	cmp	r3, #117	; 0x75
 8002d62:	d111      	bne.n	8002d88 <Manage_strings+0x170>
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	3302      	adds	r3, #2
 8002d68:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	2b6e      	cmp	r3, #110	; 0x6e
 8002d6e:	d10b      	bne.n	8002d88 <Manage_strings+0x170>
    	{
    		strncpy(schedule[5],buffer+pre,i-pre);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a13      	ldr	r2, [pc, #76]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d74:	1899      	adds	r1, r3, r2
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4816      	ldr	r0, [pc, #88]	; (8002dd8 <Manage_strings+0x1c0>)
 8002d80:	f003 ffab 	bl	8006cda <strncpy>
    		pre = i;
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	607b      	str	r3, [r7, #4]
	for(int i=0; i<=strlen(buffer); i++)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	480c      	ldr	r0, [pc, #48]	; (8002dc0 <Manage_strings+0x1a8>)
 8002d90:	f7fd fa2c 	bl	80001ec <strlen>
 8002d94:	4602      	mov	r2, r0
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	f4bf af45 	bcs.w	8002c28 <Manage_strings+0x10>
    	}
	}
	strncpy(schedule[6],buffer+pre,strlen(buffer));
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a07      	ldr	r2, [pc, #28]	; (8002dc0 <Manage_strings+0x1a8>)
 8002da2:	189c      	adds	r4, r3, r2
 8002da4:	4806      	ldr	r0, [pc, #24]	; (8002dc0 <Manage_strings+0x1a8>)
 8002da6:	f7fd fa21 	bl	80001ec <strlen>
 8002daa:	4603      	mov	r3, r0
 8002dac:	461a      	mov	r2, r3
 8002dae:	4621      	mov	r1, r4
 8002db0:	480a      	ldr	r0, [pc, #40]	; (8002ddc <Manage_strings+0x1c4>)
 8002db2:	f003 ff92 	bl	8006cda <strncpy>

}
 8002db6:	bf00      	nop
 8002db8:	370c      	adds	r7, #12
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd90      	pop	{r4, r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20013338 	.word	0x20013338
 8002dc4:	20012dbc 	.word	0x20012dbc
 8002dc8:	20012e84 	.word	0x20012e84
 8002dcc:	20012f4c 	.word	0x20012f4c
 8002dd0:	20013014 	.word	0x20013014
 8002dd4:	200130dc 	.word	0x200130dc
 8002dd8:	200131a4 	.word	0x200131a4
 8002ddc:	2001326c 	.word	0x2001326c

08002de0 <letterselect>:
#include "main.h"
#include "graphic.h"
#include "lcd.h"
#include <string.h>

void letterselect(const char letter, int x, int y){
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	4603      	mov	r3, r0
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	73fb      	strb	r3, [r7, #15]
	if( letter == 'A' ) {
 8002dee:	7bfb      	ldrb	r3, [r7, #15]
 8002df0:	2b41      	cmp	r3, #65	; 0x41
 8002df2:	d108      	bne.n	8002e06 <letterselect+0x26>
		LCD_DrawABig(x, y);
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fb78 	bl	80004f4 <LCD_DrawABig>
		LCD_Draw8Big(x, y);
	}
	else {
		LCD_Draw9Big(x, y);
	}
}
 8002e04:	e19f      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'B' ) {
 8002e06:	7bfb      	ldrb	r3, [r7, #15]
 8002e08:	2b42      	cmp	r3, #66	; 0x42
 8002e0a:	d108      	bne.n	8002e1e <letterselect+0x3e>
		LCD_DrawBBig(x, y);
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	b292      	uxth	r2, r2
 8002e14:	4611      	mov	r1, r2
 8002e16:	4618      	mov	r0, r3
 8002e18:	f7fd fbb6 	bl	8000588 <LCD_DrawBBig>
}
 8002e1c:	e193      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'C' ) {
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
 8002e20:	2b43      	cmp	r3, #67	; 0x43
 8002e22:	d108      	bne.n	8002e36 <letterselect+0x56>
		LCD_DrawCBig(x, y);
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	b292      	uxth	r2, r2
 8002e2c:	4611      	mov	r1, r2
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f7fd fc0e 	bl	8000650 <LCD_DrawCBig>
}
 8002e34:	e187      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'D' ) {
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	2b44      	cmp	r3, #68	; 0x44
 8002e3a:	d108      	bne.n	8002e4e <letterselect+0x6e>
		LCD_DrawDBig(x, y);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	b292      	uxth	r2, r2
 8002e44:	4611      	mov	r1, r2
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fd fc46 	bl	80006d8 <LCD_DrawDBig>
}
 8002e4c:	e17b      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'E' ) {
 8002e4e:	7bfb      	ldrb	r3, [r7, #15]
 8002e50:	2b45      	cmp	r3, #69	; 0x45
 8002e52:	d108      	bne.n	8002e66 <letterselect+0x86>
		LCD_DrawEBig(x, y);
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	b292      	uxth	r2, r2
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f7fd fc8c 	bl	800077c <LCD_DrawEBig>
}
 8002e64:	e16f      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'F' ) {
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
 8002e68:	2b46      	cmp	r3, #70	; 0x46
 8002e6a:	d108      	bne.n	8002e7e <letterselect+0x9e>
		LCD_DrawFBig(x, y);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	b292      	uxth	r2, r2
 8002e74:	4611      	mov	r1, r2
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7fd fcd0 	bl	800081c <LCD_DrawFBig>
}
 8002e7c:	e163      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'G' ) {
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
 8002e80:	2b47      	cmp	r3, #71	; 0x47
 8002e82:	d108      	bne.n	8002e96 <letterselect+0xb6>
		LCD_DrawGBig(x, y);
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	b292      	uxth	r2, r2
 8002e8c:	4611      	mov	r1, r2
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fd0e 	bl	80008b0 <LCD_DrawGBig>
}
 8002e94:	e157      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'H' ) {
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
 8002e98:	2b48      	cmp	r3, #72	; 0x48
 8002e9a:	d108      	bne.n	8002eae <letterselect+0xce>
		LCD_DrawHBig(x, y);
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	b292      	uxth	r2, r2
 8002ea4:	4611      	mov	r1, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fd54 	bl	8000954 <LCD_DrawHBig>
}
 8002eac:	e14b      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'I' ) {
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b49      	cmp	r3, #73	; 0x49
 8002eb2:	d108      	bne.n	8002ec6 <letterselect+0xe6>
		LCD_DrawIBig(x, y);
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	b292      	uxth	r2, r2
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7fd fd94 	bl	80009ec <LCD_DrawIBig>
}
 8002ec4:	e13f      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'J' ) {
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b4a      	cmp	r3, #74	; 0x4a
 8002eca:	d108      	bne.n	8002ede <letterselect+0xfe>
		LCD_DrawJBig(x, y);
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	b292      	uxth	r2, r2
 8002ed4:	4611      	mov	r1, r2
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fdce 	bl	8000a78 <LCD_DrawJBig>
}
 8002edc:	e133      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'K' ) {
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
 8002ee0:	2b4b      	cmp	r3, #75	; 0x4b
 8002ee2:	d108      	bne.n	8002ef6 <letterselect+0x116>
		LCD_DrawKBig(x, y);
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	b292      	uxth	r2, r2
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f7fd fe0c 	bl	8000b0c <LCD_DrawKBig>
}
 8002ef4:	e127      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'L' ) {
 8002ef6:	7bfb      	ldrb	r3, [r7, #15]
 8002ef8:	2b4c      	cmp	r3, #76	; 0x4c
 8002efa:	d108      	bne.n	8002f0e <letterselect+0x12e>
		LCD_DrawLBig(x, y);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	687a      	ldr	r2, [r7, #4]
 8002f02:	b292      	uxth	r2, r2
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fe6e 	bl	8000be8 <LCD_DrawLBig>
}
 8002f0c:	e11b      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'M' ) {
 8002f0e:	7bfb      	ldrb	r3, [r7, #15]
 8002f10:	2b4d      	cmp	r3, #77	; 0x4d
 8002f12:	d108      	bne.n	8002f26 <letterselect+0x146>
		LCD_DrawMBig(x, y);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	b29b      	uxth	r3, r3
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	b292      	uxth	r2, r2
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fea2 	bl	8000c68 <LCD_DrawMBig>
}
 8002f24:	e10f      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'N' ) {
 8002f26:	7bfb      	ldrb	r3, [r7, #15]
 8002f28:	2b4e      	cmp	r3, #78	; 0x4e
 8002f2a:	d108      	bne.n	8002f3e <letterselect+0x15e>
		LCD_DrawNBig(x, y);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	b292      	uxth	r2, r2
 8002f34:	4611      	mov	r1, r2
 8002f36:	4618      	mov	r0, r3
 8002f38:	f7fd fefa 	bl	8000d30 <LCD_DrawNBig>
}
 8002f3c:	e103      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'O' ) {
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b4f      	cmp	r3, #79	; 0x4f
 8002f42:	d108      	bne.n	8002f56 <letterselect+0x176>
		LCD_DrawOBig(x, y);
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	b292      	uxth	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd ff52 	bl	8000df8 <LCD_DrawOBig>
}
 8002f54:	e0f7      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'P' ) {
 8002f56:	7bfb      	ldrb	r3, [r7, #15]
 8002f58:	2b50      	cmp	r3, #80	; 0x50
 8002f5a:	d108      	bne.n	8002f6e <letterselect+0x18e>
		LCD_DrawPBig(x, y);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	b292      	uxth	r2, r2
 8002f64:	4611      	mov	r1, r2
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fd ff8c 	bl	8000e84 <LCD_DrawPBig>
}
 8002f6c:	e0eb      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'Q' ) {
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	2b51      	cmp	r3, #81	; 0x51
 8002f72:	d108      	bne.n	8002f86 <letterselect+0x1a6>
		LCD_DrawQBig(x, y);
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	687a      	ldr	r2, [r7, #4]
 8002f7a:	b292      	uxth	r2, r2
 8002f7c:	4611      	mov	r1, r2
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7fd ffd6 	bl	8000f30 <LCD_DrawQBig>
}
 8002f84:	e0df      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'R' ) {
 8002f86:	7bfb      	ldrb	r3, [r7, #15]
 8002f88:	2b52      	cmp	r3, #82	; 0x52
 8002f8a:	d108      	bne.n	8002f9e <letterselect+0x1be>
		LCD_DrawRBig(x, y);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	b292      	uxth	r2, r2
 8002f94:	4611      	mov	r1, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe f81c 	bl	8000fd4 <LCD_DrawRBig>
}
 8002f9c:	e0d3      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'S' ) {
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b53      	cmp	r3, #83	; 0x53
 8002fa2:	d108      	bne.n	8002fb6 <letterselect+0x1d6>
		LCD_DrawSBig(x, y);
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	b292      	uxth	r2, r2
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7fe f878 	bl	80010a4 <LCD_DrawSBig>
}
 8002fb4:	e0c7      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'T' ) {
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	2b54      	cmp	r3, #84	; 0x54
 8002fba:	d108      	bne.n	8002fce <letterselect+0x1ee>
		LCD_DrawTBig(x, y);
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	b292      	uxth	r2, r2
 8002fc4:	4611      	mov	r1, r2
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe f8c4 	bl	8001154 <LCD_DrawTBig>
}
 8002fcc:	e0bb      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'U' ) {
 8002fce:	7bfb      	ldrb	r3, [r7, #15]
 8002fd0:	2b55      	cmp	r3, #85	; 0x55
 8002fd2:	d108      	bne.n	8002fe6 <letterselect+0x206>
		LCD_DrawUBig(x, y);
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	b292      	uxth	r2, r2
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fe f8fc 	bl	80011dc <LCD_DrawUBig>
}
 8002fe4:	e0af      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'V' ) {
 8002fe6:	7bfb      	ldrb	r3, [r7, #15]
 8002fe8:	2b56      	cmp	r3, #86	; 0x56
 8002fea:	d108      	bne.n	8002ffe <letterselect+0x21e>
		LCD_DrawVBig(x, y);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	b292      	uxth	r2, r2
 8002ff4:	4611      	mov	r1, r2
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f7fe f934 	bl	8001264 <LCD_DrawVBig>
}
 8002ffc:	e0a3      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'W' ) {
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b57      	cmp	r3, #87	; 0x57
 8003002:	d108      	bne.n	8003016 <letterselect+0x236>
		LCD_DrawWBig(x, y);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	b29b      	uxth	r3, r3
 8003008:	687a      	ldr	r2, [r7, #4]
 800300a:	b292      	uxth	r2, r2
 800300c:	4611      	mov	r1, r2
 800300e:	4618      	mov	r0, r3
 8003010:	f7fe f9a8 	bl	8001364 <LCD_DrawWBig>
}
 8003014:	e097      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'X' ) {
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	2b58      	cmp	r3, #88	; 0x58
 800301a:	d108      	bne.n	800302e <letterselect+0x24e>
		LCD_DrawXBig(x, y);
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	b29b      	uxth	r3, r3
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	b292      	uxth	r2, r2
 8003024:	4611      	mov	r1, r2
 8003026:	4618      	mov	r0, r3
 8003028:	f7fe fa38 	bl	800149c <LCD_DrawXBig>
}
 800302c:	e08b      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'Y' ) {
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	2b59      	cmp	r3, #89	; 0x59
 8003032:	d108      	bne.n	8003046 <letterselect+0x266>
		LCD_DrawYBig(x, y);
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	b29b      	uxth	r3, r3
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	b292      	uxth	r2, r2
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f7fe fa8a 	bl	8001558 <LCD_DrawYBig>
}
 8003044:	e07f      	b.n	8003146 <letterselect+0x366>
	else if( letter == 'Z') {
 8003046:	7bfb      	ldrb	r3, [r7, #15]
 8003048:	2b5a      	cmp	r3, #90	; 0x5a
 800304a:	d108      	bne.n	800305e <letterselect+0x27e>
		LCD_DrawZBig(x, y);
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	b29b      	uxth	r3, r3
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	b292      	uxth	r2, r2
 8003054:	4611      	mov	r1, r2
 8003056:	4618      	mov	r0, r3
 8003058:	f7fe fae6 	bl	8001628 <LCD_DrawZBig>
}
 800305c:	e073      	b.n	8003146 <letterselect+0x366>
	else if( letter == '0' ) {
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b30      	cmp	r3, #48	; 0x30
 8003062:	d108      	bne.n	8003076 <letterselect+0x296>
		LCD_Draw0Big(x, y);
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	b29b      	uxth	r3, r3
 8003068:	687a      	ldr	r2, [r7, #4]
 800306a:	b292      	uxth	r2, r2
 800306c:	4611      	mov	r1, r2
 800306e:	4618      	mov	r0, r3
 8003070:	f7fe fb32 	bl	80016d8 <LCD_Draw0Big>
}
 8003074:	e067      	b.n	8003146 <letterselect+0x366>
	else if( letter == '1' ) {
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b31      	cmp	r3, #49	; 0x31
 800307a:	d108      	bne.n	800308e <letterselect+0x2ae>
		LCD_Draw1Big(x, y);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	b29b      	uxth	r3, r3
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	b292      	uxth	r2, r2
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fb6c 	bl	8001764 <LCD_Draw1Big>
}
 800308c:	e05b      	b.n	8003146 <letterselect+0x366>
	else if( letter == '2' ) {
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b32      	cmp	r3, #50	; 0x32
 8003092:	d108      	bne.n	80030a6 <letterselect+0x2c6>
		LCD_Draw2Big(x, y);
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	b29b      	uxth	r3, r3
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	b292      	uxth	r2, r2
 800309c:	4611      	mov	r1, r2
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fba0 	bl	80017e4 <LCD_Draw2Big>
}
 80030a4:	e04f      	b.n	8003146 <letterselect+0x366>
	else if( letter == '3' ) {
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
 80030a8:	2b33      	cmp	r3, #51	; 0x33
 80030aa:	d108      	bne.n	80030be <letterselect+0x2de>
		LCD_Draw3Big(x, y);
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	b292      	uxth	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fbe6 	bl	8001888 <LCD_Draw3Big>
}
 80030bc:	e043      	b.n	8003146 <letterselect+0x366>
	else if( letter == '4' ) {
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	2b34      	cmp	r3, #52	; 0x34
 80030c2:	d108      	bne.n	80030d6 <letterselect+0x2f6>
		LCD_Draw4Big(x, y);
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	b292      	uxth	r2, r2
 80030cc:	4611      	mov	r1, r2
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fe fc24 	bl	800191c <LCD_Draw4Big>
}
 80030d4:	e037      	b.n	8003146 <letterselect+0x366>
	else if( letter == '5') {
 80030d6:	7bfb      	ldrb	r3, [r7, #15]
 80030d8:	2b35      	cmp	r3, #53	; 0x35
 80030da:	d108      	bne.n	80030ee <letterselect+0x30e>
		LCD_Draw5Big(x, y);
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	b29b      	uxth	r3, r3
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	b292      	uxth	r2, r2
 80030e4:	4611      	mov	r1, r2
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe fc64 	bl	80019b4 <LCD_Draw5Big>
}
 80030ec:	e02b      	b.n	8003146 <letterselect+0x366>
	else if( letter == '6' ) {
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	2b36      	cmp	r3, #54	; 0x36
 80030f2:	d108      	bne.n	8003106 <letterselect+0x326>
		LCD_Draw6Big(x, y);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	b29b      	uxth	r3, r3
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	b292      	uxth	r2, r2
 80030fc:	4611      	mov	r1, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fe fcaa 	bl	8001a58 <LCD_Draw6Big>
}
 8003104:	e01f      	b.n	8003146 <letterselect+0x366>
	else if( letter == '7' ) {
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b37      	cmp	r3, #55	; 0x37
 800310a:	d108      	bne.n	800311e <letterselect+0x33e>
		LCD_Draw7Big(x, y);
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	b29b      	uxth	r3, r3
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	b292      	uxth	r2, r2
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe fcee 	bl	8001af8 <LCD_Draw7Big>
}
 800311c:	e013      	b.n	8003146 <letterselect+0x366>
	else if( letter == '8' ) {
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	2b38      	cmp	r3, #56	; 0x38
 8003122:	d108      	bne.n	8003136 <letterselect+0x356>
		LCD_Draw8Big(x, y);
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	b29b      	uxth	r3, r3
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	b292      	uxth	r2, r2
 800312c:	4611      	mov	r1, r2
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fd3e 	bl	8001bb0 <LCD_Draw8Big>
}
 8003134:	e007      	b.n	8003146 <letterselect+0x366>
		LCD_Draw9Big(x, y);
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	b29b      	uxth	r3, r3
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	b292      	uxth	r2, r2
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f7fe fd81 	bl	8001c48 <LCD_Draw9Big>
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
	...

08003150 <type>:

void type(char const * word, int x, int y){
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	60b9      	str	r1, [r7, #8]
 800315a:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < strlen(word); i++){
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]
 8003160:	e01b      	b.n	800319a <type+0x4a>
		letterselect(word[i], x, y);
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	4413      	add	r3, r2
 8003168:	781b      	ldrb	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	68b9      	ldr	r1, [r7, #8]
 800316e:	4618      	mov	r0, r3
 8003170:	f7ff fe36 	bl	8002de0 <letterselect>
		x = (x + 18) % LCD_WIDTH;
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	f103 0212 	add.w	r2, r3, #18
 800317a:	4b0e      	ldr	r3, [pc, #56]	; (80031b4 <type+0x64>)
 800317c:	fb83 1302 	smull	r1, r3, r3, r2
 8003180:	4413      	add	r3, r2
 8003182:	11d9      	asrs	r1, r3, #7
 8003184:	17d3      	asrs	r3, r2, #31
 8003186:	1ac9      	subs	r1, r1, r3
 8003188:	460b      	mov	r3, r1
 800318a:	011b      	lsls	r3, r3, #4
 800318c:	1a5b      	subs	r3, r3, r1
 800318e:	011b      	lsls	r3, r3, #4
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < strlen(word); i++){
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f7fd f826 	bl	80001ec <strlen>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d8dc      	bhi.n	8003162 <type+0x12>
	}
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	88888889 	.word	0x88888889

080031b8 <MenuScreen>:
	HAL_Delay(3000);
	LCD_ClearScreenLtdc(0xFF);
}

void MenuScreen(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x04);
 80031bc:	2004      	movs	r0, #4
 80031be:	f7ff f8c3 	bl	8002348 <LCD_ClearScreenLtdc>
	type("MENU", 70, 152);
 80031c2:	2298      	movs	r2, #152	; 0x98
 80031c4:	2146      	movs	r1, #70	; 0x46
 80031c6:	4805      	ldr	r0, [pc, #20]	; (80031dc <MenuScreen+0x24>)
 80031c8:	f7ff ffc2 	bl	8003150 <type>
	type("PAMA" , 85, 294);
 80031cc:	f44f 7293 	mov.w	r2, #294	; 0x126
 80031d0:	2155      	movs	r1, #85	; 0x55
 80031d2:	4803      	ldr	r0, [pc, #12]	; (80031e0 <MenuScreen+0x28>)
 80031d4:	f7ff ffbc 	bl	8003150 <type>
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	08006d28 	.word	0x08006d28
 80031e0:	08006d20 	.word	0x08006d20

080031e4 <BluetoothScreen>:

void BluetoothScreen(void)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x12);
 80031e8:	2012      	movs	r0, #18
 80031ea:	f7ff f8ad 	bl	8002348 <LCD_ClearScreenLtdc>
	type("BLUETOOTH", 40, 152);
 80031ee:	2298      	movs	r2, #152	; 0x98
 80031f0:	2128      	movs	r1, #40	; 0x28
 80031f2:	4808      	ldr	r0, [pc, #32]	; (8003214 <BluetoothScreen+0x30>)
 80031f4:	f7ff ffac 	bl	8003150 <type>
	type("PAIRING", 40, 170);
 80031f8:	22aa      	movs	r2, #170	; 0xaa
 80031fa:	2128      	movs	r1, #40	; 0x28
 80031fc:	4806      	ldr	r0, [pc, #24]	; (8003218 <BluetoothScreen+0x34>)
 80031fe:	f7ff ffa7 	bl	8003150 <type>
	type("PAMA" , 85, 294);
 8003202:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003206:	2155      	movs	r1, #85	; 0x55
 8003208:	4804      	ldr	r0, [pc, #16]	; (800321c <BluetoothScreen+0x38>)
 800320a:	f7ff ffa1 	bl	8003150 <type>
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	08006d30 	.word	0x08006d30
 8003218:	08006d3c 	.word	0x08006d3c
 800321c:	08006d20 	.word	0x08006d20

08003220 <ScheduleScreen>:

void ScheduleScreen()
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x05);
 8003224:	2005      	movs	r0, #5
 8003226:	f7ff f88f 	bl	8002348 <LCD_ClearScreenLtdc>
	type("SCHEDULE", 50, 152);
 800322a:	2298      	movs	r2, #152	; 0x98
 800322c:	2132      	movs	r1, #50	; 0x32
 800322e:	4805      	ldr	r0, [pc, #20]	; (8003244 <ScheduleScreen+0x24>)
 8003230:	f7ff ff8e 	bl	8003150 <type>
	type("PAMA", 85, 294);
 8003234:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003238:	2155      	movs	r1, #85	; 0x55
 800323a:	4803      	ldr	r0, [pc, #12]	; (8003248 <ScheduleScreen+0x28>)
 800323c:	f7ff ff88 	bl	8003150 <type>
}
 8003240:	bf00      	nop
 8003242:	bd80      	pop	{r7, pc}
 8003244:	08006d44 	.word	0x08006d44
 8003248:	08006d20 	.word	0x08006d20

0800324c <DispensedScreen>:

void DispensedScreen()
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
	LCD_ClearScreenLtdc(0x09);
 8003250:	2009      	movs	r0, #9
 8003252:	f7ff f879 	bl	8002348 <LCD_ClearScreenLtdc>
	type("DISPENSED", 50, 152);
 8003256:	2298      	movs	r2, #152	; 0x98
 8003258:	2132      	movs	r1, #50	; 0x32
 800325a:	4805      	ldr	r0, [pc, #20]	; (8003270 <DispensedScreen+0x24>)
 800325c:	f7ff ff78 	bl	8003150 <type>
	type("PAMA" , 85, 294);
 8003260:	f44f 7293 	mov.w	r2, #294	; 0x126
 8003264:	2155      	movs	r1, #85	; 0x55
 8003266:	4803      	ldr	r0, [pc, #12]	; (8003274 <DispensedScreen+0x28>)
 8003268:	f7ff ff72 	bl	8003150 <type>
}
 800326c:	bf00      	nop
 800326e:	bd80      	pop	{r7, pc}
 8003270:	08006d50 	.word	0x08006d50
 8003274:	08006d20 	.word	0x08006d20

08003278 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8003278:	b580      	push	{r7, lr}
 800327a:	af00      	add	r7, sp, #0

  hspi5.Instance = SPI5;
 800327c:	4b18      	ldr	r3, [pc, #96]	; (80032e0 <MX_SPI5_Init+0x68>)
 800327e:	4a19      	ldr	r2, [pc, #100]	; (80032e4 <MX_SPI5_Init+0x6c>)
 8003280:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8003282:	4b17      	ldr	r3, [pc, #92]	; (80032e0 <MX_SPI5_Init+0x68>)
 8003284:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003288:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 800328a:	4b15      	ldr	r3, [pc, #84]	; (80032e0 <MX_SPI5_Init+0x68>)
 800328c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003290:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8003292:	4b13      	ldr	r3, [pc, #76]	; (80032e0 <MX_SPI5_Init+0x68>)
 8003294:	2200      	movs	r2, #0
 8003296:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <MX_SPI5_Init+0x68>)
 800329a:	2200      	movs	r2, #0
 800329c:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80032a4:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032aa:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032ac:	4b0c      	ldr	r3, [pc, #48]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80032b2:	4b0b      	ldr	r3, [pc, #44]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80032b8:	4b09      	ldr	r3, [pc, #36]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80032c4:	4b06      	ldr	r3, [pc, #24]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032c6:	220a      	movs	r2, #10
 80032c8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80032ca:	4805      	ldr	r0, [pc, #20]	; (80032e0 <MX_SPI5_Init+0x68>)
 80032cc:	f002 f8ce 	bl	800546c <HAL_SPI_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 80032d6:	f7ff fb7b 	bl	80029d0 <Error_Handler>
  }

}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	200137a8 	.word	0x200137a8
 80032e4:	40015000 	.word	0x40015000

080032e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b08a      	sub	sp, #40	; 0x28
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f0:	f107 0314 	add.w	r3, r7, #20
 80032f4:	2200      	movs	r2, #0
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	609a      	str	r2, [r3, #8]
 80032fc:	60da      	str	r2, [r3, #12]
 80032fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a19      	ldr	r2, [pc, #100]	; (800336c <HAL_SPI_MspInit+0x84>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d12c      	bne.n	8003364 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	4b18      	ldr	r3, [pc, #96]	; (8003370 <HAL_SPI_MspInit+0x88>)
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_SPI_MspInit+0x88>)
 8003314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003318:	6453      	str	r3, [r2, #68]	; 0x44
 800331a:	4b15      	ldr	r3, [pc, #84]	; (8003370 <HAL_SPI_MspInit+0x88>)
 800331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003322:	613b      	str	r3, [r7, #16]
 8003324:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
 800332a:	4b11      	ldr	r3, [pc, #68]	; (8003370 <HAL_SPI_MspInit+0x88>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a10      	ldr	r2, [pc, #64]	; (8003370 <HAL_SPI_MspInit+0x88>)
 8003330:	f043 0320 	orr.w	r3, r3, #32
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_SPI_MspInit+0x88>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0320 	and.w	r3, r3, #32
 800333e:	60fb      	str	r3, [r7, #12]
 8003340:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8003342:	f44f 7320 	mov.w	r3, #640	; 0x280
 8003346:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003348:	2302      	movs	r3, #2
 800334a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334c:	2300      	movs	r3, #0
 800334e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003350:	2303      	movs	r3, #3
 8003352:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8003354:	2305      	movs	r3, #5
 8003356:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003358:	f107 0314 	add.w	r3, r7, #20
 800335c:	4619      	mov	r1, r3
 800335e:	4805      	ldr	r0, [pc, #20]	; (8003374 <HAL_SPI_MspInit+0x8c>)
 8003360:	f000 fb4a 	bl	80039f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8003364:	bf00      	nop
 8003366:	3728      	adds	r7, #40	; 0x28
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40015000 	.word	0x40015000
 8003370:	40023800 	.word	0x40023800
 8003374:	40021400 	.word	0x40021400

08003378 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337e:	2300      	movs	r3, #0
 8003380:	607b      	str	r3, [r7, #4]
 8003382:	4b10      	ldr	r3, [pc, #64]	; (80033c4 <HAL_MspInit+0x4c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	4a0f      	ldr	r2, [pc, #60]	; (80033c4 <HAL_MspInit+0x4c>)
 8003388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800338c:	6453      	str	r3, [r2, #68]	; 0x44
 800338e:	4b0d      	ldr	r3, [pc, #52]	; (80033c4 <HAL_MspInit+0x4c>)
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	607b      	str	r3, [r7, #4]
 8003398:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800339a:	2300      	movs	r3, #0
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <HAL_MspInit+0x4c>)
 80033a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a2:	4a08      	ldr	r2, [pc, #32]	; (80033c4 <HAL_MspInit+0x4c>)
 80033a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033a8:	6413      	str	r3, [r2, #64]	; 0x40
 80033aa:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <HAL_MspInit+0x4c>)
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	603b      	str	r3, [r7, #0]
 80033b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	40023800 	.word	0x40023800

080033c8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a08      	ldr	r2, [pc, #32]	; (80033f8 <HAL_RTC_MspInit+0x30>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10a      	bne.n	80033f0 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <HAL_RTC_MspInit+0x34>)
 80033dc:	2201      	movs	r2, #1
 80033de:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80033e0:	2200      	movs	r2, #0
 80033e2:	2100      	movs	r1, #0
 80033e4:	2029      	movs	r0, #41	; 0x29
 80033e6:	f000 faae 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80033ea:	2029      	movs	r0, #41	; 0x29
 80033ec:	f000 fac7 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40002800 	.word	0x40002800
 80033fc:	42470e3c 	.word	0x42470e3c

08003400 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a0e      	ldr	r2, [pc, #56]	; (8003448 <HAL_TIM_Base_MspInit+0x48>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d115      	bne.n	800343e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	4b0d      	ldr	r3, [pc, #52]	; (800344c <HAL_TIM_Base_MspInit+0x4c>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a0c      	ldr	r2, [pc, #48]	; (800344c <HAL_TIM_Base_MspInit+0x4c>)
 800341c:	f043 0310 	orr.w	r3, r3, #16
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_TIM_Base_MspInit+0x4c>)
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f003 0310 	and.w	r3, r3, #16
 800342a:	60fb      	str	r3, [r7, #12]
 800342c:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800342e:	2200      	movs	r2, #0
 8003430:	2100      	movs	r1, #0
 8003432:	2036      	movs	r0, #54	; 0x36
 8003434:	f000 fa87 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003438:	2036      	movs	r0, #54	; 0x36
 800343a:	f000 faa0 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800343e:	bf00      	nop
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40001000 	.word	0x40001000
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a1d      	ldr	r2, [pc, #116]	; (80034e4 <HAL_UART_MspInit+0x94>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d134      	bne.n	80034dc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b1c      	ldr	r3, [pc, #112]	; (80034e8 <HAL_UART_MspInit+0x98>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a1b      	ldr	r2, [pc, #108]	; (80034e8 <HAL_UART_MspInit+0x98>)
 800347c:	f043 0310 	orr.w	r3, r3, #16
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b19      	ldr	r3, [pc, #100]	; (80034e8 <HAL_UART_MspInit+0x98>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <HAL_UART_MspInit+0x98>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_UART_MspInit+0x98>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <HAL_UART_MspInit+0x98>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = Bluetooth_RX_Pin|Bluetooth_TX_Pin;
 80034aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80034ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80034b8:	2303      	movs	r3, #3
 80034ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80034bc:	2307      	movs	r3, #7
 80034be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 0314 	add.w	r3, r7, #20
 80034c4:	4619      	mov	r1, r3
 80034c6:	4809      	ldr	r0, [pc, #36]	; (80034ec <HAL_UART_MspInit+0x9c>)
 80034c8:	f000 fa96 	bl	80039f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80034cc:	2200      	movs	r2, #0
 80034ce:	2100      	movs	r1, #0
 80034d0:	2025      	movs	r0, #37	; 0x25
 80034d2:	f000 fa38 	bl	8003946 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80034d6:	2025      	movs	r0, #37	; 0x25
 80034d8:	f000 fa51 	bl	800397e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80034dc:	bf00      	nop
 80034de:	3728      	adds	r7, #40	; 0x28
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40011000 	.word	0x40011000
 80034e8:	40023800 	.word	0x40023800
 80034ec:	40020000 	.word	0x40020000

080034f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034f4:	e7fe      	b.n	80034f4 <NMI_Handler+0x4>

080034f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034f6:	b480      	push	{r7}
 80034f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034fa:	e7fe      	b.n	80034fa <HardFault_Handler+0x4>

080034fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003500:	e7fe      	b.n	8003500 <MemManage_Handler+0x4>

08003502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003502:	b480      	push	{r7}
 8003504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003506:	e7fe      	b.n	8003506 <BusFault_Handler+0x4>

08003508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800350c:	e7fe      	b.n	800350c <UsageFault_Handler+0x4>

0800350e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800350e:	b480      	push	{r7}
 8003510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003512:	bf00      	nop
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800352a:	b480      	push	{r7}
 800352c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800352e:	bf00      	nop
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800353c:	f000 f8e4 	bl	8003708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003540:	bf00      	nop
 8003542:	bd80      	pop	{r7, pc}

08003544 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive(&huart1, (uint8_t*)&buffer[buffer_index], 1, 10);
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <USART1_IRQHandler+0x30>)
 800354a:	881b      	ldrh	r3, [r3, #0]
 800354c:	461a      	mov	r2, r3
 800354e:	4b0a      	ldr	r3, [pc, #40]	; (8003578 <USART1_IRQHandler+0x34>)
 8003550:	18d1      	adds	r1, r2, r3
 8003552:	230a      	movs	r3, #10
 8003554:	2201      	movs	r2, #1
 8003556:	4809      	ldr	r0, [pc, #36]	; (800357c <USART1_IRQHandler+0x38>)
 8003558:	f002 fcb7 	bl	8005eca <HAL_UART_Receive>
	buffer_index++;
 800355c:	4b05      	ldr	r3, [pc, #20]	; (8003574 <USART1_IRQHandler+0x30>)
 800355e:	881b      	ldrh	r3, [r3, #0]
 8003560:	3301      	adds	r3, #1
 8003562:	b29a      	uxth	r2, r3
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <USART1_IRQHandler+0x30>)
 8003566:	801a      	strh	r2, [r3, #0]
		//Process_string(schedule[0]);
		//set_alarm(mtime, mdate, apm);
		//memset(buffer, 0, sizeof(buffer));
	//}
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003568:	4804      	ldr	r0, [pc, #16]	; (800357c <USART1_IRQHandler+0x38>)
 800356a:	f002 fd55 	bl	8006018 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	20012c32 	.word	0x20012c32
 8003578:	20013338 	.word	0x20013338
 800357c:	20012cf4 	.word	0x20012cf4

08003580 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8003584:	4802      	ldr	r0, [pc, #8]	; (8003590 <RTC_Alarm_IRQHandler+0x10>)
 8003586:	f001 fec3 	bl	8005310 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20012d34 	.word	0x20012d34

08003594 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	if(strlen(buffer)>0)
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <TIM6_DAC_IRQHandler+0x3c>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d005      	beq.n	80035ac <TIM6_DAC_IRQHandler+0x18>
		timer_count++;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <TIM6_DAC_IRQHandler+0x40>)
 80035a2:	881b      	ldrh	r3, [r3, #0]
 80035a4:	3301      	adds	r3, #1
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <TIM6_DAC_IRQHandler+0x40>)
 80035aa:	801a      	strh	r2, [r3, #0]

	if(timer_count>200){
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <TIM6_DAC_IRQHandler+0x40>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	2bc8      	cmp	r3, #200	; 0xc8
 80035b2:	d908      	bls.n	80035c6 <TIM6_DAC_IRQHandler+0x32>

		//Arrange_strings(buffer);
		Manage_strings();
 80035b4:	f7ff fb30 	bl	8002c18 <Manage_strings>
		Individual_med(schedule[0],bufferarr);
 80035b8:	4907      	ldr	r1, [pc, #28]	; (80035d8 <TIM6_DAC_IRQHandler+0x44>)
 80035ba:	4808      	ldr	r0, [pc, #32]	; (80035dc <TIM6_DAC_IRQHandler+0x48>)
 80035bc:	f7ff fade 	bl	8002b7c <Individual_med>
		Process_string(bufferarr);
 80035c0:	4805      	ldr	r0, [pc, #20]	; (80035d8 <TIM6_DAC_IRQHandler+0x44>)
 80035c2:	f7ff fa5f 	bl	8002a84 <Process_string>
		//timer_count = 0;
	}
  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80035c6:	4806      	ldr	r0, [pc, #24]	; (80035e0 <TIM6_DAC_IRQHandler+0x4c>)
 80035c8:	f002 f9c7 	bl	800595a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80035cc:	bf00      	nop
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20013338 	.word	0x20013338
 80035d4:	20012c30 	.word	0x20012c30
 80035d8:	2001373c 	.word	0x2001373c
 80035dc:	20012dbc 	.word	0x20012dbc
 80035e0:	20012d54 	.word	0x20012d54

080035e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035e8:	4b08      	ldr	r3, [pc, #32]	; (800360c <SystemInit+0x28>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	4a07      	ldr	r2, [pc, #28]	; (800360c <SystemInit+0x28>)
 80035f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80035f8:	4b04      	ldr	r3, [pc, #16]	; (800360c <SystemInit+0x28>)
 80035fa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80035fe:	609a      	str	r2, [r3, #8]
#endif
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003648 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003614:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003616:	e003      	b.n	8003620 <LoopCopyDataInit>

08003618 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003618:	4b0c      	ldr	r3, [pc, #48]	; (800364c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800361a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800361c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800361e:	3104      	adds	r1, #4

08003620 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003620:	480b      	ldr	r0, [pc, #44]	; (8003650 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003624:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003626:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003628:	d3f6      	bcc.n	8003618 <CopyDataInit>
  ldr  r2, =_sbss
 800362a:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800362c:	e002      	b.n	8003634 <LoopFillZerobss>

0800362e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800362e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003630:	f842 3b04 	str.w	r3, [r2], #4

08003634 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003634:	4b09      	ldr	r3, [pc, #36]	; (800365c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003636:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003638:	d3f9      	bcc.n	800362e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800363a:	f7ff ffd3 	bl	80035e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f003 fb11 	bl	8006c64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003642:	f7ff f81d 	bl	8002680 <main>
  bx  lr    
 8003646:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003648:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 800364c:	08007184 	.word	0x08007184
  ldr  r0, =_sdata
 8003650:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003654:	20012c10 	.word	0x20012c10
  ldr  r2, =_sbss
 8003658:	20012c10 	.word	0x20012c10
  ldr  r3, = _ebss
 800365c:	20013804 	.word	0x20013804

08003660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003660:	e7fe      	b.n	8003660 <ADC_IRQHandler>
	...

08003664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_Init+0x40>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <HAL_Init+0x40>)
 800366e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_Init+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_Init+0x40>)
 800367a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800367e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <HAL_Init+0x40>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800368c:	2003      	movs	r0, #3
 800368e:	f000 f94f 	bl	8003930 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003692:	2000      	movs	r0, #0
 8003694:	f000 f808 	bl	80036a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003698:	f7ff fe6e 	bl	8003378 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023c00 	.word	0x40023c00

080036a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_InitTick+0x54>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_InitTick+0x58>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036be:	fbb3 f3f1 	udiv	r3, r3, r1
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f967 	bl	800399a <HAL_SYSTICK_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00e      	b.n	80036f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d80a      	bhi.n	80036f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036dc:	2200      	movs	r2, #0
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f000 f92f 	bl	8003946 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <HAL_InitTick+0x5c>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20012c04 	.word	0x20012c04
 8003700:	20012c0c 	.word	0x20012c0c
 8003704:	20012c08 	.word	0x20012c08

08003708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_IncTick+0x20>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_IncTick+0x24>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4413      	add	r3, r2
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <HAL_IncTick+0x24>)
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20012c0c 	.word	0x20012c0c
 800372c:	20013800 	.word	0x20013800

08003730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return uwTick;
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_GetTick+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20013800 	.word	0x20013800

08003748 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003750:	f7ff ffee 	bl	8003730 <HAL_GetTick>
 8003754:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d005      	beq.n	800376e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003762:	4b0a      	ldr	r3, [pc, #40]	; (800378c <HAL_Delay+0x44>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	461a      	mov	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4413      	add	r3, r2
 800376c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800376e:	bf00      	nop
 8003770:	f7ff ffde 	bl	8003730 <HAL_GetTick>
 8003774:	4602      	mov	r2, r0
 8003776:	68bb      	ldr	r3, [r7, #8]
 8003778:	1ad3      	subs	r3, r2, r3
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	429a      	cmp	r2, r3
 800377e:	d8f7      	bhi.n	8003770 <HAL_Delay+0x28>
  {
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20012c0c 	.word	0x20012c0c

08003790 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003790:	b480      	push	{r7}
 8003792:	b085      	sub	sp, #20
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f003 0307 	and.w	r3, r3, #7
 800379e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037a0:	4b0c      	ldr	r3, [pc, #48]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037ac:	4013      	ands	r3, r2
 80037ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80037c2:	4a04      	ldr	r2, [pc, #16]	; (80037d4 <__NVIC_SetPriorityGrouping+0x44>)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	60d3      	str	r3, [r2, #12]
}
 80037c8:	bf00      	nop
 80037ca:	3714      	adds	r7, #20
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr
 80037d4:	e000ed00 	.word	0xe000ed00

080037d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <__NVIC_GetPriorityGrouping+0x18>)
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	0a1b      	lsrs	r3, r3, #8
 80037e2:	f003 0307 	and.w	r3, r3, #7
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b083      	sub	sp, #12
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	4603      	mov	r3, r0
 80037fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003802:	2b00      	cmp	r3, #0
 8003804:	db0b      	blt.n	800381e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003806:	79fb      	ldrb	r3, [r7, #7]
 8003808:	f003 021f 	and.w	r2, r3, #31
 800380c:	4907      	ldr	r1, [pc, #28]	; (800382c <__NVIC_EnableIRQ+0x38>)
 800380e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003812:	095b      	lsrs	r3, r3, #5
 8003814:	2001      	movs	r0, #1
 8003816:	fa00 f202 	lsl.w	r2, r0, r2
 800381a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	e000e100 	.word	0xe000e100

08003830 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	6039      	str	r1, [r7, #0]
 800383a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800383c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003840:	2b00      	cmp	r3, #0
 8003842:	db0a      	blt.n	800385a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	490c      	ldr	r1, [pc, #48]	; (800387c <__NVIC_SetPriority+0x4c>)
 800384a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800384e:	0112      	lsls	r2, r2, #4
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	440b      	add	r3, r1
 8003854:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003858:	e00a      	b.n	8003870 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	4908      	ldr	r1, [pc, #32]	; (8003880 <__NVIC_SetPriority+0x50>)
 8003860:	79fb      	ldrb	r3, [r7, #7]
 8003862:	f003 030f 	and.w	r3, r3, #15
 8003866:	3b04      	subs	r3, #4
 8003868:	0112      	lsls	r2, r2, #4
 800386a:	b2d2      	uxtb	r2, r2
 800386c:	440b      	add	r3, r1
 800386e:	761a      	strb	r2, [r3, #24]
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	e000e100 	.word	0xe000e100
 8003880:	e000ed00 	.word	0xe000ed00

08003884 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003884:	b480      	push	{r7}
 8003886:	b089      	sub	sp, #36	; 0x24
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f003 0307 	and.w	r3, r3, #7
 8003896:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	f1c3 0307 	rsb	r3, r3, #7
 800389e:	2b04      	cmp	r3, #4
 80038a0:	bf28      	it	cs
 80038a2:	2304      	movcs	r3, #4
 80038a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038a6:	69fb      	ldr	r3, [r7, #28]
 80038a8:	3304      	adds	r3, #4
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d902      	bls.n	80038b4 <NVIC_EncodePriority+0x30>
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	3b03      	subs	r3, #3
 80038b2:	e000      	b.n	80038b6 <NVIC_EncodePriority+0x32>
 80038b4:	2300      	movs	r3, #0
 80038b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038b8:	f04f 32ff 	mov.w	r2, #4294967295
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43da      	mvns	r2, r3
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	401a      	ands	r2, r3
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80038cc:	f04f 31ff 	mov.w	r1, #4294967295
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	fa01 f303 	lsl.w	r3, r1, r3
 80038d6:	43d9      	mvns	r1, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038dc:	4313      	orrs	r3, r2
         );
}
 80038de:	4618      	mov	r0, r3
 80038e0:	3724      	adds	r7, #36	; 0x24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038fc:	d301      	bcc.n	8003902 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038fe:	2301      	movs	r3, #1
 8003900:	e00f      	b.n	8003922 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003902:	4a0a      	ldr	r2, [pc, #40]	; (800392c <SysTick_Config+0x40>)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3b01      	subs	r3, #1
 8003908:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800390a:	210f      	movs	r1, #15
 800390c:	f04f 30ff 	mov.w	r0, #4294967295
 8003910:	f7ff ff8e 	bl	8003830 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003914:	4b05      	ldr	r3, [pc, #20]	; (800392c <SysTick_Config+0x40>)
 8003916:	2200      	movs	r2, #0
 8003918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800391a:	4b04      	ldr	r3, [pc, #16]	; (800392c <SysTick_Config+0x40>)
 800391c:	2207      	movs	r2, #7
 800391e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	e000e010 	.word	0xe000e010

08003930 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff29 	bl	8003790 <__NVIC_SetPriorityGrouping>
}
 800393e:	bf00      	nop
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003946:	b580      	push	{r7, lr}
 8003948:	b086      	sub	sp, #24
 800394a:	af00      	add	r7, sp, #0
 800394c:	4603      	mov	r3, r0
 800394e:	60b9      	str	r1, [r7, #8]
 8003950:	607a      	str	r2, [r7, #4]
 8003952:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003958:	f7ff ff3e 	bl	80037d8 <__NVIC_GetPriorityGrouping>
 800395c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68b9      	ldr	r1, [r7, #8]
 8003962:	6978      	ldr	r0, [r7, #20]
 8003964:	f7ff ff8e 	bl	8003884 <NVIC_EncodePriority>
 8003968:	4602      	mov	r2, r0
 800396a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff ff5d 	bl	8003830 <__NVIC_SetPriority>
}
 8003976:	bf00      	nop
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b082      	sub	sp, #8
 8003982:	af00      	add	r7, sp, #0
 8003984:	4603      	mov	r3, r0
 8003986:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398c:	4618      	mov	r0, r3
 800398e:	f7ff ff31 	bl	80037f4 <__NVIC_EnableIRQ>
}
 8003992:	bf00      	nop
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ffa2 	bl	80038ec <SysTick_Config>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039c0:	b2db      	uxtb	r3, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d004      	beq.n	80039d0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2280      	movs	r2, #128	; 0x80
 80039ca:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e00c      	b.n	80039ea <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2205      	movs	r2, #5
 80039d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681a      	ldr	r2, [r3, #0]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 0201 	bic.w	r2, r2, #1
 80039e6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	370c      	adds	r7, #12
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
	...

080039f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b089      	sub	sp, #36	; 0x24
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a0e:	2300      	movs	r3, #0
 8003a10:	61fb      	str	r3, [r7, #28]
 8003a12:	e177      	b.n	8003d04 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a14:	2201      	movs	r2, #1
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	fa02 f303 	lsl.w	r3, r2, r3
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a28:	693a      	ldr	r2, [r7, #16]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	429a      	cmp	r2, r3
 8003a2e:	f040 8166 	bne.w	8003cfe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d00b      	beq.n	8003a52 <HAL_GPIO_Init+0x5a>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d007      	beq.n	8003a52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003a46:	2b11      	cmp	r3, #17
 8003a48:	d003      	beq.n	8003a52 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b12      	cmp	r3, #18
 8003a50:	d130      	bne.n	8003ab4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	2203      	movs	r2, #3
 8003a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a62:	43db      	mvns	r3, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4013      	ands	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	68da      	ldr	r2, [r3, #12]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a88:	2201      	movs	r2, #1
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	091b      	lsrs	r3, r3, #4
 8003a9e:	f003 0201 	and.w	r2, r3, #1
 8003aa2:	69fb      	ldr	r3, [r7, #28]
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689a      	ldr	r2, [r3, #8]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d003      	beq.n	8003af4 <HAL_GPIO_Init+0xfc>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b12      	cmp	r3, #18
 8003af2:	d123      	bne.n	8003b3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	08da      	lsrs	r2, r3, #3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3208      	adds	r2, #8
 8003afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	220f      	movs	r2, #15
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	43db      	mvns	r3, r3
 8003b12:	69ba      	ldr	r2, [r7, #24]
 8003b14:	4013      	ands	r3, r2
 8003b16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	08da      	lsrs	r2, r3, #3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3208      	adds	r2, #8
 8003b36:	69b9      	ldr	r1, [r7, #24]
 8003b38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	005b      	lsls	r3, r3, #1
 8003b46:	2203      	movs	r2, #3
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	f003 0203 	and.w	r2, r3, #3
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 80c0 	beq.w	8003cfe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60fb      	str	r3, [r7, #12]
 8003b82:	4b66      	ldr	r3, [pc, #408]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b86:	4a65      	ldr	r2, [pc, #404]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003b88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b8c:	6453      	str	r3, [r2, #68]	; 0x44
 8003b8e:	4b63      	ldr	r3, [pc, #396]	; (8003d1c <HAL_GPIO_Init+0x324>)
 8003b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b96:	60fb      	str	r3, [r7, #12]
 8003b98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b9a:	4a61      	ldr	r2, [pc, #388]	; (8003d20 <HAL_GPIO_Init+0x328>)
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba8:	69fb      	ldr	r3, [r7, #28]
 8003baa:	f003 0303 	and.w	r3, r3, #3
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	220f      	movs	r2, #15
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a58      	ldr	r2, [pc, #352]	; (8003d24 <HAL_GPIO_Init+0x32c>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d037      	beq.n	8003c36 <HAL_GPIO_Init+0x23e>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a57      	ldr	r2, [pc, #348]	; (8003d28 <HAL_GPIO_Init+0x330>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d031      	beq.n	8003c32 <HAL_GPIO_Init+0x23a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a56      	ldr	r2, [pc, #344]	; (8003d2c <HAL_GPIO_Init+0x334>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d02b      	beq.n	8003c2e <HAL_GPIO_Init+0x236>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a55      	ldr	r2, [pc, #340]	; (8003d30 <HAL_GPIO_Init+0x338>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d025      	beq.n	8003c2a <HAL_GPIO_Init+0x232>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a54      	ldr	r2, [pc, #336]	; (8003d34 <HAL_GPIO_Init+0x33c>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d01f      	beq.n	8003c26 <HAL_GPIO_Init+0x22e>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a53      	ldr	r2, [pc, #332]	; (8003d38 <HAL_GPIO_Init+0x340>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d019      	beq.n	8003c22 <HAL_GPIO_Init+0x22a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a52      	ldr	r2, [pc, #328]	; (8003d3c <HAL_GPIO_Init+0x344>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d013      	beq.n	8003c1e <HAL_GPIO_Init+0x226>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a51      	ldr	r2, [pc, #324]	; (8003d40 <HAL_GPIO_Init+0x348>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00d      	beq.n	8003c1a <HAL_GPIO_Init+0x222>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a50      	ldr	r2, [pc, #320]	; (8003d44 <HAL_GPIO_Init+0x34c>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d007      	beq.n	8003c16 <HAL_GPIO_Init+0x21e>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a4f      	ldr	r2, [pc, #316]	; (8003d48 <HAL_GPIO_Init+0x350>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_GPIO_Init+0x21a>
 8003c0e:	2309      	movs	r3, #9
 8003c10:	e012      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c12:	230a      	movs	r3, #10
 8003c14:	e010      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c16:	2308      	movs	r3, #8
 8003c18:	e00e      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c1a:	2307      	movs	r3, #7
 8003c1c:	e00c      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c1e:	2306      	movs	r3, #6
 8003c20:	e00a      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c22:	2305      	movs	r3, #5
 8003c24:	e008      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c26:	2304      	movs	r3, #4
 8003c28:	e006      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e004      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e002      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e000      	b.n	8003c38 <HAL_GPIO_Init+0x240>
 8003c36:	2300      	movs	r3, #0
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	f002 0203 	and.w	r2, r2, #3
 8003c3e:	0092      	lsls	r2, r2, #2
 8003c40:	4093      	lsls	r3, r2
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c48:	4935      	ldr	r1, [pc, #212]	; (8003d20 <HAL_GPIO_Init+0x328>)
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	089b      	lsrs	r3, r3, #2
 8003c4e:	3302      	adds	r3, #2
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c56:	4b3d      	ldr	r3, [pc, #244]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	4013      	ands	r3, r2
 8003c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c7a:	4a34      	ldr	r2, [pc, #208]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003c7c:	69bb      	ldr	r3, [r7, #24]
 8003c7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003c80:	4b32      	ldr	r3, [pc, #200]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ca4:	4a29      	ldr	r2, [pc, #164]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003caa:	4b28      	ldr	r3, [pc, #160]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003cce:	4a1f      	ldr	r2, [pc, #124]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d003      	beq.n	8003cf8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_GPIO_Init+0x354>)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	3301      	adds	r3, #1
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	2b0f      	cmp	r3, #15
 8003d08:	f67f ae84 	bls.w	8003a14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d0c:	bf00      	nop
 8003d0e:	bf00      	nop
 8003d10:	3724      	adds	r7, #36	; 0x24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40023800 	.word	0x40023800
 8003d20:	40013800 	.word	0x40013800
 8003d24:	40020000 	.word	0x40020000
 8003d28:	40020400 	.word	0x40020400
 8003d2c:	40020800 	.word	0x40020800
 8003d30:	40020c00 	.word	0x40020c00
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40021400 	.word	0x40021400
 8003d3c:	40021800 	.word	0x40021800
 8003d40:	40021c00 	.word	0x40021c00
 8003d44:	40022000 	.word	0x40022000
 8003d48:	40022400 	.word	0x40022400
 8003d4c:	40013c00 	.word	0x40013c00

08003d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	807b      	strh	r3, [r7, #2]
 8003d5c:	4613      	mov	r3, r2
 8003d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d60:	787b      	ldrb	r3, [r7, #1]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d66:	887a      	ldrh	r2, [r7, #2]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d6c:	e003      	b.n	8003d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d6e:	887b      	ldrh	r3, [r7, #2]
 8003d70:	041a      	lsls	r2, r3, #16
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	619a      	str	r2, [r3, #24]
}
 8003d76:	bf00      	nop
 8003d78:	370c      	adds	r7, #12
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
	...

08003d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 f806 	bl	8003db4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40013c00 	.word	0x40013c00

08003db4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	4603      	mov	r3, r0
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
	...

08003dcc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U, tmp1 = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	60fb      	str	r3, [r7, #12]
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60bb      	str	r3, [r7, #8]

  /* Check the LTDC peripheral state */
  if(hltdc == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_LTDC_Init+0x1a>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e0bf      	b.n	8003f66 <HAL_LTDC_Init+0x19a>
  assert_param(IS_LTDC_HSPOL(hltdc->Init.HSPolarity));
  assert_param(IS_LTDC_VSPOL(hltdc->Init.VSPolarity));
  assert_param(IS_LTDC_DEPOL(hltdc->Init.DEPolarity));
  assert_param(IS_LTDC_PCPOL(hltdc->Init.PCPolarity));

  if(hltdc->State == HAL_LTDC_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_LTDC_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fe fb36 	bl	800246c <HAL_LTDC_MspInit>
  }
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699a      	ldr	r2, [r3, #24]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003e16:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6999      	ldr	r1, [r3, #24]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e2c:	431a      	orrs	r2, r3
  hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	691b      	ldr	r3, [r3, #16]
 8003e32:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |=  (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	430a      	orrs	r2, r1
 8003e3a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6899      	ldr	r1, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	4b4a      	ldr	r3, [pc, #296]	; (8003f70 <HAL_LTDC_Init+0x1a4>)
 8003e48:	400b      	ands	r3, r1
 8003e4a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	041b      	lsls	r3, r3, #16
 8003e52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6899      	ldr	r1, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	431a      	orrs	r2, r3
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68d9      	ldr	r1, [r3, #12]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	4b3e      	ldr	r3, [pc, #248]	; (8003f70 <HAL_LTDC_Init+0x1a4>)
 8003e76:	400b      	ands	r3, r1
 8003e78:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	041b      	lsls	r3, r3, #16
 8003e80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68d9      	ldr	r1, [r3, #12]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1a      	ldr	r2, [r3, #32]
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	431a      	orrs	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	6919      	ldr	r1, [r3, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b33      	ldr	r3, [pc, #204]	; (8003f70 <HAL_LTDC_Init+0x1a4>)
 8003ea4:	400b      	ands	r3, r1
 8003ea6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eac:	041b      	lsls	r3, r3, #16
 8003eae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	6919      	ldr	r1, [r3, #16]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	431a      	orrs	r2, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	430a      	orrs	r2, r1
 8003ec4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6959      	ldr	r1, [r3, #20]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	4b27      	ldr	r3, [pc, #156]	; (8003f70 <HAL_LTDC_Init+0x1a4>)
 8003ed2:	400b      	ands	r3, r1
 8003ed4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eda:	041b      	lsls	r3, r3, #16
 8003edc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6959      	ldr	r1, [r3, #20]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003efa:	021b      	lsls	r3, r3, #8
 8003efc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003f04:	041b      	lsls	r3, r3, #16
 8003f06:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003f16:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f1e:	68ba      	ldr	r2, [r7, #8]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f042 0206 	orr.w	r2, r2, #6
 8003f42:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	699a      	ldr	r2, [r3, #24]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0201 	orr.w	r2, r2, #1
 8003f52:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;  
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003f64:	2300      	movs	r3, #0
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	f000f800 	.word	0xf000f800

08003f74 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{   
 8003f74:	b5b0      	push	{r4, r5, r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));	
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d101      	bne.n	8003f8e <HAL_LTDC_ConfigLayer+0x1a>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	e02c      	b.n	8003fe8 <HAL_LTDC_ConfigLayer+0x74>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;  
 8003f9e:	68fa      	ldr	r2, [r7, #12]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2134      	movs	r1, #52	; 0x34
 8003fa4:	fb01 f303 	mul.w	r3, r1, r3
 8003fa8:	4413      	add	r3, r2
 8003faa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	4614      	mov	r4, r2
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fc0:	682b      	ldr	r3, [r5, #0]
 8003fc2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */  
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68b9      	ldr	r1, [r7, #8]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f923 	bl	8004214 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bdb0      	pop	{r4, r5, r7, pc}

08003ff0 <HAL_LTDC_ConfigCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigCLUT(LTDC_HandleTypeDef *hltdc, uint32_t *pCLUT, uint32_t CLUTSize, uint32_t LayerIdx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b089      	sub	sp, #36	; 0x24
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	60f8      	str	r0, [r7, #12]
 8003ff8:	60b9      	str	r1, [r7, #8]
 8003ffa:	607a      	str	r2, [r7, #4]
 8003ffc:	603b      	str	r3, [r7, #0]
  uint32_t tmp = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
  uint32_t counter = 0U;
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
  uint32_t pcounter = 0U;
 8004006:	2300      	movs	r3, #0
 8004008:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_LTDC_ConfigCLUT+0x28>
 8004014:	2302      	movs	r3, #2
 8004016:	e059      	b.n	80040cc <HAL_LTDC_ConfigCLUT+0xdc>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  for(counter = 0U; (counter < CLUTSize); counter++)
 8004028:	2300      	movs	r3, #0
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	e041      	b.n	80040b2 <HAL_LTDC_ConfigCLUT+0xc2>
  {
    if(hltdc->LayerCfg[LayerIdx].PixelFormat == LTDC_PIXEL_FORMAT_AL44)
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	2134      	movs	r1, #52	; 0x34
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	3348      	adds	r3, #72	; 0x48
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b06      	cmp	r3, #6
 8004040:	d114      	bne.n	800406c <HAL_LTDC_ConfigCLUT+0x7c>
    {
      tmp  = (((counter + 16U*counter) << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 8004042:	69ba      	ldr	r2, [r7, #24]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	4413      	add	r3, r2
 800404a:	061a      	lsls	r2, r3, #24
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	b2db      	uxtb	r3, r3
 8004052:	431a      	orrs	r2, r3
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800405c:	431a      	orrs	r2, r3
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004066:	4313      	orrs	r3, r2
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e010      	b.n	800408e <HAL_LTDC_ConfigCLUT+0x9e>
    }
    else
    { 
      tmp  = ((counter << 24U) | ((uint32_t)(*pCLUT) & 0xFFU) | ((uint32_t)(*pCLUT) & 0xFF00U) | ((uint32_t)(*pCLUT) & 0xFF0000U));
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	061a      	lsls	r2, r3, #24
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	b2db      	uxtb	r3, r3
 8004076:	431a      	orrs	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004080:	431a      	orrs	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800408a:	4313      	orrs	r3, r2
 800408c:	61fb      	str	r3, [r7, #28]
    }
    pcounter = (uint32_t)pCLUT + sizeof(*pCLUT);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	3304      	adds	r3, #4
 8004092:	617b      	str	r3, [r7, #20]
    pCLUT = (uint32_t *)pcounter;
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	60bb      	str	r3, [r7, #8]

    /* Specifies the C-LUT address and RGB value */
    LTDC_LAYER(hltdc, LayerIdx)->CLUTWR  = tmp;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	461a      	mov	r2, r3
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	01db      	lsls	r3, r3, #7
 80040a2:	4413      	add	r3, r2
 80040a4:	3384      	adds	r3, #132	; 0x84
 80040a6:	461a      	mov	r2, r3
 80040a8:	69fb      	ldr	r3, [r7, #28]
 80040aa:	6413      	str	r3, [r2, #64]	; 0x40
  for(counter = 0U; (counter < CLUTSize); counter++)
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	3301      	adds	r3, #1
 80040b0:	61bb      	str	r3, [r7, #24]
 80040b2:	69ba      	ldr	r2, [r7, #24]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d3b9      	bcc.n	800402e <HAL_LTDC_ConfigCLUT+0x3e>
  }
  
  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);  
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3724      	adds	r7, #36	; 0x24
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <HAL_LTDC_EnableCLUT>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableCLUT(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d101      	bne.n	80040f0 <HAL_LTDC_EnableCLUT+0x18>
 80040ec:	2302      	movs	r3, #2
 80040ee:	e026      	b.n	800413e <HAL_LTDC_EnableCLUT+0x66>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2202      	movs	r2, #2
 80040fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Enable LTDC color lookup table by setting CLUTEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_CLUTEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	461a      	mov	r2, r3
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	01db      	lsls	r3, r3, #7
 800410a:	4413      	add	r3, r2
 800410c:	3384      	adds	r3, #132	; 0x84
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6812      	ldr	r2, [r2, #0]
 8004114:	4611      	mov	r1, r2
 8004116:	683a      	ldr	r2, [r7, #0]
 8004118:	01d2      	lsls	r2, r2, #7
 800411a:	440a      	add	r2, r1
 800411c:	3284      	adds	r2, #132	; 0x84
 800411e:	f043 0310 	orr.w	r3, r3, #16
 8004122:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2201      	movs	r2, #1
 800412a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY; 
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	370c      	adds	r7, #12
 8004142:	46bd      	mov	sp, r7
 8004144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004148:	4770      	bx	lr

0800414a <HAL_LTDC_SetAddress>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1).
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetAddress(LTDC_HandleTypeDef *hltdc, uint32_t Address, uint32_t LayerIdx)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b086      	sub	sp, #24
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800415c:	2b01      	cmp	r3, #1
 800415e:	d101      	bne.n	8004164 <HAL_LTDC_SetAddress+0x1a>
 8004160:	2302      	movs	r3, #2
 8004162:	e024      	b.n	80041ae <HAL_LTDC_SetAddress+0x64>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2202      	movs	r2, #2
 8004170:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Get layer configuration from handle structure */
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2234      	movs	r2, #52	; 0x34
 8004178:	fb02 f303 	mul.w	r3, r2, r3
 800417c:	3338      	adds	r3, #56	; 0x38
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4413      	add	r3, r2
 8004182:	617b      	str	r3, [r7, #20]

  /* Reconfigure the Address */
  pLayerCfg->FBStartAdress = Address;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	68ba      	ldr	r2, [r7, #8]
 8004188:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set LTDC parameters */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	6979      	ldr	r1, [r7, #20]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f840 	bl	8004214 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2201      	movs	r2, #1
 800419a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3718      	adds	r7, #24
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_LTDC_Reload>:
  *                      LTDC_RELOAD_VERTICAL_BLANKING  : Reload in the next Vertical Blanking
  * @note   User application may resort to HAL_LTDC_ReloadEventCallback() at reload interrupt generation. 
  * @retval  HAL status
  */
HAL_StatusTypeDef  HAL_LTDC_Reload(LTDC_HandleTypeDef *hltdc, uint32_t ReloadType)
{
 80041b6:	b480      	push	{r7}
 80041b8:	b083      	sub	sp, #12
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
 80041be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_RELOAD(ReloadType));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d101      	bne.n	80041ce <HAL_LTDC_Reload+0x18>
 80041ca:	2302      	movs	r3, #2
 80041cc:	e01c      	b.n	8004208 <HAL_LTDC_Reload+0x52>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;  
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2202      	movs	r2, #2
 80041da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Enable the Reload interrupt */  
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f042 0208 	orr.w	r2, r2, #8
 80041ec:	635a      	str	r2, [r3, #52]	; 0x34
       
  /* Apply Reload type */
  hltdc->Instance->SRCR = ReloadType;        
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	683a      	ldr	r2, [r7, #0]
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2201      	movs	r2, #1
 80041fa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
  
  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
  
  return HAL_OK;
 8004206:	2300      	movs	r3, #0
}
 8004208:	4618      	mov	r0, r3
 800420a:	370c      	adds	r7, #12
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004214:	b480      	push	{r7}
 8004216:	b089      	sub	sp, #36	; 0x24
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmp = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1 = 0U;
 8004224:	2300      	movs	r3, #0
 8004226:	61bb      	str	r3, [r7, #24]
  uint32_t tmp2 = 0U;
 8004228:	2300      	movs	r3, #0
 800422a:	617b      	str	r3, [r7, #20]

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800423c:	4413      	add	r3, r2
 800423e:	041b      	lsls	r3, r3, #16
 8004240:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	461a      	mov	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	01db      	lsls	r3, r3, #7
 800424c:	4413      	add	r3, r2
 800424e:	3384      	adds	r3, #132	; 0x84
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	4611      	mov	r1, r2
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	01d2      	lsls	r2, r2, #7
 800425c:	440a      	add	r2, r1
 800425e:	3284      	adds	r2, #132	; 0x84
 8004260:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8004264:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0c1b      	lsrs	r3, r3, #16
 8004272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004276:	4413      	add	r3, r2
 8004278:	1c5a      	adds	r2, r3, #1
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4619      	mov	r1, r3
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	01db      	lsls	r3, r3, #7
 8004284:	440b      	add	r3, r1
 8004286:	3384      	adds	r3, #132	; 0x84
 8004288:	4619      	mov	r1, r3
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	4313      	orrs	r3, r2
 800428e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	68da      	ldr	r2, [r3, #12]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68db      	ldr	r3, [r3, #12]
 800429a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429e:	4413      	add	r3, r2
 80042a0:	041b      	lsls	r3, r3, #16
 80042a2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	461a      	mov	r2, r3
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	01db      	lsls	r3, r3, #7
 80042ae:	4413      	add	r3, r2
 80042b0:	3384      	adds	r3, #132	; 0x84
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	6812      	ldr	r2, [r2, #0]
 80042b8:	4611      	mov	r1, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	01d2      	lsls	r2, r2, #7
 80042be:	440a      	add	r2, r1
 80042c0:	3284      	adds	r2, #132	; 0x84
 80042c2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80042c6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);  
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042d6:	4413      	add	r3, r2
 80042d8:	1c5a      	adds	r2, r3, #1
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4619      	mov	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	01db      	lsls	r3, r3, #7
 80042e4:	440b      	add	r3, r1
 80042e6:	3384      	adds	r3, #132	; 0x84
 80042e8:	4619      	mov	r1, r3
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	01db      	lsls	r3, r3, #7
 80042fa:	4413      	add	r3, r2
 80042fc:	3384      	adds	r3, #132	; 0x84
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	4611      	mov	r1, r2
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	01d2      	lsls	r2, r2, #7
 800430a:	440a      	add	r2, r1
 800430c:	3284      	adds	r2, #132	; 0x84
 800430e:	f023 0307 	bic.w	r3, r3, #7
 8004312:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	461a      	mov	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	01db      	lsls	r3, r3, #7
 800431e:	4413      	add	r3, r2
 8004320:	3384      	adds	r3, #132	; 0x84
 8004322:	461a      	mov	r2, r3
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004330:	021b      	lsls	r3, r3, #8
 8004332:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800433a:	041b      	lsls	r3, r3, #16
 800433c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);  
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	699b      	ldr	r3, [r3, #24]
 8004342:	061b      	lsls	r3, r3, #24
 8004344:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	01db      	lsls	r3, r3, #7
 8004350:	4413      	add	r3, r2
 8004352:	3384      	adds	r3, #132	; 0x84
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	01db      	lsls	r3, r3, #7
 8004360:	4413      	add	r3, r2
 8004362:	3384      	adds	r3, #132	; 0x84
 8004364:	461a      	mov	r2, r3
 8004366:	2300      	movs	r3, #0
 8004368:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2); 
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004370:	461a      	mov	r2, r3
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	431a      	orrs	r2, r3
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	431a      	orrs	r2, r3
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4619      	mov	r1, r3
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	01db      	lsls	r3, r3, #7
 8004384:	440b      	add	r3, r1
 8004386:	3384      	adds	r3, #132	; 0x84
 8004388:	4619      	mov	r1, r3
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	461a      	mov	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	01db      	lsls	r3, r3, #7
 800439a:	4413      	add	r3, r2
 800439c:	3384      	adds	r3, #132	; 0x84
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	6812      	ldr	r2, [r2, #0]
 80043a4:	4611      	mov	r1, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	01d2      	lsls	r2, r2, #7
 80043aa:	440a      	add	r2, r1
 80043ac:	3284      	adds	r2, #132	; 0x84
 80043ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80043b2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	461a      	mov	r2, r3
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	01db      	lsls	r3, r3, #7
 80043be:	4413      	add	r3, r2
 80043c0:	3384      	adds	r3, #132	; 0x84
 80043c2:	461a      	mov	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	695b      	ldr	r3, [r3, #20]
 80043c8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	461a      	mov	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	01db      	lsls	r3, r3, #7
 80043d4:	4413      	add	r3, r2
 80043d6:	3384      	adds	r3, #132	; 0x84
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	6812      	ldr	r2, [r2, #0]
 80043de:	4611      	mov	r1, r2
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	01d2      	lsls	r2, r2, #7
 80043e4:	440a      	add	r2, r1
 80043e6:	3284      	adds	r2, #132	; 0x84
 80043e8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80043ec:	f023 0307 	bic.w	r3, r3, #7
 80043f0:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	68f9      	ldr	r1, [r7, #12]
 80043fc:	6809      	ldr	r1, [r1, #0]
 80043fe:	4608      	mov	r0, r1
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	01c9      	lsls	r1, r1, #7
 8004404:	4401      	add	r1, r0
 8004406:	3184      	adds	r1, #132	; 0x84
 8004408:	4313      	orrs	r3, r2
 800440a:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	01db      	lsls	r3, r3, #7
 8004416:	4413      	add	r3, r2
 8004418:	3384      	adds	r3, #132	; 0x84
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	01db      	lsls	r3, r3, #7
 8004426:	4413      	add	r3, r2
 8004428:	3384      	adds	r3, #132	; 0x84
 800442a:	461a      	mov	r2, r3
 800442c:	2300      	movs	r3, #0
 800442e:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	461a      	mov	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	01db      	lsls	r3, r3, #7
 800443a:	4413      	add	r3, r2
 800443c:	3384      	adds	r3, #132	; 0x84
 800443e:	461a      	mov	r2, r3
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	6293      	str	r3, [r2, #40]	; 0x28

  if(pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <LTDC_SetConfig+0x240>
  {
    tmp = 4U;
 800444e:	2304      	movs	r3, #4
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	e01b      	b.n	800448c <LTDC_SetConfig+0x278>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d102      	bne.n	8004462 <LTDC_SetConfig+0x24e>
  {
    tmp = 3U;
 800445c:	2303      	movs	r3, #3
 800445e:	61fb      	str	r3, [r7, #28]
 8004460:	e014      	b.n	800448c <LTDC_SetConfig+0x278>
  }
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	2b04      	cmp	r3, #4
 8004468:	d00b      	beq.n	8004482 <LTDC_SetConfig+0x26e>
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	691b      	ldr	r3, [r3, #16]
  else if((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800446e:	2b02      	cmp	r3, #2
 8004470:	d007      	beq.n	8004482 <LTDC_SetConfig+0x26e>
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	691b      	ldr	r3, [r3, #16]
    (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004476:	2b03      	cmp	r3, #3
 8004478:	d003      	beq.n	8004482 <LTDC_SetConfig+0x26e>
        (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
      (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800447e:	2b07      	cmp	r3, #7
 8004480:	d102      	bne.n	8004488 <LTDC_SetConfig+0x274>
  {
    tmp = 2U;
 8004482:	2302      	movs	r3, #2
 8004484:	61fb      	str	r3, [r7, #28]
 8004486:	e001      	b.n	800448c <LTDC_SetConfig+0x278>
  }
  else
  {
    tmp = 1U;
 8004488:	2301      	movs	r3, #1
 800448a:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	461a      	mov	r2, r3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	01db      	lsls	r3, r3, #7
 8004496:	4413      	add	r3, r2
 8004498:	3384      	adds	r3, #132	; 0x84
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	4611      	mov	r1, r2
 80044a2:	687a      	ldr	r2, [r7, #4]
 80044a4:	01d2      	lsls	r2, r2, #7
 80044a6:	440a      	add	r2, r1
 80044a8:	3284      	adds	r2, #132	; 0x84
 80044aa:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044b4:	69fa      	ldr	r2, [r7, #28]
 80044b6:	fb02 f303 	mul.w	r3, r2, r3
 80044ba:	041a      	lsls	r2, r3, #16
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	6859      	ldr	r1, [r3, #4]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	1acb      	subs	r3, r1, r3
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	fb01 f303 	mul.w	r3, r1, r3
 80044cc:	3303      	adds	r3, #3
 80044ce:	68f9      	ldr	r1, [r7, #12]
 80044d0:	6809      	ldr	r1, [r1, #0]
 80044d2:	4608      	mov	r0, r1
 80044d4:	6879      	ldr	r1, [r7, #4]
 80044d6:	01c9      	lsls	r1, r1, #7
 80044d8:	4401      	add	r1, r0
 80044da:	3184      	adds	r1, #132	; 0x84
 80044dc:	4313      	orrs	r3, r2
 80044de:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	461a      	mov	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	01db      	lsls	r3, r3, #7
 80044ea:	4413      	add	r3, r2
 80044ec:	3384      	adds	r3, #132	; 0x84
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	6812      	ldr	r2, [r2, #0]
 80044f4:	4611      	mov	r1, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	01d2      	lsls	r2, r2, #7
 80044fa:	440a      	add	r2, r1
 80044fc:	3284      	adds	r2, #132	; 0x84
 80044fe:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004502:	f023 0307 	bic.w	r3, r3, #7
 8004506:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	461a      	mov	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	01db      	lsls	r3, r3, #7
 8004512:	4413      	add	r3, r2
 8004514:	3384      	adds	r3, #132	; 0x84
 8004516:	461a      	mov	r2, r3
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800451c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */  
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	461a      	mov	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	01db      	lsls	r3, r3, #7
 8004528:	4413      	add	r3, r2
 800452a:	3384      	adds	r3, #132	; 0x84
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	6812      	ldr	r2, [r2, #0]
 8004532:	4611      	mov	r1, r2
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	01d2      	lsls	r2, r2, #7
 8004538:	440a      	add	r2, r1
 800453a:	3284      	adds	r2, #132	; 0x84
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	6013      	str	r3, [r2, #0]
}
 8004542:	bf00      	nop
 8004544:	3724      	adds	r7, #36	; 0x24
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004556:	2300      	movs	r3, #0
 8004558:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800455a:	2300      	movs	r3, #0
 800455c:	603b      	str	r3, [r7, #0]
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	4a1f      	ldr	r2, [pc, #124]	; (80045e0 <HAL_PWREx_EnableOverDrive+0x90>)
 8004564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004568:	6413      	str	r3, [r2, #64]	; 0x40
 800456a:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <HAL_PWREx_EnableOverDrive+0x90>)
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004572:	603b      	str	r3, [r7, #0]
 8004574:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004576:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <HAL_PWREx_EnableOverDrive+0x94>)
 8004578:	2201      	movs	r2, #1
 800457a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800457c:	f7ff f8d8 	bl	8003730 <HAL_GetTick>
 8004580:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004582:	e009      	b.n	8004598 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004584:	f7ff f8d4 	bl	8003730 <HAL_GetTick>
 8004588:	4602      	mov	r2, r0
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004592:	d901      	bls.n	8004598 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e01f      	b.n	80045d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004598:	4b13      	ldr	r3, [pc, #76]	; (80045e8 <HAL_PWREx_EnableOverDrive+0x98>)
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045a4:	d1ee      	bne.n	8004584 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80045a6:	4b11      	ldr	r3, [pc, #68]	; (80045ec <HAL_PWREx_EnableOverDrive+0x9c>)
 80045a8:	2201      	movs	r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045ac:	f7ff f8c0 	bl	8003730 <HAL_GetTick>
 80045b0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045b2:	e009      	b.n	80045c8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80045b4:	f7ff f8bc 	bl	8003730 <HAL_GetTick>
 80045b8:	4602      	mov	r2, r0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	1ad3      	subs	r3, r2, r3
 80045be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80045c2:	d901      	bls.n	80045c8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80045c4:	2303      	movs	r3, #3
 80045c6:	e007      	b.n	80045d8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80045c8:	4b07      	ldr	r3, [pc, #28]	; (80045e8 <HAL_PWREx_EnableOverDrive+0x98>)
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80045d4:	d1ee      	bne.n	80045b4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3708      	adds	r7, #8
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40023800 	.word	0x40023800
 80045e4:	420e0040 	.word	0x420e0040
 80045e8:	40007000 	.word	0x40007000
 80045ec:	420e0044 	.word	0x420e0044

080045f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e25b      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b00      	cmp	r3, #0
 800460c:	d075      	beq.n	80046fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800460e:	4ba3      	ldr	r3, [pc, #652]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	f003 030c 	and.w	r3, r3, #12
 8004616:	2b04      	cmp	r3, #4
 8004618:	d00c      	beq.n	8004634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800461a:	4ba0      	ldr	r3, [pc, #640]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004622:	2b08      	cmp	r3, #8
 8004624:	d112      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004626:	4b9d      	ldr	r3, [pc, #628]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800462e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004632:	d10b      	bne.n	800464c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004634:	4b99      	ldr	r3, [pc, #612]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463c:	2b00      	cmp	r3, #0
 800463e:	d05b      	beq.n	80046f8 <HAL_RCC_OscConfig+0x108>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d157      	bne.n	80046f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e236      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004654:	d106      	bne.n	8004664 <HAL_RCC_OscConfig+0x74>
 8004656:	4b91      	ldr	r3, [pc, #580]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a90      	ldr	r2, [pc, #576]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800465c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004660:	6013      	str	r3, [r2, #0]
 8004662:	e01d      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800466c:	d10c      	bne.n	8004688 <HAL_RCC_OscConfig+0x98>
 800466e:	4b8b      	ldr	r3, [pc, #556]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a8a      	ldr	r2, [pc, #552]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	4b88      	ldr	r3, [pc, #544]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a87      	ldr	r2, [pc, #540]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e00b      	b.n	80046a0 <HAL_RCC_OscConfig+0xb0>
 8004688:	4b84      	ldr	r3, [pc, #528]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a83      	ldr	r2, [pc, #524]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800468e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004692:	6013      	str	r3, [r2, #0]
 8004694:	4b81      	ldr	r3, [pc, #516]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a80      	ldr	r2, [pc, #512]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800469a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d013      	beq.n	80046d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7ff f842 	bl	8003730 <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046b0:	f7ff f83e 	bl	8003730 <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b64      	cmp	r3, #100	; 0x64
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e1fb      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046c2:	4b76      	ldr	r3, [pc, #472]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d0f0      	beq.n	80046b0 <HAL_RCC_OscConfig+0xc0>
 80046ce:	e014      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046d0:	f7ff f82e 	bl	8003730 <HAL_GetTick>
 80046d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046d6:	e008      	b.n	80046ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80046d8:	f7ff f82a 	bl	8003730 <HAL_GetTick>
 80046dc:	4602      	mov	r2, r0
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	1ad3      	subs	r3, r2, r3
 80046e2:	2b64      	cmp	r3, #100	; 0x64
 80046e4:	d901      	bls.n	80046ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e1e7      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046ea:	4b6c      	ldr	r3, [pc, #432]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d1f0      	bne.n	80046d8 <HAL_RCC_OscConfig+0xe8>
 80046f6:	e000      	b.n	80046fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d063      	beq.n	80047ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004706:	4b65      	ldr	r3, [pc, #404]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f003 030c 	and.w	r3, r3, #12
 800470e:	2b00      	cmp	r3, #0
 8004710:	d00b      	beq.n	800472a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004712:	4b62      	ldr	r3, [pc, #392]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800471a:	2b08      	cmp	r3, #8
 800471c:	d11c      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800471e:	4b5f      	ldr	r3, [pc, #380]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d116      	bne.n	8004758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800472a:	4b5c      	ldr	r3, [pc, #368]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d005      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	2b01      	cmp	r3, #1
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e1bb      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004742:	4b56      	ldr	r3, [pc, #344]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4952      	ldr	r1, [pc, #328]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004752:	4313      	orrs	r3, r2
 8004754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004756:	e03a      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d020      	beq.n	80047a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004760:	4b4f      	ldr	r3, [pc, #316]	; (80048a0 <HAL_RCC_OscConfig+0x2b0>)
 8004762:	2201      	movs	r2, #1
 8004764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004766:	f7fe ffe3 	bl	8003730 <HAL_GetTick>
 800476a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800476c:	e008      	b.n	8004780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800476e:	f7fe ffdf 	bl	8003730 <HAL_GetTick>
 8004772:	4602      	mov	r2, r0
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	1ad3      	subs	r3, r2, r3
 8004778:	2b02      	cmp	r3, #2
 800477a:	d901      	bls.n	8004780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e19c      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004780:	4b46      	ldr	r3, [pc, #280]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0302 	and.w	r3, r3, #2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d0f0      	beq.n	800476e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800478c:	4b43      	ldr	r3, [pc, #268]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	00db      	lsls	r3, r3, #3
 800479a:	4940      	ldr	r1, [pc, #256]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800479c:	4313      	orrs	r3, r2
 800479e:	600b      	str	r3, [r1, #0]
 80047a0:	e015      	b.n	80047ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047a2:	4b3f      	ldr	r3, [pc, #252]	; (80048a0 <HAL_RCC_OscConfig+0x2b0>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fe ffc2 	bl	8003730 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fe ffbe 	bl	8003730 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e17b      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047c2:	4b36      	ldr	r3, [pc, #216]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1f0      	bne.n	80047b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0308 	and.w	r3, r3, #8
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d030      	beq.n	800483c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d016      	beq.n	8004810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047e2:	4b30      	ldr	r3, [pc, #192]	; (80048a4 <HAL_RCC_OscConfig+0x2b4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e8:	f7fe ffa2 	bl	8003730 <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80047f0:	f7fe ff9e 	bl	8003730 <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e15b      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004802:	4b26      	ldr	r3, [pc, #152]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004806:	f003 0302 	and.w	r3, r3, #2
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0f0      	beq.n	80047f0 <HAL_RCC_OscConfig+0x200>
 800480e:	e015      	b.n	800483c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004810:	4b24      	ldr	r3, [pc, #144]	; (80048a4 <HAL_RCC_OscConfig+0x2b4>)
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004816:	f7fe ff8b 	bl	8003730 <HAL_GetTick>
 800481a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800481c:	e008      	b.n	8004830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800481e:	f7fe ff87 	bl	8003730 <HAL_GetTick>
 8004822:	4602      	mov	r2, r0
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	1ad3      	subs	r3, r2, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d901      	bls.n	8004830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800482c:	2303      	movs	r3, #3
 800482e:	e144      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004830:	4b1a      	ldr	r3, [pc, #104]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004834:	f003 0302 	and.w	r3, r3, #2
 8004838:	2b00      	cmp	r3, #0
 800483a:	d1f0      	bne.n	800481e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0304 	and.w	r3, r3, #4
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80a0 	beq.w	800498a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800484a:	2300      	movs	r3, #0
 800484c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800484e:	4b13      	ldr	r3, [pc, #76]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10f      	bne.n	800487a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	60bb      	str	r3, [r7, #8]
 800485e:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	4a0e      	ldr	r2, [pc, #56]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 8004864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004868:	6413      	str	r3, [r2, #64]	; 0x40
 800486a:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCC_OscConfig+0x2ac>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004872:	60bb      	str	r3, [r7, #8]
 8004874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800487a:	4b0b      	ldr	r3, [pc, #44]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004882:	2b00      	cmp	r3, #0
 8004884:	d121      	bne.n	80048ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004886:	4b08      	ldr	r3, [pc, #32]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a07      	ldr	r2, [pc, #28]	; (80048a8 <HAL_RCC_OscConfig+0x2b8>)
 800488c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004892:	f7fe ff4d 	bl	8003730 <HAL_GetTick>
 8004896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004898:	e011      	b.n	80048be <HAL_RCC_OscConfig+0x2ce>
 800489a:	bf00      	nop
 800489c:	40023800 	.word	0x40023800
 80048a0:	42470000 	.word	0x42470000
 80048a4:	42470e80 	.word	0x42470e80
 80048a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ac:	f7fe ff40 	bl	8003730 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	2b02      	cmp	r3, #2
 80048b8:	d901      	bls.n	80048be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80048ba:	2303      	movs	r3, #3
 80048bc:	e0fd      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048be:	4b81      	ldr	r3, [pc, #516]	; (8004ac4 <HAL_RCC_OscConfig+0x4d4>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d0f0      	beq.n	80048ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d106      	bne.n	80048e0 <HAL_RCC_OscConfig+0x2f0>
 80048d2:	4b7d      	ldr	r3, [pc, #500]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80048d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048d6:	4a7c      	ldr	r2, [pc, #496]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6713      	str	r3, [r2, #112]	; 0x70
 80048de:	e01c      	b.n	800491a <HAL_RCC_OscConfig+0x32a>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	2b05      	cmp	r3, #5
 80048e6:	d10c      	bne.n	8004902 <HAL_RCC_OscConfig+0x312>
 80048e8:	4b77      	ldr	r3, [pc, #476]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80048ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048ec:	4a76      	ldr	r2, [pc, #472]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80048ee:	f043 0304 	orr.w	r3, r3, #4
 80048f2:	6713      	str	r3, [r2, #112]	; 0x70
 80048f4:	4b74      	ldr	r3, [pc, #464]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80048f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048f8:	4a73      	ldr	r2, [pc, #460]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80048fa:	f043 0301 	orr.w	r3, r3, #1
 80048fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004900:	e00b      	b.n	800491a <HAL_RCC_OscConfig+0x32a>
 8004902:	4b71      	ldr	r3, [pc, #452]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004906:	4a70      	ldr	r2, [pc, #448]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004908:	f023 0301 	bic.w	r3, r3, #1
 800490c:	6713      	str	r3, [r2, #112]	; 0x70
 800490e:	4b6e      	ldr	r3, [pc, #440]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004912:	4a6d      	ldr	r2, [pc, #436]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004914:	f023 0304 	bic.w	r3, r3, #4
 8004918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d015      	beq.n	800494e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fe ff05 	bl	8003730 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004928:	e00a      	b.n	8004940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800492a:	f7fe ff01 	bl	8003730 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	f241 3288 	movw	r2, #5000	; 0x1388
 8004938:	4293      	cmp	r3, r2
 800493a:	d901      	bls.n	8004940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e0bc      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004940:	4b61      	ldr	r3, [pc, #388]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ee      	beq.n	800492a <HAL_RCC_OscConfig+0x33a>
 800494c:	e014      	b.n	8004978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800494e:	f7fe feef 	bl	8003730 <HAL_GetTick>
 8004952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004954:	e00a      	b.n	800496c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004956:	f7fe feeb 	bl	8003730 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	693b      	ldr	r3, [r7, #16]
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	f241 3288 	movw	r2, #5000	; 0x1388
 8004964:	4293      	cmp	r3, r2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e0a6      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800496c:	4b56      	ldr	r3, [pc, #344]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 800496e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004970:	f003 0302 	and.w	r3, r3, #2
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ee      	bne.n	8004956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004978:	7dfb      	ldrb	r3, [r7, #23]
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800497e:	4b52      	ldr	r3, [pc, #328]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004982:	4a51      	ldr	r2, [pc, #324]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f000 8092 	beq.w	8004ab8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004994:	4b4c      	ldr	r3, [pc, #304]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004996:	689b      	ldr	r3, [r3, #8]
 8004998:	f003 030c 	and.w	r3, r3, #12
 800499c:	2b08      	cmp	r3, #8
 800499e:	d05c      	beq.n	8004a5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d141      	bne.n	8004a2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049a8:	4b48      	ldr	r3, [pc, #288]	; (8004acc <HAL_RCC_OscConfig+0x4dc>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ae:	f7fe febf 	bl	8003730 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049b4:	e008      	b.n	80049c8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80049b6:	f7fe febb 	bl	8003730 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	d901      	bls.n	80049c8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e078      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049c8:	4b3f      	ldr	r3, [pc, #252]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1f0      	bne.n	80049b6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6a1b      	ldr	r3, [r3, #32]
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	019b      	lsls	r3, r3, #6
 80049e4:	431a      	orrs	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	4933      	ldr	r1, [pc, #204]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049fe:	4b33      	ldr	r3, [pc, #204]	; (8004acc <HAL_RCC_OscConfig+0x4dc>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a04:	f7fe fe94 	bl	8003730 <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a0c:	f7fe fe90 	bl	8003730 <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e04d      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x41c>
 8004a2a:	e045      	b.n	8004ab8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a2c:	4b27      	ldr	r3, [pc, #156]	; (8004acc <HAL_RCC_OscConfig+0x4dc>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a32:	f7fe fe7d 	bl	8003730 <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a38:	e008      	b.n	8004a4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a3a:	f7fe fe79 	bl	8003730 <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d901      	bls.n	8004a4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e036      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1f0      	bne.n	8004a3a <HAL_RCC_OscConfig+0x44a>
 8004a58:	e02e      	b.n	8004ab8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e029      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004a66:	4b18      	ldr	r3, [pc, #96]	; (8004ac8 <HAL_RCC_OscConfig+0x4d8>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d11c      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d115      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004a88:	68fa      	ldr	r2, [r7, #12]
 8004a8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004a8e:	4013      	ands	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d10d      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d106      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ab0:	429a      	cmp	r2, r3
 8004ab2:	d001      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e000      	b.n	8004aba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	40007000 	.word	0x40007000
 8004ac8:	40023800 	.word	0x40023800
 8004acc:	42470060 	.word	0x42470060

08004ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b084      	sub	sp, #16
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e0cc      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ae4:	4b68      	ldr	r3, [pc, #416]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d90c      	bls.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004af2:	4b65      	ldr	r3, [pc, #404]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004af4:	683a      	ldr	r2, [r7, #0]
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004afa:	4b63      	ldr	r3, [pc, #396]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 030f 	and.w	r3, r3, #15
 8004b02:	683a      	ldr	r2, [r7, #0]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d001      	beq.n	8004b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e0b8      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d020      	beq.n	8004b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b24:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	4a58      	ldr	r2, [pc, #352]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	4a52      	ldr	r2, [pc, #328]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b48:	4b50      	ldr	r3, [pc, #320]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	494d      	ldr	r1, [pc, #308]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d044      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d107      	bne.n	8004b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b6e:	4b47      	ldr	r3, [pc, #284]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d119      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e07f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d003      	beq.n	8004b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d107      	bne.n	8004b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d109      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e06f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b9e:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0302 	and.w	r3, r3, #2
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e067      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bae:	4b37      	ldr	r3, [pc, #220]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 0203 	bic.w	r2, r3, #3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	685b      	ldr	r3, [r3, #4]
 8004bba:	4934      	ldr	r1, [pc, #208]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bc0:	f7fe fdb6 	bl	8003730 <HAL_GetTick>
 8004bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bc6:	e00a      	b.n	8004bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bc8:	f7fe fdb2 	bl	8003730 <HAL_GetTick>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	1ad3      	subs	r3, r2, r3
 8004bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e04f      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bde:	4b2b      	ldr	r3, [pc, #172]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 020c 	and.w	r2, r3, #12
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d1eb      	bne.n	8004bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf0:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f003 030f 	and.w	r3, r3, #15
 8004bf8:	683a      	ldr	r2, [r7, #0]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20c      	bcs.n	8004c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bfe:	4b22      	ldr	r3, [pc, #136]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c00:	683a      	ldr	r2, [r7, #0]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c06:	4b20      	ldr	r3, [pc, #128]	; (8004c88 <HAL_RCC_ClockConfig+0x1b8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	683a      	ldr	r2, [r7, #0]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d001      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e032      	b.n	8004c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d008      	beq.n	8004c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c24:	4b19      	ldr	r3, [pc, #100]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4916      	ldr	r1, [pc, #88]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0308 	and.w	r3, r3, #8
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d009      	beq.n	8004c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	490e      	ldr	r1, [pc, #56]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004c56:	f000 f821 	bl	8004c9c <HAL_RCC_GetSysClockFreq>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	4b0b      	ldr	r3, [pc, #44]	; (8004c8c <HAL_RCC_ClockConfig+0x1bc>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	091b      	lsrs	r3, r3, #4
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	490a      	ldr	r1, [pc, #40]	; (8004c90 <HAL_RCC_ClockConfig+0x1c0>)
 8004c68:	5ccb      	ldrb	r3, [r1, r3]
 8004c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004c6e:	4a09      	ldr	r2, [pc, #36]	; (8004c94 <HAL_RCC_ClockConfig+0x1c4>)
 8004c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004c72:	4b09      	ldr	r3, [pc, #36]	; (8004c98 <HAL_RCC_ClockConfig+0x1c8>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fe fd16 	bl	80036a8 <HAL_InitTick>

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023c00 	.word	0x40023c00
 8004c8c:	40023800 	.word	0x40023800
 8004c90:	0800715c 	.word	0x0800715c
 8004c94:	20012c04 	.word	0x20012c04
 8004c98:	20012c08 	.word	0x20012c08

08004c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c9c:	b5b0      	push	{r4, r5, r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	6079      	str	r1, [r7, #4]
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	60f9      	str	r1, [r7, #12]
 8004caa:	2100      	movs	r1, #0
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004cae:	2100      	movs	r1, #0
 8004cb0:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004cb2:	4952      	ldr	r1, [pc, #328]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004cb4:	6889      	ldr	r1, [r1, #8]
 8004cb6:	f001 010c 	and.w	r1, r1, #12
 8004cba:	2908      	cmp	r1, #8
 8004cbc:	d00d      	beq.n	8004cda <HAL_RCC_GetSysClockFreq+0x3e>
 8004cbe:	2908      	cmp	r1, #8
 8004cc0:	f200 8094 	bhi.w	8004dec <HAL_RCC_GetSysClockFreq+0x150>
 8004cc4:	2900      	cmp	r1, #0
 8004cc6:	d002      	beq.n	8004cce <HAL_RCC_GetSysClockFreq+0x32>
 8004cc8:	2904      	cmp	r1, #4
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCC_GetSysClockFreq+0x38>
 8004ccc:	e08e      	b.n	8004dec <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004cce:	4b4c      	ldr	r3, [pc, #304]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x164>)
 8004cd0:	60bb      	str	r3, [r7, #8]
       break;
 8004cd2:	e08e      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004cd4:	4b4b      	ldr	r3, [pc, #300]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x168>)
 8004cd6:	60bb      	str	r3, [r7, #8]
      break;
 8004cd8:	e08b      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004cda:	4948      	ldr	r1, [pc, #288]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004cdc:	6849      	ldr	r1, [r1, #4]
 8004cde:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8004ce2:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ce4:	4945      	ldr	r1, [pc, #276]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004ce6:	6849      	ldr	r1, [r1, #4]
 8004ce8:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8004cec:	2900      	cmp	r1, #0
 8004cee:	d024      	beq.n	8004d3a <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cf0:	4942      	ldr	r1, [pc, #264]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004cf2:	6849      	ldr	r1, [r1, #4]
 8004cf4:	0989      	lsrs	r1, r1, #6
 8004cf6:	4608      	mov	r0, r1
 8004cf8:	f04f 0100 	mov.w	r1, #0
 8004cfc:	f240 14ff 	movw	r4, #511	; 0x1ff
 8004d00:	f04f 0500 	mov.w	r5, #0
 8004d04:	ea00 0204 	and.w	r2, r0, r4
 8004d08:	ea01 0305 	and.w	r3, r1, r5
 8004d0c:	493d      	ldr	r1, [pc, #244]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d0e:	fb01 f003 	mul.w	r0, r1, r3
 8004d12:	2100      	movs	r1, #0
 8004d14:	fb01 f102 	mul.w	r1, r1, r2
 8004d18:	1844      	adds	r4, r0, r1
 8004d1a:	493a      	ldr	r1, [pc, #232]	; (8004e04 <HAL_RCC_GetSysClockFreq+0x168>)
 8004d1c:	fba2 0101 	umull	r0, r1, r2, r1
 8004d20:	1863      	adds	r3, r4, r1
 8004d22:	4619      	mov	r1, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	461a      	mov	r2, r3
 8004d28:	f04f 0300 	mov.w	r3, #0
 8004d2c:	f7fb fa66 	bl	80001fc <__aeabi_uldivmod>
 8004d30:	4602      	mov	r2, r0
 8004d32:	460b      	mov	r3, r1
 8004d34:	4613      	mov	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
 8004d38:	e04a      	b.n	8004dd0 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d3a:	4b30      	ldr	r3, [pc, #192]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	099b      	lsrs	r3, r3, #6
 8004d40:	461a      	mov	r2, r3
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	ea02 0400 	and.w	r4, r2, r0
 8004d52:	ea03 0501 	and.w	r5, r3, r1
 8004d56:	4620      	mov	r0, r4
 8004d58:	4629      	mov	r1, r5
 8004d5a:	f04f 0200 	mov.w	r2, #0
 8004d5e:	f04f 0300 	mov.w	r3, #0
 8004d62:	014b      	lsls	r3, r1, #5
 8004d64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d68:	0142      	lsls	r2, r0, #5
 8004d6a:	4610      	mov	r0, r2
 8004d6c:	4619      	mov	r1, r3
 8004d6e:	1b00      	subs	r0, r0, r4
 8004d70:	eb61 0105 	sbc.w	r1, r1, r5
 8004d74:	f04f 0200 	mov.w	r2, #0
 8004d78:	f04f 0300 	mov.w	r3, #0
 8004d7c:	018b      	lsls	r3, r1, #6
 8004d7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d82:	0182      	lsls	r2, r0, #6
 8004d84:	1a12      	subs	r2, r2, r0
 8004d86:	eb63 0301 	sbc.w	r3, r3, r1
 8004d8a:	f04f 0000 	mov.w	r0, #0
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	00d9      	lsls	r1, r3, #3
 8004d94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d98:	00d0      	lsls	r0, r2, #3
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	1912      	adds	r2, r2, r4
 8004da0:	eb45 0303 	adc.w	r3, r5, r3
 8004da4:	f04f 0000 	mov.w	r0, #0
 8004da8:	f04f 0100 	mov.w	r1, #0
 8004dac:	0299      	lsls	r1, r3, #10
 8004dae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004db2:	0290      	lsls	r0, r2, #10
 8004db4:	4602      	mov	r2, r0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4610      	mov	r0, r2
 8004dba:	4619      	mov	r1, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	461a      	mov	r2, r3
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	f7fb fa1a 	bl	80001fc <__aeabi_uldivmod>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4613      	mov	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004dd0:	4b0a      	ldr	r3, [pc, #40]	; (8004dfc <HAL_RCC_GetSysClockFreq+0x160>)
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	0c1b      	lsrs	r3, r3, #16
 8004dd6:	f003 0303 	and.w	r3, r3, #3
 8004dda:	3301      	adds	r3, #1
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de8:	60bb      	str	r3, [r7, #8]
      break;
 8004dea:	e002      	b.n	8004df2 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004dec:	4b04      	ldr	r3, [pc, #16]	; (8004e00 <HAL_RCC_GetSysClockFreq+0x164>)
 8004dee:	60bb      	str	r3, [r7, #8]
      break;
 8004df0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004df2:	68bb      	ldr	r3, [r7, #8]
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3710      	adds	r7, #16
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bdb0      	pop	{r4, r5, r7, pc}
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	00f42400 	.word	0x00f42400
 8004e04:	017d7840 	.word	0x017d7840

08004e08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e0c:	4b03      	ldr	r3, [pc, #12]	; (8004e1c <HAL_RCC_GetHCLKFreq+0x14>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr
 8004e1a:	bf00      	nop
 8004e1c:	20012c04 	.word	0x20012c04

08004e20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004e24:	f7ff fff0 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	0a9b      	lsrs	r3, r3, #10
 8004e30:	f003 0307 	and.w	r3, r3, #7
 8004e34:	4903      	ldr	r1, [pc, #12]	; (8004e44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004e36:	5ccb      	ldrb	r3, [r1, r3]
 8004e38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	40023800 	.word	0x40023800
 8004e44:	0800716c 	.word	0x0800716c

08004e48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004e4c:	f7ff ffdc 	bl	8004e08 <HAL_RCC_GetHCLKFreq>
 8004e50:	4602      	mov	r2, r0
 8004e52:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004e54:	689b      	ldr	r3, [r3, #8]
 8004e56:	0b5b      	lsrs	r3, r3, #13
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	4903      	ldr	r1, [pc, #12]	; (8004e6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e5e:	5ccb      	ldrb	r3, [r1, r3]
 8004e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	0800716c 	.word	0x0800716c

08004e70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	b086      	sub	sp, #24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d105      	bne.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d075      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004ea4:	4bad      	ldr	r3, [pc, #692]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004eaa:	f7fe fc41 	bl	8003730 <HAL_GetTick>
 8004eae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004eb0:	e008      	b.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004eb2:	f7fe fc3d 	bl	8003730 <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d901      	bls.n	8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e18b      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004ec4:	4ba6      	ldr	r3, [pc, #664]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1f0      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0301 	and.w	r3, r3, #1
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	019a      	lsls	r2, r3, #6
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	689b      	ldr	r3, [r3, #8]
 8004ee6:	071b      	lsls	r3, r3, #28
 8004ee8:	499d      	ldr	r1, [pc, #628]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0302 	and.w	r3, r3, #2
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d01f      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004efc:	4b98      	ldr	r3, [pc, #608]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004efe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f02:	0f1b      	lsrs	r3, r3, #28
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	019a      	lsls	r2, r3, #6
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	68db      	ldr	r3, [r3, #12]
 8004f14:	061b      	lsls	r3, r3, #24
 8004f16:	431a      	orrs	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	071b      	lsls	r3, r3, #28
 8004f1c:	4990      	ldr	r1, [pc, #576]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004f24:	4b8e      	ldr	r3, [pc, #568]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004f2a:	f023 021f 	bic.w	r2, r3, #31
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69db      	ldr	r3, [r3, #28]
 8004f32:	3b01      	subs	r3, #1
 8004f34:	498a      	ldr	r1, [pc, #552]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f36:	4313      	orrs	r3, r2
 8004f38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00d      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	019a      	lsls	r2, r3, #6
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	061b      	lsls	r3, r3, #24
 8004f54:	431a      	orrs	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	071b      	lsls	r3, r3, #28
 8004f5c:	4980      	ldr	r1, [pc, #512]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f64:	4b7d      	ldr	r3, [pc, #500]	; (800515c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8004f66:	2201      	movs	r2, #1
 8004f68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004f6a:	f7fe fbe1 	bl	8003730 <HAL_GetTick>
 8004f6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f70:	e008      	b.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004f72:	f7fe fbdd 	bl	8003730 <HAL_GetTick>
 8004f76:	4602      	mov	r2, r0
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b02      	cmp	r3, #2
 8004f7e:	d901      	bls.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e12b      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f84:	4b76      	ldr	r3, [pc, #472]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d0f0      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d079      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004fa8:	4b6e      	ldr	r3, [pc, #440]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004faa:	2200      	movs	r2, #0
 8004fac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fae:	f7fe fbbf 	bl	8003730 <HAL_GetTick>
 8004fb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fb4:	e008      	b.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004fb6:	f7fe fbbb 	bl	8003730 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	2b02      	cmp	r3, #2
 8004fc2:	d901      	bls.n	8004fc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	e109      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fc8:	4b65      	ldr	r3, [pc, #404]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd4:	d0ef      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0304 	and.w	r3, r3, #4
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d020      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004fe2:	4b5f      	ldr	r3, [pc, #380]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8004fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe8:	0f1b      	lsrs	r3, r3, #28
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	019a      	lsls	r2, r3, #6
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	061b      	lsls	r3, r3, #24
 8004ffc:	431a      	orrs	r2, r3
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	071b      	lsls	r3, r3, #28
 8005002:	4957      	ldr	r1, [pc, #348]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800500a:	4b55      	ldr	r3, [pc, #340]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800500c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005010:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a1b      	ldr	r3, [r3, #32]
 8005018:	3b01      	subs	r3, #1
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	4950      	ldr	r1, [pc, #320]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0308 	and.w	r3, r3, #8
 800502c:	2b00      	cmp	r3, #0
 800502e:	d01e      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005030:	4b4b      	ldr	r3, [pc, #300]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005036:	0e1b      	lsrs	r3, r3, #24
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	019a      	lsls	r2, r3, #6
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	061b      	lsls	r3, r3, #24
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	071b      	lsls	r3, r3, #28
 8005050:	4943      	ldr	r1, [pc, #268]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005052:	4313      	orrs	r3, r2
 8005054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005058:	4b41      	ldr	r3, [pc, #260]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800505a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800505e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005066:	493e      	ldr	r1, [pc, #248]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800506e:	4b3d      	ldr	r3, [pc, #244]	; (8005164 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005070:	2201      	movs	r2, #1
 8005072:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005074:	f7fe fb5c 	bl	8003730 <HAL_GetTick>
 8005078:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800507a:	e008      	b.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800507c:	f7fe fb58 	bl	8003730 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e0a6      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800508e:	4b34      	ldr	r3, [pc, #208]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005096:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509a:	d1ef      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0320 	and.w	r3, r3, #32
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 808d 	beq.w	80051c4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
 80050ae:	4b2c      	ldr	r3, [pc, #176]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b2:	4a2b      	ldr	r2, [pc, #172]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b8:	6413      	str	r3, [r2, #64]	; 0x40
 80050ba:	4b29      	ldr	r3, [pc, #164]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a27      	ldr	r2, [pc, #156]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050d2:	f7fe fb2d 	bl	8003730 <HAL_GetTick>
 80050d6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050d8:	e008      	b.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050da:	f7fe fb29 	bl	8003730 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e077      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050ec:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d0f0      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050f8:	4b19      	ldr	r3, [pc, #100]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80050fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005100:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d039      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800510c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	429a      	cmp	r2, r3
 8005114:	d032      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005120:	4b12      	ldr	r3, [pc, #72]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005122:	2201      	movs	r2, #1
 8005124:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800512c:	4a0c      	ldr	r2, [pc, #48]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005132:	4b0b      	ldr	r3, [pc, #44]	; (8005160 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005134:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b01      	cmp	r3, #1
 800513c:	d11e      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800513e:	f7fe faf7 	bl	8003730 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005144:	e014      	b.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005146:	f7fe faf3 	bl	8003730 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	f241 3288 	movw	r2, #5000	; 0x1388
 8005154:	4293      	cmp	r3, r2
 8005156:	d90b      	bls.n	8005170 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e03f      	b.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800515c:	42470068 	.word	0x42470068
 8005160:	40023800 	.word	0x40023800
 8005164:	42470070 	.word	0x42470070
 8005168:	40007000 	.word	0x40007000
 800516c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005170:	4b1c      	ldr	r3, [pc, #112]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005174:	f003 0302 	and.w	r3, r3, #2
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0e4      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005180:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005188:	d10d      	bne.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800518a:	4b16      	ldr	r3, [pc, #88]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800519a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800519e:	4911      	ldr	r1, [pc, #68]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	608b      	str	r3, [r1, #8]
 80051a4:	e005      	b.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80051a6:	4b0f      	ldr	r3, [pc, #60]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051ac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051b0:	6093      	str	r3, [r2, #8]
 80051b2:	4b0c      	ldr	r3, [pc, #48]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051b4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051be:	4909      	ldr	r1, [pc, #36]	; (80051e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0310 	and.w	r3, r3, #16
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d004      	beq.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80051d6:	4b04      	ldr	r3, [pc, #16]	; (80051e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80051d8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	40023800 	.word	0x40023800
 80051e8:	424711e0 	.word	0x424711e0

080051ec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b082      	sub	sp, #8
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d101      	bne.n	80051fe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80051fa:	2301      	movs	r3, #1
 80051fc:	e083      	b.n	8005306 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	7f5b      	ldrb	r3, [r3, #29]
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d105      	bne.n	8005214 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7fe f8da 	bl	80033c8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	22ca      	movs	r2, #202	; 0xca
 8005220:	625a      	str	r2, [r3, #36]	; 0x24
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	2253      	movs	r2, #83	; 0x53
 8005228:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 f8e8 	bl	8005400 <RTC_EnterInitMode>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d008      	beq.n	8005248 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	22ff      	movs	r2, #255	; 0xff
 800523c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2204      	movs	r2, #4
 8005242:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e05e      	b.n	8005306 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	6812      	ldr	r2, [r2, #0]
 8005252:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005256:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6899      	ldr	r1, [r3, #8]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	431a      	orrs	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	430a      	orrs	r2, r1
 8005278:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	68d2      	ldr	r2, [r2, #12]
 8005282:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6919      	ldr	r1, [r3, #16]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	041a      	lsls	r2, r3, #16
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 0320 	and.w	r3, r3, #32
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10e      	bne.n	80052d4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f87a 	bl	80053b0 <HAL_RTC_WaitForSynchro>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d008      	beq.n	80052d4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	22ff      	movs	r2, #255	; 0xff
 80052c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e018      	b.n	8005306 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80052e2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	699a      	ldr	r2, [r3, #24]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	430a      	orrs	r2, r1
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	22ff      	movs	r2, #255	; 0xff
 80052fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2201      	movs	r2, #1
 8005302:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8005304:	2300      	movs	r3, #0
  }
}
 8005306:	4618      	mov	r0, r3
 8005308:	3708      	adds	r7, #8
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}
	...

08005310 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d012      	beq.n	800534c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005330:	2b00      	cmp	r3, #0
 8005332:	d00b      	beq.n	800534c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f000 f831 	bl	800539c <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	b2da      	uxtb	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800534a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005356:	2b00      	cmp	r3, #0
 8005358:	d012      	beq.n	8005380 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00b      	beq.n	8005380 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f875 	bl	8005458 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	b2da      	uxtb	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f462 7220 	orn	r2, r2, #640	; 0x280
 800537e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8005380:	4b05      	ldr	r3, [pc, #20]	; (8005398 <HAL_RTC_AlarmIRQHandler+0x88>)
 8005382:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005386:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	775a      	strb	r2, [r3, #29]
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	40013c00 	.word	0x40013c00

0800539c <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800539c:	b480      	push	{r7}
 800539e:	b083      	sub	sp, #12
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80053a4:	bf00      	nop
 80053a6:	370c      	adds	r7, #12
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr

080053b0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68da      	ldr	r2, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053ca:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80053cc:	f7fe f9b0 	bl	8003730 <HAL_GetTick>
 80053d0:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80053d2:	e009      	b.n	80053e8 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80053d4:	f7fe f9ac 	bl	8003730 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053e2:	d901      	bls.n	80053e8 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80053e4:	2303      	movs	r3, #3
 80053e6:	e007      	b.n	80053f8 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	f003 0320 	and.w	r3, r3, #32
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d0ee      	beq.n	80053d4 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3710      	adds	r7, #16
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}

08005400 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b084      	sub	sp, #16
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005416:	2b00      	cmp	r3, #0
 8005418:	d119      	bne.n	800544e <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f04f 32ff 	mov.w	r2, #4294967295
 8005422:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005424:	f7fe f984 	bl	8003730 <HAL_GetTick>
 8005428:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800542a:	e009      	b.n	8005440 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800542c:	f7fe f980 	bl	8003730 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800543a:	d901      	bls.n	8005440 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e007      	b.n	8005450 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0ee      	beq.n	800542c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3710      	adds	r7, #16
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8005458:	b480      	push	{r7}
 800545a:	b083      	sub	sp, #12
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8005460:	bf00      	nop
 8005462:	370c      	adds	r7, #12
 8005464:	46bd      	mov	sp, r7
 8005466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546a:	4770      	bx	lr

0800546c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b082      	sub	sp, #8
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d101      	bne.n	800547e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800547a:	2301      	movs	r3, #1
 800547c:	e056      	b.n	800552c <HAL_SPI_Init+0xc0>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800548a:	b2db      	uxtb	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7fd ff25 	bl	80032e8 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2202      	movs	r2, #2
 80054a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	681a      	ldr	r2, [r3, #0]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054b4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	431a      	orrs	r2, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	431a      	orrs	r2, r3
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	431a      	orrs	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054da:	431a      	orrs	r2, r3
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	ea42 0103 	orr.w	r1, r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	430a      	orrs	r2, r1
 80054f4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	0c1b      	lsrs	r3, r3, #16
 80054fc:	f003 0104 	and.w	r1, r3, #4
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	69da      	ldr	r2, [r3, #28]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800551a:	61da      	str	r2, [r3, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2201      	movs	r2, #1
 8005526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}

08005534 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af02      	add	r7, sp, #8
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	603b      	str	r3, [r7, #0]
 8005540:	4613      	mov	r3, r2
 8005542:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 8005544:	2300      	movs	r3, #0
 8005546:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_SPI_Transmit+0x26>
 8005556:	2302      	movs	r3, #2
 8005558:	e125      	b.n	80057a6 <HAL_SPI_Transmit+0x272>
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005562:	f7fe f8e5 	bl	8003730 <HAL_GetTick>
 8005566:	61b8      	str	r0, [r7, #24]

  if(hspi->State != HAL_SPI_STATE_READY)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800556e:	b2db      	uxtb	r3, r3
 8005570:	2b01      	cmp	r3, #1
 8005572:	d002      	beq.n	800557a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005574:	2302      	movs	r3, #2
 8005576:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005578:	e10c      	b.n	8005794 <HAL_SPI_Transmit+0x260>
  }

  if((pData == NULL ) || (Size == 0))
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <HAL_SPI_Transmit+0x52>
 8005580:	88fb      	ldrh	r3, [r7, #6]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	77fb      	strb	r3, [r7, #31]
    goto error;
 800558a:	e103      	b.n	8005794 <HAL_SPI_Transmit+0x260>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2203      	movs	r2, #3
 8005590:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2200      	movs	r2, #0
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	68ba      	ldr	r2, [r7, #8]
 800559e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	88fa      	ldrh	r2, [r7, #6]
 80055a4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	88fa      	ldrh	r2, [r7, #6]
 80055aa:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2200      	movs	r2, #0
 80055b6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	689b      	ldr	r3, [r3, #8]
 80055ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055d2:	d107      	bne.n	80055e4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80055e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d007      	beq.n	8005602 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005600:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if(hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	68db      	ldr	r3, [r3, #12]
 8005606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800560a:	d147      	bne.n	800569c <HAL_SPI_Transmit+0x168>
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d004      	beq.n	800561e <HAL_SPI_Transmit+0xea>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005618:	b29b      	uxth	r3, r3
 800561a:	2b01      	cmp	r3, #1
 800561c:	d138      	bne.n	8005690 <HAL_SPI_Transmit+0x15c>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	881a      	ldrh	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3302      	adds	r3, #2
 800562c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800563c:	e028      	b.n	8005690 <HAL_SPI_Transmit+0x15c>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b02      	cmp	r3, #2
 800564a:	d10f      	bne.n	800566c <HAL_SPI_Transmit+0x138>
      {
          hspi->Instance->DR = *((uint16_t *)pData);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	881a      	ldrh	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	3302      	adds	r3, #2
 800565a:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount--;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005660:	b29b      	uxth	r3, r3
 8005662:	3b01      	subs	r3, #1
 8005664:	b29a      	uxth	r2, r3
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	86da      	strh	r2, [r3, #54]	; 0x36
 800566a:	e011      	b.n	8005690 <HAL_SPI_Transmit+0x15c>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00b      	beq.n	800568a <HAL_SPI_Transmit+0x156>
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d00a      	beq.n	8005690 <HAL_SPI_Transmit+0x15c>
 800567a:	f7fe f859 	bl	8003730 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	429a      	cmp	r2, r3
 8005688:	d802      	bhi.n	8005690 <HAL_SPI_Transmit+0x15c>
        {
          errorcode = HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800568e:	e081      	b.n	8005794 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005694:	b29b      	uxth	r3, r3
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1d1      	bne.n	800563e <HAL_SPI_Transmit+0x10a>
 800569a:	e048      	b.n	800572e <HAL_SPI_Transmit+0x1fa>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d004      	beq.n	80056ae <HAL_SPI_Transmit+0x17a>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b01      	cmp	r3, #1
 80056ac:	d13a      	bne.n	8005724 <HAL_SPI_Transmit+0x1f0>
    {
      *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	330c      	adds	r3, #12
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	7812      	ldrb	r2, [r2, #0]
 80056b8:	701a      	strb	r2, [r3, #0]
      pData += sizeof(uint8_t);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	3301      	adds	r3, #1
 80056be:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	3b01      	subs	r3, #1
 80056c8:	b29a      	uxth	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80056ce:	e029      	b.n	8005724 <HAL_SPI_Transmit+0x1f0>
    {
      /* Wait until TXE flag is set to send data */
      if(__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	f003 0302 	and.w	r3, r3, #2
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d110      	bne.n	8005700 <HAL_SPI_Transmit+0x1cc>
      {
        *((__IO uint8_t*)&hspi->Instance->DR) = (*pData);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	330c      	adds	r3, #12
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	7812      	ldrb	r2, [r2, #0]
 80056e8:	701a      	strb	r2, [r3, #0]
        pData += sizeof(uint8_t);
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	3301      	adds	r3, #1
 80056ee:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	3b01      	subs	r3, #1
 80056f8:	b29a      	uxth	r2, r3
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	86da      	strh	r2, [r3, #54]	; 0x36
 80056fe:	e011      	b.n	8005724 <HAL_SPI_Transmit+0x1f0>
      }
      else
      {
        /* Timeout management */
        if((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick()-tickstart) >=  Timeout)))
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <HAL_SPI_Transmit+0x1ea>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800570c:	d00a      	beq.n	8005724 <HAL_SPI_Transmit+0x1f0>
 800570e:	f7fe f80f 	bl	8003730 <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	683a      	ldr	r2, [r7, #0]
 800571a:	429a      	cmp	r2, r3
 800571c:	d802      	bhi.n	8005724 <HAL_SPI_Transmit+0x1f0>
        {
          errorcode = HAL_TIMEOUT;
 800571e:	2303      	movs	r3, #3
 8005720:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005722:	e037      	b.n	8005794 <HAL_SPI_Transmit+0x260>
    while (hspi->TxXferCount > 0U)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005728:	b29b      	uxth	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1d0      	bne.n	80056d0 <HAL_SPI_Transmit+0x19c>
      }
    }
  }

  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, tickstart) != HAL_OK)
 800572e:	69bb      	ldr	r3, [r7, #24]
 8005730:	9300      	str	r3, [sp, #0]
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2201      	movs	r2, #1
 8005736:	2102      	movs	r1, #2
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f000 f838 	bl	80057ae <SPI_WaitFlagStateUntilTimeout>
 800573e:	4603      	mov	r3, r0
 8005740:	2b00      	cmp	r3, #0
 8005742:	d002      	beq.n	800574a <HAL_SPI_Transmit+0x216>
  {
    errorcode = HAL_TIMEOUT;
 8005744:	2303      	movs	r3, #3
 8005746:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005748:	e024      	b.n	8005794 <HAL_SPI_Transmit+0x260>
  }
  
  /* Check Busy flag */
  if(SPI_CheckFlag_BSY(hspi, Timeout, tickstart) != HAL_OK)
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	6839      	ldr	r1, [r7, #0]
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f000 f896 	bl	8005880 <SPI_CheckFlag_BSY>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d005      	beq.n	8005766 <HAL_SPI_Transmit+0x232>
  {
    errorcode = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	77fb      	strb	r3, [r7, #31]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2220      	movs	r2, #32
 8005762:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005764:	e016      	b.n	8005794 <HAL_SPI_Transmit+0x260>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10a      	bne.n	8005784 <HAL_SPI_Transmit+0x250>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800576e:	2300      	movs	r3, #0
 8005770:	617b      	str	r3, [r7, #20]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	617b      	str	r3, [r7, #20]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	617b      	str	r3, [r7, #20]
 8005782:	697b      	ldr	r3, [r7, #20]
  {
     SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if(hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <HAL_SPI_Transmit+0x25e>
  {
    errorcode = HAL_ERROR;
 800578c:	2301      	movs	r3, #1
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e000      	b.n	8005794 <HAL_SPI_Transmit+0x260>
  }

error:
 8005792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2201      	movs	r2, #1
 8005798:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2200      	movs	r2, #0
 80057a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <SPI_WaitFlagStateUntilTimeout>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State, uint32_t Timeout, uint32_t Tickstart)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b084      	sub	sp, #16
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
 80057ba:	603b      	str	r3, [r7, #0]
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 80057bc:	e04d      	b.n	800585a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if(Timeout != HAL_MAX_DELAY)
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057c4:	d049      	beq.n	800585a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) >= Timeout))
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <SPI_WaitFlagStateUntilTimeout+0x2e>
 80057cc:	f7fd ffb0 	bl	8003730 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	69bb      	ldr	r3, [r7, #24]
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d83e      	bhi.n	800585a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	685a      	ldr	r2, [r3, #4]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80057ea:	605a      	str	r2, [r3, #4]

        if((hspi->Init.Mode == SPI_MODE_MASTER)&&((hspi->Init.Direction == SPI_DIRECTION_1LINE)||(hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057f4:	d111      	bne.n	800581a <SPI_WaitFlagStateUntilTimeout+0x6c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057fe:	d004      	beq.n	800580a <SPI_WaitFlagStateUntilTimeout+0x5c>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005808:	d107      	bne.n	800581a <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005818:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005822:	d110      	bne.n	8005846 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6819      	ldr	r1, [r3, #0]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8005832:	400b      	ands	r3, r1
 8005834:	6013      	str	r3, [r2, #0]
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005844:	601a      	str	r2, [r3, #0]
        }

        hspi->State= HAL_SPI_STATE_READY;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2201      	movs	r2, #1
 800584a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e00e      	b.n	8005878 <SPI_WaitFlagStateUntilTimeout+0xca>
  while((((hspi->Instance->SR & Flag) == (Flag)) ? SET : RESET) != State)
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689a      	ldr	r2, [r3, #8]
 8005860:	68bb      	ldr	r3, [r7, #8]
 8005862:	4013      	ands	r3, r2
 8005864:	68ba      	ldr	r2, [r7, #8]
 8005866:	429a      	cmp	r2, r3
 8005868:	d101      	bne.n	800586e <SPI_WaitFlagStateUntilTimeout+0xc0>
 800586a:	2201      	movs	r2, #1
 800586c:	e000      	b.n	8005870 <SPI_WaitFlagStateUntilTimeout+0xc2>
 800586e:	2200      	movs	r2, #0
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	429a      	cmp	r2, r3
 8005874:	d1a3      	bne.n	80057be <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005876:	2300      	movs	r3, #0
}
 8005878:	4618      	mov	r0, r3
 800587a:	3710      	adds	r7, #16
 800587c:	46bd      	mov	sp, r7
 800587e:	bd80      	pop	{r7, pc}

08005880 <SPI_CheckFlag_BSY>:
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_CheckFlag_BSY(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af02      	add	r7, sp, #8
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2200      	movs	r2, #0
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff ff89 	bl	80057ae <SPI_WaitFlagStateUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <SPI_CheckFlag_BSY+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e000      	b.n	80058b4 <SPI_CheckFlag_BSY+0x34>
  }
  return HAL_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b082      	sub	sp, #8
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e01d      	b.n	800590a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d106      	bne.n	80058e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f7fd fd8c 	bl	8003400 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2202      	movs	r2, #2
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681a      	ldr	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4619      	mov	r1, r3
 80058fa:	4610      	mov	r0, r2
 80058fc:	f000 f968 	bl	8005bd0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3708      	adds	r7, #8
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}

08005912 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005912:	b480      	push	{r7}
 8005914:	b085      	sub	sp, #20
 8005916:	af00      	add	r7, sp, #0
 8005918:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68da      	ldr	r2, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f042 0201 	orr.w	r2, r2, #1
 8005928:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f003 0307 	and.w	r3, r3, #7
 8005934:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2b06      	cmp	r3, #6
 800593a:	d007      	beq.n	800594c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f042 0201 	orr.w	r2, r2, #1
 800594a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800594c:	2300      	movs	r3, #0
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005958:	4770      	bx	lr

0800595a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b082      	sub	sp, #8
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691b      	ldr	r3, [r3, #16]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b02      	cmp	r3, #2
 800596e:	d122      	bne.n	80059b6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68db      	ldr	r3, [r3, #12]
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b02      	cmp	r3, #2
 800597c:	d11b      	bne.n	80059b6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f06f 0202 	mvn.w	r2, #2
 8005986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2201      	movs	r2, #1
 800598c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699b      	ldr	r3, [r3, #24]
 8005994:	f003 0303 	and.w	r3, r3, #3
 8005998:	2b00      	cmp	r3, #0
 800599a:	d003      	beq.n	80059a4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f000 f8f8 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 80059a2:	e005      	b.n	80059b0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 f8ea 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f8fb 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b04      	cmp	r3, #4
 80059c2:	d122      	bne.n	8005a0a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68db      	ldr	r3, [r3, #12]
 80059ca:	f003 0304 	and.w	r3, r3, #4
 80059ce:	2b04      	cmp	r3, #4
 80059d0:	d11b      	bne.n	8005a0a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f06f 0204 	mvn.w	r2, #4
 80059da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	699b      	ldr	r3, [r3, #24]
 80059e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f8ce 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 80059f6:	e005      	b.n	8005a04 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 f8c0 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8d1 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	f003 0308 	and.w	r3, r3, #8
 8005a14:	2b08      	cmp	r3, #8
 8005a16:	d122      	bne.n	8005a5e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	2b08      	cmp	r3, #8
 8005a24:	d11b      	bne.n	8005a5e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f06f 0208 	mvn.w	r2, #8
 8005a2e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2204      	movs	r2, #4
 8005a34:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	69db      	ldr	r3, [r3, #28]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 f8a4 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005a4a:	e005      	b.n	8005a58 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f896 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f8a7 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b10      	cmp	r3, #16
 8005a6a:	d122      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f003 0310 	and.w	r3, r3, #16
 8005a76:	2b10      	cmp	r3, #16
 8005a78:	d11b      	bne.n	8005ab2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f06f 0210 	mvn.w	r2, #16
 8005a82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2208      	movs	r2, #8
 8005a88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	69db      	ldr	r3, [r3, #28]
 8005a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d003      	beq.n	8005aa0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f000 f87a 	bl	8005b92 <HAL_TIM_IC_CaptureCallback>
 8005a9e:	e005      	b.n	8005aac <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f000 f86c 	bl	8005b7e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f87d 	bl	8005ba6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f003 0301 	and.w	r3, r3, #1
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d10e      	bne.n	8005ade <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d107      	bne.n	8005ade <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f06f 0201 	mvn.w	r2, #1
 8005ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 f846 	bl	8005b6a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ae8:	2b80      	cmp	r3, #128	; 0x80
 8005aea:	d10e      	bne.n	8005b0a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af6:	2b80      	cmp	r3, #128	; 0x80
 8005af8:	d107      	bne.n	8005b0a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f989 	bl	8005e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	691b      	ldr	r3, [r3, #16]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d10e      	bne.n	8005b36 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d107      	bne.n	8005b36 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f842 	bl	8005bba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f003 0320 	and.w	r3, r3, #32
 8005b40:	2b20      	cmp	r3, #32
 8005b42:	d10e      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	f003 0320 	and.w	r3, r3, #32
 8005b4e:	2b20      	cmp	r3, #32
 8005b50:	d107      	bne.n	8005b62 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f06f 0220 	mvn.w	r2, #32
 8005b5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f953 	bl	8005e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b083      	sub	sp, #12
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005b72:	bf00      	nop
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b083      	sub	sp, #12
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005b86:	bf00      	nop
 8005b88:	370c      	adds	r7, #12
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b083      	sub	sp, #12
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005b9a:	bf00      	nop
 8005b9c:	370c      	adds	r7, #12
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba4:	4770      	bx	lr

08005ba6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ba6:	b480      	push	{r7}
 8005ba8:	b083      	sub	sp, #12
 8005baa:	af00      	add	r7, sp, #0
 8005bac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005bae:	bf00      	nop
 8005bb0:	370c      	adds	r7, #12
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb8:	4770      	bx	lr

08005bba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005bba:	b480      	push	{r7}
 8005bbc:	b083      	sub	sp, #12
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005bc2:	bf00      	nop
 8005bc4:	370c      	adds	r7, #12
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	4a40      	ldr	r2, [pc, #256]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d013      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bee:	d00f      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a3d      	ldr	r2, [pc, #244]	; (8005ce8 <TIM_Base_SetConfig+0x118>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00b      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a3c      	ldr	r2, [pc, #240]	; (8005cec <TIM_Base_SetConfig+0x11c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d007      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	4a3b      	ldr	r2, [pc, #236]	; (8005cf0 <TIM_Base_SetConfig+0x120>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d003      	beq.n	8005c10 <TIM_Base_SetConfig+0x40>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	4a3a      	ldr	r2, [pc, #232]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d108      	bne.n	8005c22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d02b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d027      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4a2c      	ldr	r2, [pc, #176]	; (8005ce8 <TIM_Base_SetConfig+0x118>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d023      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a2b      	ldr	r2, [pc, #172]	; (8005cec <TIM_Base_SetConfig+0x11c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d01f      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <TIM_Base_SetConfig+0x120>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d01b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d017      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a28      	ldr	r2, [pc, #160]	; (8005cf8 <TIM_Base_SetConfig+0x128>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a27      	ldr	r2, [pc, #156]	; (8005cfc <TIM_Base_SetConfig+0x12c>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00f      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a26      	ldr	r2, [pc, #152]	; (8005d00 <TIM_Base_SetConfig+0x130>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d00b      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a25      	ldr	r2, [pc, #148]	; (8005d04 <TIM_Base_SetConfig+0x134>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d007      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	4a24      	ldr	r2, [pc, #144]	; (8005d08 <TIM_Base_SetConfig+0x138>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d003      	beq.n	8005c82 <TIM_Base_SetConfig+0xb2>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	4a23      	ldr	r2, [pc, #140]	; (8005d0c <TIM_Base_SetConfig+0x13c>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d108      	bne.n	8005c94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68fa      	ldr	r2, [r7, #12]
 8005ca6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689a      	ldr	r2, [r3, #8]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	681a      	ldr	r2, [r3, #0]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <TIM_Base_SetConfig+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_Base_SetConfig+0xf8>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a0c      	ldr	r2, [pc, #48]	; (8005cf4 <TIM_Base_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d103      	bne.n	8005cd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	691a      	ldr	r2, [r3, #16]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2201      	movs	r2, #1
 8005cd4:	615a      	str	r2, [r3, #20]
}
 8005cd6:	bf00      	nop
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40010400 	.word	0x40010400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800
 8005d04:	40001800 	.word	0x40001800
 8005d08:	40001c00 	.word	0x40001c00
 8005d0c:	40002000 	.word	0x40002000

08005d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e05a      	b.n	8005dde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	; (8005dec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d022      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d74:	d01d      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1d      	ldr	r2, [pc, #116]	; (8005df0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d018      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d013      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d00e      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a18      	ldr	r2, [pc, #96]	; (8005dfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d009      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a17      	ldr	r2, [pc, #92]	; (8005e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d004      	beq.n	8005db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d10c      	bne.n	8005dcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	68ba      	ldr	r2, [r7, #8]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3714      	adds	r7, #20
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	40010000 	.word	0x40010000
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40010400 	.word	0x40010400
 8005e00:	40014000 	.word	0x40014000
 8005e04:	40001800 	.word	0x40001800

08005e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b082      	sub	sp, #8
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	e03f      	b.n	8005ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d106      	bne.n	8005e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f7fd fafa 	bl	8003450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2224      	movs	r2, #36	; 0x24
 8005e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb59 	bl	800652c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695a      	ldr	r2, [r3, #20]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68da      	ldr	r2, [r3, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ec0:	2300      	movs	r3, #0
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3708      	adds	r7, #8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b088      	sub	sp, #32
 8005ece:	af02      	add	r7, sp, #8
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005eda:	2300      	movs	r3, #0
 8005edc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	2b20      	cmp	r3, #32
 8005ee8:	f040 8090 	bne.w	800600c <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d002      	beq.n	8005ef8 <HAL_UART_Receive+0x2e>
 8005ef2:	88fb      	ldrh	r3, [r7, #6]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d101      	bne.n	8005efc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e088      	b.n	800600e <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <HAL_UART_Receive+0x40>
 8005f06:	2302      	movs	r3, #2
 8005f08:	e081      	b.n	800600e <HAL_UART_Receive+0x144>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2200      	movs	r2, #0
 8005f16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2222      	movs	r2, #34	; 0x22
 8005f1c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005f20:	f7fd fc06 	bl	8003730 <HAL_GetTick>
 8005f24:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	88fa      	ldrh	r2, [r7, #6]
 8005f2a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005f3a:	e05c      	b.n	8005ff6 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	3b01      	subs	r3, #1
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f52:	d12b      	bne.n	8005fac <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2120      	movs	r1, #32
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 f978 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e04f      	b.n	800600e <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10c      	bne.n	8005f94 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	3302      	adds	r3, #2
 8005f90:	60bb      	str	r3, [r7, #8]
 8005f92:	e030      	b.n	8005ff6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685b      	ldr	r3, [r3, #4]
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	b2db      	uxtb	r3, r3
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	60bb      	str	r3, [r7, #8]
 8005faa:	e024      	b.n	8005ff6 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	2120      	movs	r1, #32
 8005fb6:	68f8      	ldr	r0, [r7, #12]
 8005fb8:	f000 f94c 	bl	8006254 <UART_WaitOnFlagUntilTimeout>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e023      	b.n	800600e <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d108      	bne.n	8005fe0 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	6859      	ldr	r1, [r3, #4]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	1c5a      	adds	r2, r3, #1
 8005fd8:	60ba      	str	r2, [r7, #8]
 8005fda:	b2ca      	uxtb	r2, r1
 8005fdc:	701a      	strb	r2, [r3, #0]
 8005fde:	e00a      	b.n	8005ff6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	1c59      	adds	r1, r3, #1
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d19d      	bne.n	8005f3c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2220      	movs	r2, #32
 8006004:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8006008:	2300      	movs	r3, #0
 800600a:	e000      	b.n	800600e <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800600c:	2302      	movs	r3, #2
  }
}
 800600e:	4618      	mov	r0, r3
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
	...

08006018 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b088      	sub	sp, #32
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	695b      	ldr	r3, [r3, #20]
 8006036:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006038:	2300      	movs	r3, #0
 800603a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800603c:	2300      	movs	r3, #0
 800603e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d10d      	bne.n	800606a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d008      	beq.n	800606a <HAL_UART_IRQHandler+0x52>
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 f9e0 	bl	8006428 <UART_Receive_IT>
      return;
 8006068:	e0d0      	b.n	800620c <HAL_UART_IRQHandler+0x1f4>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b00      	cmp	r3, #0
 800606e:	f000 80b0 	beq.w	80061d2 <HAL_UART_IRQHandler+0x1ba>
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d105      	bne.n	8006088 <HAL_UART_IRQHandler+0x70>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 80a5 	beq.w	80061d2 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	f003 0301 	and.w	r3, r3, #1
 800608e:	2b00      	cmp	r3, #0
 8006090:	d00a      	beq.n	80060a8 <HAL_UART_IRQHandler+0x90>
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006098:	2b00      	cmp	r3, #0
 800609a:	d005      	beq.n	80060a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060a0:	f043 0201 	orr.w	r2, r3, #1
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	f003 0304 	and.w	r3, r3, #4
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00a      	beq.n	80060c8 <HAL_UART_IRQHandler+0xb0>
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d005      	beq.n	80060c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c0:	f043 0202 	orr.w	r2, r3, #2
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	f003 0302 	and.w	r3, r3, #2
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <HAL_UART_IRQHandler+0xd0>
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f003 0301 	and.w	r3, r3, #1
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d005      	beq.n	80060e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e0:	f043 0204 	orr.w	r2, r3, #4
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	f003 0308 	and.w	r3, r3, #8
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d00f      	beq.n	8006112 <HAL_UART_IRQHandler+0xfa>
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f003 0320 	and.w	r3, r3, #32
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d104      	bne.n	8006106 <HAL_UART_IRQHandler+0xee>
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	2b00      	cmp	r3, #0
 8006104:	d005      	beq.n	8006112 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800610a:	f043 0208 	orr.w	r2, r3, #8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006116:	2b00      	cmp	r3, #0
 8006118:	d077      	beq.n	800620a <HAL_UART_IRQHandler+0x1f2>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_UART_IRQHandler+0x11c>
 8006124:	69bb      	ldr	r3, [r7, #24]
 8006126:	f003 0320 	and.w	r3, r3, #32
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	f000 f97a 	bl	8006428 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	695b      	ldr	r3, [r3, #20]
 800613a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800613e:	2b40      	cmp	r3, #64	; 0x40
 8006140:	bf0c      	ite	eq
 8006142:	2301      	moveq	r3, #1
 8006144:	2300      	movne	r3, #0
 8006146:	b2db      	uxtb	r3, r3
 8006148:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	f003 0308 	and.w	r3, r3, #8
 8006152:	2b00      	cmp	r3, #0
 8006154:	d102      	bne.n	800615c <HAL_UART_IRQHandler+0x144>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d031      	beq.n	80061c0 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8c3 	bl	80062e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	695b      	ldr	r3, [r3, #20]
 8006168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616c:	2b40      	cmp	r3, #64	; 0x40
 800616e:	d123      	bne.n	80061b8 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	695a      	ldr	r2, [r3, #20]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800617e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006184:	2b00      	cmp	r3, #0
 8006186:	d013      	beq.n	80061b0 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800618c:	4a21      	ldr	r2, [pc, #132]	; (8006214 <HAL_UART_IRQHandler+0x1fc>)
 800618e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	4618      	mov	r0, r3
 8006196:	f7fd fc0c 	bl	80039b2 <HAL_DMA_Abort_IT>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d016      	beq.n	80061ce <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061aa:	4610      	mov	r0, r2
 80061ac:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ae:	e00e      	b.n	80061ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f000 f845 	bl	8006240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061b6:	e00a      	b.n	80061ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f000 f841 	bl	8006240 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061be:	e006      	b.n	80061ce <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f83d 	bl	8006240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80061cc:	e01d      	b.n	800620a <HAL_UART_IRQHandler+0x1f2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ce:	bf00      	nop
    return;
 80061d0:	e01b      	b.n	800620a <HAL_UART_IRQHandler+0x1f2>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d008      	beq.n	80061ee <HAL_UART_IRQHandler+0x1d6>
 80061dc:	69bb      	ldr	r3, [r7, #24]
 80061de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d003      	beq.n	80061ee <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f000 f8b0 	bl	800634c <UART_Transmit_IT>
    return;
 80061ec:	e00e      	b.n	800620c <HAL_UART_IRQHandler+0x1f4>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <HAL_UART_IRQHandler+0x1f4>
 80061f8:	69bb      	ldr	r3, [r7, #24]
 80061fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d004      	beq.n	800620c <HAL_UART_IRQHandler+0x1f4>
  {
    UART_EndTransmit_IT(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f8f8 	bl	80063f8 <UART_EndTransmit_IT>
    return;
 8006208:	e000      	b.n	800620c <HAL_UART_IRQHandler+0x1f4>
    return;
 800620a:	bf00      	nop
  }
}
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	08006325 	.word	0x08006325

08006218 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	603b      	str	r3, [r7, #0]
 8006260:	4613      	mov	r3, r2
 8006262:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006264:	e02c      	b.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006266:	69bb      	ldr	r3, [r7, #24]
 8006268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800626c:	d028      	beq.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d007      	beq.n	8006284 <UART_WaitOnFlagUntilTimeout+0x30>
 8006274:	f7fd fa5c 	bl	8003730 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	69ba      	ldr	r2, [r7, #24]
 8006280:	429a      	cmp	r2, r3
 8006282:	d21d      	bcs.n	80062c0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68da      	ldr	r2, [r3, #12]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006292:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	695a      	ldr	r2, [r3, #20]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f022 0201 	bic.w	r2, r2, #1
 80062a2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	2220      	movs	r2, #32
 80062a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e00f      	b.n	80062e0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	4013      	ands	r3, r2
 80062ca:	68ba      	ldr	r2, [r7, #8]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	bf0c      	ite	eq
 80062d0:	2301      	moveq	r3, #1
 80062d2:	2300      	movne	r3, #0
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	461a      	mov	r2, r3
 80062d8:	79fb      	ldrb	r3, [r7, #7]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d0c3      	beq.n	8006266 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062de:	2300      	movs	r3, #0
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	3710      	adds	r7, #16
 80062e4:	46bd      	mov	sp, r7
 80062e6:	bd80      	pop	{r7, pc}

080062e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68da      	ldr	r2, [r3, #12]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	695a      	ldr	r2, [r3, #20]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 0201 	bic.w	r2, r2, #1
 800630e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2220      	movs	r2, #32
 8006314:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f7ff ff7e 	bl	8006240 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006344:	bf00      	nop
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b21      	cmp	r3, #33	; 0x21
 800635e:	d144      	bne.n	80063ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	689b      	ldr	r3, [r3, #8]
 8006364:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006368:	d11a      	bne.n	80063a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	881b      	ldrh	r3, [r3, #0]
 8006374:	461a      	mov	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800637e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	691b      	ldr	r3, [r3, #16]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d105      	bne.n	8006394 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a1b      	ldr	r3, [r3, #32]
 800638c:	1c9a      	adds	r2, r3, #2
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	621a      	str	r2, [r3, #32]
 8006392:	e00e      	b.n	80063b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6a1b      	ldr	r3, [r3, #32]
 8006398:	1c5a      	adds	r2, r3, #1
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	621a      	str	r2, [r3, #32]
 800639e:	e008      	b.n	80063b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6a1b      	ldr	r3, [r3, #32]
 80063a4:	1c59      	adds	r1, r3, #1
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	6211      	str	r1, [r2, #32]
 80063aa:	781a      	ldrb	r2, [r3, #0]
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	3b01      	subs	r3, #1
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4619      	mov	r1, r3
 80063c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10f      	bne.n	80063e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	68da      	ldr	r2, [r3, #12]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68da      	ldr	r2, [r3, #12]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063e6:	2300      	movs	r3, #0
 80063e8:	e000      	b.n	80063ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80063ea:	2302      	movs	r3, #2
  }
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3714      	adds	r7, #20
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68da      	ldr	r2, [r3, #12]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800640e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2220      	movs	r2, #32
 8006414:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff fefd 	bl	8006218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800641e:	2300      	movs	r3, #0
}
 8006420:	4618      	mov	r0, r3
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006436:	b2db      	uxtb	r3, r3
 8006438:	2b22      	cmp	r3, #34	; 0x22
 800643a:	d171      	bne.n	8006520 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006444:	d123      	bne.n	800648e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d10e      	bne.n	8006472 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	b29b      	uxth	r3, r3
 800645c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006460:	b29a      	uxth	r2, r3
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	1c9a      	adds	r2, r3, #2
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	629a      	str	r2, [r3, #40]	; 0x28
 8006470:	e029      	b.n	80064c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	685b      	ldr	r3, [r3, #4]
 8006478:	b29b      	uxth	r3, r3
 800647a:	b2db      	uxtb	r3, r3
 800647c:	b29a      	uxth	r2, r3
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	629a      	str	r2, [r3, #40]	; 0x28
 800648c:	e01b      	b.n	80064c6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10a      	bne.n	80064ac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6858      	ldr	r0, [r3, #4]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6291      	str	r1, [r2, #40]	; 0x28
 80064a6:	b2c2      	uxtb	r2, r0
 80064a8:	701a      	strb	r2, [r3, #0]
 80064aa:	e00c      	b.n	80064c6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	b2da      	uxtb	r2, r3
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b8:	1c58      	adds	r0, r3, #1
 80064ba:	6879      	ldr	r1, [r7, #4]
 80064bc:	6288      	str	r0, [r1, #40]	; 0x28
 80064be:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064c2:	b2d2      	uxtb	r2, r2
 80064c4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	3b01      	subs	r3, #1
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	4619      	mov	r1, r3
 80064d4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d120      	bne.n	800651c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	68da      	ldr	r2, [r3, #12]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f022 0220 	bic.w	r2, r2, #32
 80064e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68da      	ldr	r2, [r3, #12]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695a      	ldr	r2, [r3, #20]
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f022 0201 	bic.w	r2, r2, #1
 8006508:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7ff fe8a 	bl	800622c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	e002      	b.n	8006522 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800651c:	2300      	movs	r3, #0
 800651e:	e000      	b.n	8006522 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006520:	2302      	movs	r3, #2
  }
}
 8006522:	4618      	mov	r0, r3
 8006524:	3710      	adds	r7, #16
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
	...

0800652c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800652c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	b0bd      	sub	sp, #244	; 0xf4
 8006532:	af00      	add	r7, sp, #0
 8006534:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006544:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006548:	68d9      	ldr	r1, [r3, #12]
 800654a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800654e:	681a      	ldr	r2, [r3, #0]
 8006550:	ea40 0301 	orr.w	r3, r0, r1
 8006554:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655a:	689a      	ldr	r2, [r3, #8]
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	431a      	orrs	r2, r3
 8006564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	431a      	orrs	r2, r3
 800656c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	4313      	orrs	r3, r2
 8006574:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8006578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006584:	f021 010c 	bic.w	r1, r1, #12
 8006588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006592:	430b      	orrs	r3, r1
 8006594:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	695b      	ldr	r3, [r3, #20]
 800659e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80065a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065a6:	6999      	ldr	r1, [r3, #24]
 80065a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	ea40 0301 	orr.w	r3, r0, r1
 80065b2:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b8:	69db      	ldr	r3, [r3, #28]
 80065ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065be:	f040 81a5 	bne.w	800690c <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4bcd      	ldr	r3, [pc, #820]	; (8006900 <UART_SetConfig+0x3d4>)
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d006      	beq.n	80065dc <UART_SetConfig+0xb0>
 80065ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	4bcb      	ldr	r3, [pc, #812]	; (8006904 <UART_SetConfig+0x3d8>)
 80065d6:	429a      	cmp	r2, r3
 80065d8:	f040 80cb 	bne.w	8006772 <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065dc:	f7fe fc34 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 80065e0:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065e4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065e8:	461c      	mov	r4, r3
 80065ea:	f04f 0500 	mov.w	r5, #0
 80065ee:	4622      	mov	r2, r4
 80065f0:	462b      	mov	r3, r5
 80065f2:	1891      	adds	r1, r2, r2
 80065f4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80065f8:	415b      	adcs	r3, r3
 80065fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80065fe:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8006602:	1912      	adds	r2, r2, r4
 8006604:	eb45 0303 	adc.w	r3, r5, r3
 8006608:	f04f 0000 	mov.w	r0, #0
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	00d9      	lsls	r1, r3, #3
 8006612:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006616:	00d0      	lsls	r0, r2, #3
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	1911      	adds	r1, r2, r4
 800661e:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8006622:	416b      	adcs	r3, r5
 8006624:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	461a      	mov	r2, r3
 8006630:	f04f 0300 	mov.w	r3, #0
 8006634:	1891      	adds	r1, r2, r2
 8006636:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 800663a:	415b      	adcs	r3, r3
 800663c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006640:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8006644:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8006648:	f7f9 fdd8 	bl	80001fc <__aeabi_uldivmod>
 800664c:	4602      	mov	r2, r0
 800664e:	460b      	mov	r3, r1
 8006650:	4bad      	ldr	r3, [pc, #692]	; (8006908 <UART_SetConfig+0x3dc>)
 8006652:	fba3 2302 	umull	r2, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	011e      	lsls	r6, r3, #4
 800665a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800665e:	461c      	mov	r4, r3
 8006660:	f04f 0500 	mov.w	r5, #0
 8006664:	4622      	mov	r2, r4
 8006666:	462b      	mov	r3, r5
 8006668:	1891      	adds	r1, r2, r2
 800666a:	67b9      	str	r1, [r7, #120]	; 0x78
 800666c:	415b      	adcs	r3, r3
 800666e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006670:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8006674:	1912      	adds	r2, r2, r4
 8006676:	eb45 0303 	adc.w	r3, r5, r3
 800667a:	f04f 0000 	mov.w	r0, #0
 800667e:	f04f 0100 	mov.w	r1, #0
 8006682:	00d9      	lsls	r1, r3, #3
 8006684:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006688:	00d0      	lsls	r0, r2, #3
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	1911      	adds	r1, r2, r4
 8006690:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8006694:	416b      	adcs	r3, r5
 8006696:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800669a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	461a      	mov	r2, r3
 80066a2:	f04f 0300 	mov.w	r3, #0
 80066a6:	1891      	adds	r1, r2, r2
 80066a8:	6739      	str	r1, [r7, #112]	; 0x70
 80066aa:	415b      	adcs	r3, r3
 80066ac:	677b      	str	r3, [r7, #116]	; 0x74
 80066ae:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80066b2:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80066b6:	f7f9 fda1 	bl	80001fc <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4b92      	ldr	r3, [pc, #584]	; (8006908 <UART_SetConfig+0x3dc>)
 80066c0:	fba3 1302 	umull	r1, r3, r3, r2
 80066c4:	095b      	lsrs	r3, r3, #5
 80066c6:	2164      	movs	r1, #100	; 0x64
 80066c8:	fb01 f303 	mul.w	r3, r1, r3
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	00db      	lsls	r3, r3, #3
 80066d0:	3332      	adds	r3, #50	; 0x32
 80066d2:	4a8d      	ldr	r2, [pc, #564]	; (8006908 <UART_SetConfig+0x3dc>)
 80066d4:	fba2 2303 	umull	r2, r3, r2, r3
 80066d8:	095b      	lsrs	r3, r3, #5
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80066e0:	441e      	add	r6, r3
 80066e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80066e6:	4618      	mov	r0, r3
 80066e8:	f04f 0100 	mov.w	r1, #0
 80066ec:	4602      	mov	r2, r0
 80066ee:	460b      	mov	r3, r1
 80066f0:	1894      	adds	r4, r2, r2
 80066f2:	66bc      	str	r4, [r7, #104]	; 0x68
 80066f4:	415b      	adcs	r3, r3
 80066f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80066fc:	1812      	adds	r2, r2, r0
 80066fe:	eb41 0303 	adc.w	r3, r1, r3
 8006702:	f04f 0400 	mov.w	r4, #0
 8006706:	f04f 0500 	mov.w	r5, #0
 800670a:	00dd      	lsls	r5, r3, #3
 800670c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006710:	00d4      	lsls	r4, r2, #3
 8006712:	4622      	mov	r2, r4
 8006714:	462b      	mov	r3, r5
 8006716:	1814      	adds	r4, r2, r0
 8006718:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 800671c:	414b      	adcs	r3, r1
 800671e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	461a      	mov	r2, r3
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	1891      	adds	r1, r2, r2
 8006730:	6639      	str	r1, [r7, #96]	; 0x60
 8006732:	415b      	adcs	r3, r3
 8006734:	667b      	str	r3, [r7, #100]	; 0x64
 8006736:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800673a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800673e:	f7f9 fd5d 	bl	80001fc <__aeabi_uldivmod>
 8006742:	4602      	mov	r2, r0
 8006744:	460b      	mov	r3, r1
 8006746:	4b70      	ldr	r3, [pc, #448]	; (8006908 <UART_SetConfig+0x3dc>)
 8006748:	fba3 1302 	umull	r1, r3, r3, r2
 800674c:	095b      	lsrs	r3, r3, #5
 800674e:	2164      	movs	r1, #100	; 0x64
 8006750:	fb01 f303 	mul.w	r3, r1, r3
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	00db      	lsls	r3, r3, #3
 8006758:	3332      	adds	r3, #50	; 0x32
 800675a:	4a6b      	ldr	r2, [pc, #428]	; (8006908 <UART_SetConfig+0x3dc>)
 800675c:	fba2 2303 	umull	r2, r3, r2, r3
 8006760:	095b      	lsrs	r3, r3, #5
 8006762:	f003 0207 	and.w	r2, r3, #7
 8006766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4432      	add	r2, r6
 800676e:	609a      	str	r2, [r3, #8]
 8006770:	e26d      	b.n	8006c4e <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006772:	f7fe fb55 	bl	8004e20 <HAL_RCC_GetPCLK1Freq>
 8006776:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800677a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800677e:	461c      	mov	r4, r3
 8006780:	f04f 0500 	mov.w	r5, #0
 8006784:	4622      	mov	r2, r4
 8006786:	462b      	mov	r3, r5
 8006788:	1891      	adds	r1, r2, r2
 800678a:	65b9      	str	r1, [r7, #88]	; 0x58
 800678c:	415b      	adcs	r3, r3
 800678e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006790:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006794:	1912      	adds	r2, r2, r4
 8006796:	eb45 0303 	adc.w	r3, r5, r3
 800679a:	f04f 0000 	mov.w	r0, #0
 800679e:	f04f 0100 	mov.w	r1, #0
 80067a2:	00d9      	lsls	r1, r3, #3
 80067a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067a8:	00d0      	lsls	r0, r2, #3
 80067aa:	4602      	mov	r2, r0
 80067ac:	460b      	mov	r3, r1
 80067ae:	1911      	adds	r1, r2, r4
 80067b0:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 80067b4:	416b      	adcs	r3, r5
 80067b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f04f 0300 	mov.w	r3, #0
 80067c6:	1891      	adds	r1, r2, r2
 80067c8:	6539      	str	r1, [r7, #80]	; 0x50
 80067ca:	415b      	adcs	r3, r3
 80067cc:	657b      	str	r3, [r7, #84]	; 0x54
 80067ce:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067d2:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 80067d6:	f7f9 fd11 	bl	80001fc <__aeabi_uldivmod>
 80067da:	4602      	mov	r2, r0
 80067dc:	460b      	mov	r3, r1
 80067de:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <UART_SetConfig+0x3dc>)
 80067e0:	fba3 2302 	umull	r2, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	011e      	lsls	r6, r3, #4
 80067e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067ec:	461c      	mov	r4, r3
 80067ee:	f04f 0500 	mov.w	r5, #0
 80067f2:	4622      	mov	r2, r4
 80067f4:	462b      	mov	r3, r5
 80067f6:	1891      	adds	r1, r2, r2
 80067f8:	64b9      	str	r1, [r7, #72]	; 0x48
 80067fa:	415b      	adcs	r3, r3
 80067fc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006802:	1912      	adds	r2, r2, r4
 8006804:	eb45 0303 	adc.w	r3, r5, r3
 8006808:	f04f 0000 	mov.w	r0, #0
 800680c:	f04f 0100 	mov.w	r1, #0
 8006810:	00d9      	lsls	r1, r3, #3
 8006812:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006816:	00d0      	lsls	r0, r2, #3
 8006818:	4602      	mov	r2, r0
 800681a:	460b      	mov	r3, r1
 800681c:	1911      	adds	r1, r2, r4
 800681e:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8006822:	416b      	adcs	r3, r5
 8006824:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	461a      	mov	r2, r3
 8006830:	f04f 0300 	mov.w	r3, #0
 8006834:	1891      	adds	r1, r2, r2
 8006836:	6439      	str	r1, [r7, #64]	; 0x40
 8006838:	415b      	adcs	r3, r3
 800683a:	647b      	str	r3, [r7, #68]	; 0x44
 800683c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006840:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8006844:	f7f9 fcda 	bl	80001fc <__aeabi_uldivmod>
 8006848:	4602      	mov	r2, r0
 800684a:	460b      	mov	r3, r1
 800684c:	4b2e      	ldr	r3, [pc, #184]	; (8006908 <UART_SetConfig+0x3dc>)
 800684e:	fba3 1302 	umull	r1, r3, r3, r2
 8006852:	095b      	lsrs	r3, r3, #5
 8006854:	2164      	movs	r1, #100	; 0x64
 8006856:	fb01 f303 	mul.w	r3, r1, r3
 800685a:	1ad3      	subs	r3, r2, r3
 800685c:	00db      	lsls	r3, r3, #3
 800685e:	3332      	adds	r3, #50	; 0x32
 8006860:	4a29      	ldr	r2, [pc, #164]	; (8006908 <UART_SetConfig+0x3dc>)
 8006862:	fba2 2303 	umull	r2, r3, r2, r3
 8006866:	095b      	lsrs	r3, r3, #5
 8006868:	005b      	lsls	r3, r3, #1
 800686a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800686e:	441e      	add	r6, r3
 8006870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006874:	4618      	mov	r0, r3
 8006876:	f04f 0100 	mov.w	r1, #0
 800687a:	4602      	mov	r2, r0
 800687c:	460b      	mov	r3, r1
 800687e:	1894      	adds	r4, r2, r2
 8006880:	63bc      	str	r4, [r7, #56]	; 0x38
 8006882:	415b      	adcs	r3, r3
 8006884:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006886:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800688a:	1812      	adds	r2, r2, r0
 800688c:	eb41 0303 	adc.w	r3, r1, r3
 8006890:	f04f 0400 	mov.w	r4, #0
 8006894:	f04f 0500 	mov.w	r5, #0
 8006898:	00dd      	lsls	r5, r3, #3
 800689a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800689e:	00d4      	lsls	r4, r2, #3
 80068a0:	4622      	mov	r2, r4
 80068a2:	462b      	mov	r3, r5
 80068a4:	1814      	adds	r4, r2, r0
 80068a6:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 80068aa:	414b      	adcs	r3, r1
 80068ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	461a      	mov	r2, r3
 80068b8:	f04f 0300 	mov.w	r3, #0
 80068bc:	1891      	adds	r1, r2, r2
 80068be:	6339      	str	r1, [r7, #48]	; 0x30
 80068c0:	415b      	adcs	r3, r3
 80068c2:	637b      	str	r3, [r7, #52]	; 0x34
 80068c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80068c8:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068cc:	f7f9 fc96 	bl	80001fc <__aeabi_uldivmod>
 80068d0:	4602      	mov	r2, r0
 80068d2:	460b      	mov	r3, r1
 80068d4:	4b0c      	ldr	r3, [pc, #48]	; (8006908 <UART_SetConfig+0x3dc>)
 80068d6:	fba3 1302 	umull	r1, r3, r3, r2
 80068da:	095b      	lsrs	r3, r3, #5
 80068dc:	2164      	movs	r1, #100	; 0x64
 80068de:	fb01 f303 	mul.w	r3, r1, r3
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	00db      	lsls	r3, r3, #3
 80068e6:	3332      	adds	r3, #50	; 0x32
 80068e8:	4a07      	ldr	r2, [pc, #28]	; (8006908 <UART_SetConfig+0x3dc>)
 80068ea:	fba2 2303 	umull	r2, r3, r2, r3
 80068ee:	095b      	lsrs	r3, r3, #5
 80068f0:	f003 0207 	and.w	r2, r3, #7
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4432      	add	r2, r6
 80068fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80068fe:	e1a6      	b.n	8006c4e <UART_SetConfig+0x722>
 8006900:	40011000 	.word	0x40011000
 8006904:	40011400 	.word	0x40011400
 8006908:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800690c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	4bd1      	ldr	r3, [pc, #836]	; (8006c58 <UART_SetConfig+0x72c>)
 8006914:	429a      	cmp	r2, r3
 8006916:	d006      	beq.n	8006926 <UART_SetConfig+0x3fa>
 8006918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4bcf      	ldr	r3, [pc, #828]	; (8006c5c <UART_SetConfig+0x730>)
 8006920:	429a      	cmp	r2, r3
 8006922:	f040 80ca 	bne.w	8006aba <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006926:	f7fe fa8f 	bl	8004e48 <HAL_RCC_GetPCLK2Freq>
 800692a:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800692e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006932:	461c      	mov	r4, r3
 8006934:	f04f 0500 	mov.w	r5, #0
 8006938:	4622      	mov	r2, r4
 800693a:	462b      	mov	r3, r5
 800693c:	1891      	adds	r1, r2, r2
 800693e:	62b9      	str	r1, [r7, #40]	; 0x28
 8006940:	415b      	adcs	r3, r3
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006944:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006948:	1912      	adds	r2, r2, r4
 800694a:	eb45 0303 	adc.w	r3, r5, r3
 800694e:	f04f 0000 	mov.w	r0, #0
 8006952:	f04f 0100 	mov.w	r1, #0
 8006956:	00d9      	lsls	r1, r3, #3
 8006958:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800695c:	00d0      	lsls	r0, r2, #3
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	eb12 0a04 	adds.w	sl, r2, r4
 8006966:	eb43 0b05 	adc.w	fp, r3, r5
 800696a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	4618      	mov	r0, r3
 8006972:	f04f 0100 	mov.w	r1, #0
 8006976:	f04f 0200 	mov.w	r2, #0
 800697a:	f04f 0300 	mov.w	r3, #0
 800697e:	008b      	lsls	r3, r1, #2
 8006980:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006984:	0082      	lsls	r2, r0, #2
 8006986:	4650      	mov	r0, sl
 8006988:	4659      	mov	r1, fp
 800698a:	f7f9 fc37 	bl	80001fc <__aeabi_uldivmod>
 800698e:	4602      	mov	r2, r0
 8006990:	460b      	mov	r3, r1
 8006992:	4bb3      	ldr	r3, [pc, #716]	; (8006c60 <UART_SetConfig+0x734>)
 8006994:	fba3 2302 	umull	r2, r3, r3, r2
 8006998:	095b      	lsrs	r3, r3, #5
 800699a:	011e      	lsls	r6, r3, #4
 800699c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a0:	4618      	mov	r0, r3
 80069a2:	f04f 0100 	mov.w	r1, #0
 80069a6:	4602      	mov	r2, r0
 80069a8:	460b      	mov	r3, r1
 80069aa:	1894      	adds	r4, r2, r2
 80069ac:	623c      	str	r4, [r7, #32]
 80069ae:	415b      	adcs	r3, r3
 80069b0:	627b      	str	r3, [r7, #36]	; 0x24
 80069b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80069b6:	1812      	adds	r2, r2, r0
 80069b8:	eb41 0303 	adc.w	r3, r1, r3
 80069bc:	f04f 0400 	mov.w	r4, #0
 80069c0:	f04f 0500 	mov.w	r5, #0
 80069c4:	00dd      	lsls	r5, r3, #3
 80069c6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80069ca:	00d4      	lsls	r4, r2, #3
 80069cc:	4622      	mov	r2, r4
 80069ce:	462b      	mov	r3, r5
 80069d0:	1814      	adds	r4, r2, r0
 80069d2:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 80069d6:	414b      	adcs	r3, r1
 80069d8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	4618      	mov	r0, r3
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	f04f 0200 	mov.w	r2, #0
 80069ec:	f04f 0300 	mov.w	r3, #0
 80069f0:	008b      	lsls	r3, r1, #2
 80069f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80069f6:	0082      	lsls	r2, r0, #2
 80069f8:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 80069fc:	f7f9 fbfe 	bl	80001fc <__aeabi_uldivmod>
 8006a00:	4602      	mov	r2, r0
 8006a02:	460b      	mov	r3, r1
 8006a04:	4b96      	ldr	r3, [pc, #600]	; (8006c60 <UART_SetConfig+0x734>)
 8006a06:	fba3 1302 	umull	r1, r3, r3, r2
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	2164      	movs	r1, #100	; 0x64
 8006a0e:	fb01 f303 	mul.w	r3, r1, r3
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	011b      	lsls	r3, r3, #4
 8006a16:	3332      	adds	r3, #50	; 0x32
 8006a18:	4a91      	ldr	r2, [pc, #580]	; (8006c60 <UART_SetConfig+0x734>)
 8006a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a1e:	095b      	lsrs	r3, r3, #5
 8006a20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a24:	441e      	add	r6, r3
 8006a26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f04f 0100 	mov.w	r1, #0
 8006a30:	4602      	mov	r2, r0
 8006a32:	460b      	mov	r3, r1
 8006a34:	1894      	adds	r4, r2, r2
 8006a36:	61bc      	str	r4, [r7, #24]
 8006a38:	415b      	adcs	r3, r3
 8006a3a:	61fb      	str	r3, [r7, #28]
 8006a3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a40:	1812      	adds	r2, r2, r0
 8006a42:	eb41 0303 	adc.w	r3, r1, r3
 8006a46:	f04f 0400 	mov.w	r4, #0
 8006a4a:	f04f 0500 	mov.w	r5, #0
 8006a4e:	00dd      	lsls	r5, r3, #3
 8006a50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a54:	00d4      	lsls	r4, r2, #3
 8006a56:	4622      	mov	r2, r4
 8006a58:	462b      	mov	r3, r5
 8006a5a:	1814      	adds	r4, r2, r0
 8006a5c:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006a60:	414b      	adcs	r3, r1
 8006a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	008b      	lsls	r3, r1, #2
 8006a7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006a80:	0082      	lsls	r2, r0, #2
 8006a82:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006a86:	f7f9 fbb9 	bl	80001fc <__aeabi_uldivmod>
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	4b74      	ldr	r3, [pc, #464]	; (8006c60 <UART_SetConfig+0x734>)
 8006a90:	fba3 1302 	umull	r1, r3, r3, r2
 8006a94:	095b      	lsrs	r3, r3, #5
 8006a96:	2164      	movs	r1, #100	; 0x64
 8006a98:	fb01 f303 	mul.w	r3, r1, r3
 8006a9c:	1ad3      	subs	r3, r2, r3
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	3332      	adds	r3, #50	; 0x32
 8006aa2:	4a6f      	ldr	r2, [pc, #444]	; (8006c60 <UART_SetConfig+0x734>)
 8006aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8006aa8:	095b      	lsrs	r3, r3, #5
 8006aaa:	f003 020f 	and.w	r2, r3, #15
 8006aae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4432      	add	r2, r6
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	e0c9      	b.n	8006c4e <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006aba:	f7fe f9b1 	bl	8004e20 <HAL_RCC_GetPCLK1Freq>
 8006abe:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ac2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006ac6:	461c      	mov	r4, r3
 8006ac8:	f04f 0500 	mov.w	r5, #0
 8006acc:	4622      	mov	r2, r4
 8006ace:	462b      	mov	r3, r5
 8006ad0:	1891      	adds	r1, r2, r2
 8006ad2:	6139      	str	r1, [r7, #16]
 8006ad4:	415b      	adcs	r3, r3
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006adc:	1912      	adds	r2, r2, r4
 8006ade:	eb45 0303 	adc.w	r3, r5, r3
 8006ae2:	f04f 0000 	mov.w	r0, #0
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	00d9      	lsls	r1, r3, #3
 8006aec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006af0:	00d0      	lsls	r0, r2, #3
 8006af2:	4602      	mov	r2, r0
 8006af4:	460b      	mov	r3, r1
 8006af6:	eb12 0804 	adds.w	r8, r2, r4
 8006afa:	eb43 0905 	adc.w	r9, r3, r5
 8006afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	4618      	mov	r0, r3
 8006b06:	f04f 0100 	mov.w	r1, #0
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	008b      	lsls	r3, r1, #2
 8006b14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b18:	0082      	lsls	r2, r0, #2
 8006b1a:	4640      	mov	r0, r8
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	f7f9 fb6d 	bl	80001fc <__aeabi_uldivmod>
 8006b22:	4602      	mov	r2, r0
 8006b24:	460b      	mov	r3, r1
 8006b26:	4b4e      	ldr	r3, [pc, #312]	; (8006c60 <UART_SetConfig+0x734>)
 8006b28:	fba3 2302 	umull	r2, r3, r3, r2
 8006b2c:	095b      	lsrs	r3, r3, #5
 8006b2e:	011e      	lsls	r6, r3, #4
 8006b30:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b34:	4618      	mov	r0, r3
 8006b36:	f04f 0100 	mov.w	r1, #0
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	1894      	adds	r4, r2, r2
 8006b40:	60bc      	str	r4, [r7, #8]
 8006b42:	415b      	adcs	r3, r3
 8006b44:	60fb      	str	r3, [r7, #12]
 8006b46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b4a:	1812      	adds	r2, r2, r0
 8006b4c:	eb41 0303 	adc.w	r3, r1, r3
 8006b50:	f04f 0400 	mov.w	r4, #0
 8006b54:	f04f 0500 	mov.w	r5, #0
 8006b58:	00dd      	lsls	r5, r3, #3
 8006b5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b5e:	00d4      	lsls	r4, r2, #3
 8006b60:	4622      	mov	r2, r4
 8006b62:	462b      	mov	r3, r5
 8006b64:	1814      	adds	r4, r2, r0
 8006b66:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006b6a:	414b      	adcs	r3, r1
 8006b6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	4618      	mov	r0, r3
 8006b78:	f04f 0100 	mov.w	r1, #0
 8006b7c:	f04f 0200 	mov.w	r2, #0
 8006b80:	f04f 0300 	mov.w	r3, #0
 8006b84:	008b      	lsls	r3, r1, #2
 8006b86:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b8a:	0082      	lsls	r2, r0, #2
 8006b8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b90:	f7f9 fb34 	bl	80001fc <__aeabi_uldivmod>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <UART_SetConfig+0x734>)
 8006b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8006b9e:	095b      	lsrs	r3, r3, #5
 8006ba0:	2164      	movs	r1, #100	; 0x64
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	3332      	adds	r3, #50	; 0x32
 8006bac:	4a2c      	ldr	r2, [pc, #176]	; (8006c60 <UART_SetConfig+0x734>)
 8006bae:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb2:	095b      	lsrs	r3, r3, #5
 8006bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bb8:	441e      	add	r6, r3
 8006bba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	f04f 0100 	mov.w	r1, #0
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	1894      	adds	r4, r2, r2
 8006bca:	603c      	str	r4, [r7, #0]
 8006bcc:	415b      	adcs	r3, r3
 8006bce:	607b      	str	r3, [r7, #4]
 8006bd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bd4:	1812      	adds	r2, r2, r0
 8006bd6:	eb41 0303 	adc.w	r3, r1, r3
 8006bda:	f04f 0400 	mov.w	r4, #0
 8006bde:	f04f 0500 	mov.w	r5, #0
 8006be2:	00dd      	lsls	r5, r3, #3
 8006be4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006be8:	00d4      	lsls	r4, r2, #3
 8006bea:	4622      	mov	r2, r4
 8006bec:	462b      	mov	r3, r5
 8006bee:	1814      	adds	r4, r2, r0
 8006bf0:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006bf4:	414b      	adcs	r3, r1
 8006bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	4618      	mov	r0, r3
 8006c02:	f04f 0100 	mov.w	r1, #0
 8006c06:	f04f 0200 	mov.w	r2, #0
 8006c0a:	f04f 0300 	mov.w	r3, #0
 8006c0e:	008b      	lsls	r3, r1, #2
 8006c10:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c14:	0082      	lsls	r2, r0, #2
 8006c16:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006c1a:	f7f9 faef 	bl	80001fc <__aeabi_uldivmod>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4b0f      	ldr	r3, [pc, #60]	; (8006c60 <UART_SetConfig+0x734>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	011b      	lsls	r3, r3, #4
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <UART_SetConfig+0x734>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f003 020f 	and.w	r2, r3, #15
 8006c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4432      	add	r2, r6
 8006c4a:	609a      	str	r2, [r3, #8]
}
 8006c4c:	e7ff      	b.n	8006c4e <UART_SetConfig+0x722>
 8006c4e:	bf00      	nop
 8006c50:	37f4      	adds	r7, #244	; 0xf4
 8006c52:	46bd      	mov	sp, r7
 8006c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c58:	40011000 	.word	0x40011000
 8006c5c:	40011400 	.word	0x40011400
 8006c60:	51eb851f 	.word	0x51eb851f

08006c64 <__libc_init_array>:
 8006c64:	b570      	push	{r4, r5, r6, lr}
 8006c66:	4d0d      	ldr	r5, [pc, #52]	; (8006c9c <__libc_init_array+0x38>)
 8006c68:	4c0d      	ldr	r4, [pc, #52]	; (8006ca0 <__libc_init_array+0x3c>)
 8006c6a:	1b64      	subs	r4, r4, r5
 8006c6c:	10a4      	asrs	r4, r4, #2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	42a6      	cmp	r6, r4
 8006c72:	d109      	bne.n	8006c88 <__libc_init_array+0x24>
 8006c74:	4d0b      	ldr	r5, [pc, #44]	; (8006ca4 <__libc_init_array+0x40>)
 8006c76:	4c0c      	ldr	r4, [pc, #48]	; (8006ca8 <__libc_init_array+0x44>)
 8006c78:	f000 f842 	bl	8006d00 <_init>
 8006c7c:	1b64      	subs	r4, r4, r5
 8006c7e:	10a4      	asrs	r4, r4, #2
 8006c80:	2600      	movs	r6, #0
 8006c82:	42a6      	cmp	r6, r4
 8006c84:	d105      	bne.n	8006c92 <__libc_init_array+0x2e>
 8006c86:	bd70      	pop	{r4, r5, r6, pc}
 8006c88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c8c:	4798      	blx	r3
 8006c8e:	3601      	adds	r6, #1
 8006c90:	e7ee      	b.n	8006c70 <__libc_init_array+0xc>
 8006c92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c96:	4798      	blx	r3
 8006c98:	3601      	adds	r6, #1
 8006c9a:	e7f2      	b.n	8006c82 <__libc_init_array+0x1e>
 8006c9c:	0800717c 	.word	0x0800717c
 8006ca0:	0800717c 	.word	0x0800717c
 8006ca4:	0800717c 	.word	0x0800717c
 8006ca8:	08007180 	.word	0x08007180

08006cac <memset>:
 8006cac:	4402      	add	r2, r0
 8006cae:	4603      	mov	r3, r0
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d100      	bne.n	8006cb6 <memset+0xa>
 8006cb4:	4770      	bx	lr
 8006cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8006cba:	e7f9      	b.n	8006cb0 <memset+0x4>

08006cbc <strcat>:
 8006cbc:	b510      	push	{r4, lr}
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	7814      	ldrb	r4, [r2, #0]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	3201      	adds	r2, #1
 8006cc6:	2c00      	cmp	r4, #0
 8006cc8:	d1fa      	bne.n	8006cc0 <strcat+0x4>
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006cd0:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	d1f9      	bne.n	8006ccc <strcat+0x10>
 8006cd8:	bd10      	pop	{r4, pc}

08006cda <strncpy>:
 8006cda:	b510      	push	{r4, lr}
 8006cdc:	3901      	subs	r1, #1
 8006cde:	4603      	mov	r3, r0
 8006ce0:	b132      	cbz	r2, 8006cf0 <strncpy+0x16>
 8006ce2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ce6:	f803 4b01 	strb.w	r4, [r3], #1
 8006cea:	3a01      	subs	r2, #1
 8006cec:	2c00      	cmp	r4, #0
 8006cee:	d1f7      	bne.n	8006ce0 <strncpy+0x6>
 8006cf0:	441a      	add	r2, r3
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d100      	bne.n	8006cfa <strncpy+0x20>
 8006cf8:	bd10      	pop	{r4, pc}
 8006cfa:	f803 1b01 	strb.w	r1, [r3], #1
 8006cfe:	e7f9      	b.n	8006cf4 <strncpy+0x1a>

08006d00 <_init>:
 8006d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d02:	bf00      	nop
 8006d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d06:	bc08      	pop	{r3}
 8006d08:	469e      	mov	lr, r3
 8006d0a:	4770      	bx	lr

08006d0c <_fini>:
 8006d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0e:	bf00      	nop
 8006d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006d12:	bc08      	pop	{r3}
 8006d14:	469e      	mov	lr, r3
 8006d16:	4770      	bx	lr
